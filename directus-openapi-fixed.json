{
  "openapi": "3.0.1",
  "info": {
    "title": "Dynamic API Specification",
    "description": "This is a dynamically generated API specification for all endpoints existing on the current project.",
    "version": "f7e66c51c8a8b3a8e2c81d8af6715ac6cde4bb53"
  },
  "servers": [
    {
      "url": "http://localhost:4343",
      "description": "Your current Directus instance."
    }
  ],
  "paths": {
    "/assets/{id}": {
      "get": {
        "tags": [
          "Assets"
        ],
        "operationId": "getAsset",
        "summary": "Get an Asset",
        "description": "Image typed files can be dynamically resized and transformed to fit any need.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "query",
            "description": "The key of the asset size configured in settings.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transforms",
            "in": "query",
            "description": "A JSON array of image transformations",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "download",
            "in": "query",
            "description": "Download the asset to your computer",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Retrieve a Temporary Access Token",
        "description": "Retrieve a Temporary Access Token",
        "tags": [
          "Authentication"
        ],
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "admin@example.com",
                    "description": "Email address of the user you're retrieving the access token for."
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of the user.",
                    "format": "password",
                    "example": "password"
                  },
                  "mode": {
                    "type": "string",
                    "enum": [
                      "json",
                      "cookie",
                      "session"
                    ],
                    "default": "json",
                    "description": "Whether to retrieve the refresh token in the JSON response, or in a httpOnly cookie."
                  },
                  "otp": {
                    "type": "string",
                    "description": "The user's one-time-password (if MFA is enabled)."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful authentification",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "access_token": {
                          "type": "string",
                          "example": "eyJhbGciOiJI..."
                        },
                        "expires": {
                          "type": "integer",
                          "example": 900
                        },
                        "refresh_token": {
                          "type": "string",
                          "example": "yuOJkjdPXMd..."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "summary": "Refresh Token",
        "description": "Refresh a Temporary Access Token.",
        "tags": [
          "Authentication"
        ],
        "operationId": "refresh",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refresh_token": {
                    "type": "string",
                    "example": "eyJ0eXAiOiJKV...",
                    "description": "JWT access token you want to refresh. This token can't be expired."
                  },
                  "mode": {
                    "type": "string",
                    "enum": [
                      "json",
                      "cookie",
                      "session"
                    ],
                    "default": "json",
                    "description": "Whether to submit and retrieve the refresh token in the JSON response, or in a httpOnly cookie."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "access_token": {
                          "type": "string",
                          "example": "eyJhbGciOiJI..."
                        },
                        "expires": {
                          "type": "integer",
                          "example": 900
                        },
                        "refresh_token": {
                          "type": "string",
                          "example": "Gy-caJMpmGTA..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "Log Out",
        "description": "Log Out",
        "tags": [
          "Authentication"
        ],
        "operationId": "logout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refresh_token": {
                    "type": "string",
                    "example": "eyJ0eXAiOiJKV...",
                    "description": "The refresh token to invalidate. If you have the refresh token in a cookie through /auth/login, you don't have to submit it here."
                  },
                  "mode": {
                    "type": "string",
                    "enum": [
                      "json",
                      "cookie",
                      "session"
                    ],
                    "description": "Whether the refresh token is submitted in the JSON response, or in a httpOnly cookie."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request successful"
          }
        }
      }
    },
    "/auth/password/request": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "operationId": "passwordRequest",
        "summary": "Request a Password Reset",
        "description": "Request a reset password email to be send.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "admin@example.com",
                    "description": "Email address of the user you're requesting a reset for."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/auth/password/reset": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "operationId": "passwordReset",
        "summary": "Reset a Password",
        "description": "The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token",
                  "password"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "eyJ0eXAiOiJKV1Qi...",
                    "description": "One-time use JWT token that is used to verify the user."
                  },
                  "password": {
                    "type": "string",
                    "example": "password",
                    "format": "password",
                    "description": "New password for the user."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/auth/oauth": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "operationId": "oauth",
        "summary": "List OAuth Providers",
        "description": "List configured OAuth providers.",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "public": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "example": [
                        "github",
                        "facebook"
                      ],
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/auth/oauth/{provider}": {
      "get": {
        "summary": "Authenticated using an OAuth provider",
        "description": "Start OAuth flow using the specified provider",
        "tags": [
          "Authentication"
        ],
        "operationId": "oauthProvider",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "description": "Key of the activated OAuth provider.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect",
            "in": "query",
            "required": false,
            "description": "Where to redirect on successful login.<br/>If set the authentication details are set inside cookies otherwise a JSON is returned.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "public": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/schema/snapshot": {
      "get": {
        "summary": "Retrieve Schema Snapshot",
        "description": "Retrieve the current schema. This endpoint is only available to admin users.",
        "operationId": "schemaSnapshot",
        "parameters": [
          {
            "$ref": "#/components/parameters/Export"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Schema"
                    }
                  }
                }
              },
              "text/yaml": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "tags": [
          "Schema"
        ]
      }
    },
    "/schema/apply": {
      "post": {
        "summary": "Apply Schema Difference",
        "description": "Update the instance's schema by passing the diff previously retrieved via `/schema/diff` endpoint in the JSON request body or a JSON/YAML file. This endpoint is only available to admin users.",
        "operationId": "schemaApply",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Diff"
                  }
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful request"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "tags": [
          "Schema"
        ]
      }
    },
    "/schema/diff": {
      "post": {
        "summary": "Retrieve Schema Difference",
        "description": "Compare the current instance's schema against the schema snapshot in JSON request body or a JSON/YAML file and retrieve the difference. This endpoint is only available to admin users.",
        "operationId": "schemaDiff",
        "parameters": [
          {
            "name": "force",
            "description": "Bypass version and database vendor restrictions.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Schema"
                  }
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Diff"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No schema difference."
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "tags": [
          "Schema"
        ]
      }
    },
    "/server/info": {
      "get": {
        "summary": "System Info",
        "description": "Perform a system status check and return the options.",
        "operationId": "serverInfo",
        "parameters": [
          {
            "description": "The first time you create a project, the provided token will be saved and required for subsequent project installs. It can also be found and configured in `/config/__api.json` on your server.",
            "in": "query",
            "name": "super_admin_token",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Server"
        ]
      }
    },
    "/server/ping": {
      "get": {
        "summary": "Ping",
        "description": "Ping, pong. Ping.. pong.",
        "operationId": "ping",
        "responses": {
          "200": {
            "content": {
              "application/text": {
                "schema": {
                  "type": "string",
                  "pattern": "pong",
                  "example": "pong"
                }
              }
            },
            "description": "Successful request"
          }
        },
        "tags": [
          "Server"
        ]
      }
    },
    "/utils/hash/generate": {
      "post": {
        "summary": "Hash a string",
        "description": "Generate a hash for a given string.",
        "operationId": "hash-generate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "string": {
                    "description": "String to hash.",
                    "type": "string"
                  }
                },
                "required": [
                  "string"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "string",
                      "example": "$argon2i$v=19$m=4096,t=3,p=1$pOyIa/zmRAjCVLb2f7kOyg$DasoO6LzMM+6iKfzCDq6JbsYsZWLSm33p7i9NxL9mDc"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful request"
          }
        },
        "tags": [
          "Utilities"
        ]
      }
    },
    "/utils/hash/verify": {
      "post": {
        "summary": "Hash a string",
        "description": "Generate a hash for a given string.",
        "operationId": "hash-verify",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "string": {
                    "description": "String to hash.",
                    "type": "string"
                  },
                  "hash": {
                    "description": "Hash you want to verify against.",
                    "type": "string"
                  }
                },
                "required": [
                  "string",
                  "hash"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "boolean",
                      "example": true
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful request"
          }
        },
        "tags": [
          "Utilities"
        ]
      }
    },
    "/utils/sort/{collection}": {
      "post": {
        "summary": "Sort Items",
        "description": "Re-sort items in collection based on start and to value of item",
        "operationId": "sort",
        "parameters": [
          {
            "description": "Collection identifier",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "item": {
                    "description": "Primary key of item to move",
                    "type": "number"
                  },
                  "to": {
                    "description": "Primary key of item where to move the current item to",
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request"
          }
        },
        "tags": [
          "Utilities"
        ]
      }
    },
    "/utils/import/{collection}": {
      "post": {
        "summary": "Import Items",
        "description": "Import multiple records from a JSON or CSV file into a collection.",
        "operationId": "import",
        "parameters": [
          {
            "description": "Collection identifier",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request"
          }
        },
        "tags": [
          "Utilities"
        ]
      }
    },
    "/utils/export/{collection}": {
      "post": {
        "summary": "Export Items",
        "description": "Export a larger data set to a file in the File Library",
        "operationId": "export",
        "parameters": [
          {
            "description": "Collection identifier",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "format": {
                    "description": "What file format to save the export to. One of csv, xml, json",
                    "type": "string",
                    "enum": [
                      "csv",
                      "xml",
                      "json"
                    ]
                  },
                  "query": {
                    "$ref": "#/components/schemas/Query"
                  },
                  "file": {
                    "$ref": "#/components/schemas/Files"
                  }
                },
                "required": [
                  "format",
                  "query",
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request"
          }
        },
        "tags": [
          "Utilities"
        ]
      }
    },
    "/utils/cache/clear": {
      "post": {
        "summary": "Clear Cache",
        "description": "Resets both the data and schema cache of Directus.",
        "operationId": "clear-cache",
        "responses": {
          "200": {
            "description": "Successful request"
          }
        },
        "tags": [
          "Utilities"
        ]
      }
    },
    "/utils/random/string": {
      "get": {
        "summary": "Get a Random String",
        "description": "Returns a random string of given length.",
        "operationId": "random",
        "parameters": [
          {
            "description": "Length of the random string.",
            "in": "query",
            "name": "length",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "string",
                      "example": "1>M3+4oh.S"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful request"
          }
        },
        "tags": [
          "Utilities"
        ]
      }
    },
    "/activity": {
      "get": {
        "operationId": "getActivities",
        "summary": "List Activity Actions",
        "description": "Returns a list of activity actions.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Activity"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Activity"
        ]
      }
    },
    "/activity/{id}": {
      "get": {
        "summary": "Retrieve an Activity Action",
        "description": "Retrieves the details of an existing activity action. Provide the primary key of the activity action and Directus will return the corresponding information.",
        "operationId": "getActivity",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Activity"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Activity"
        ]
      }
    },
    "/permissions": {
      "get": {
        "summary": "List Permissions",
        "description": "List all permissions.",
        "operationId": "getPermissions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Permissions"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Permissions"
        ]
      },
      "post": {
        "summary": "Create a Permission",
        "description": "Create a new permission.",
        "operationId": "createPermission",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "collection": {
                    "description": "What collection this permission applies to.",
                    "type": "string",
                    "example": "customers"
                  },
                  "comment": {
                    "description": "If the user can post comments.",
                    "type": "string",
                    "enum": [
                      "none",
                      "create",
                      "update",
                      "full"
                    ]
                  },
                  "create": {
                    "description": "If the user can create items.",
                    "type": "string",
                    "enum": [
                      "none",
                      "full"
                    ]
                  },
                  "delete": {
                    "description": "If the user can update items.",
                    "type": "string",
                    "enum": [
                      "none",
                      "mine",
                      "role",
                      "full"
                    ]
                  },
                  "explain": {
                    "description": "If the user is required to leave a comment explaining what was changed.",
                    "type": "string",
                    "enum": [
                      "none",
                      "create",
                      "update",
                      "always"
                    ]
                  },
                  "read": {
                    "description": "If the user can read items.",
                    "type": "string",
                    "enum": [
                      "none",
                      "mine",
                      "role",
                      "full"
                    ]
                  },
                  "role": {
                    "description": "Unique identifier of the role this permission applies to.",
                    "type": "integer",
                    "example": 3
                  },
                  "read_field_blacklist": {
                    "description": "Explicitly denies read access for specific fields.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "featured_image"
                    ]
                  },
                  "status": {
                    "description": "What status this permission applies to.",
                    "type": "string"
                  },
                  "status_blacklist": {
                    "description": "Explicitly denies specific statuses to be used.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "update": {
                    "description": "If the user can update items.",
                    "type": "string",
                    "enum": [
                      "none",
                      "mine",
                      "role",
                      "full"
                    ]
                  },
                  "write_field_blacklist": {
                    "description": "Explicitly denies write access for specific fields.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Permissions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Permissions"
        ]
      },
      "patch": {
        "summary": "Update Multiple Permissions",
        "description": "Update multiple permissions at the same time.",
        "tags": [
          "Permissions"
        ],
        "operationId": "updatePermissions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "data": {
                    "properties": {
                      "collection": {
                        "description": "What collection this permission applies to.",
                        "type": "string",
                        "example": "customers"
                      },
                      "comment": {
                        "description": "If the user can post comments.",
                        "type": "string",
                        "enum": [
                          "none",
                          "create",
                          "update",
                          "full"
                        ]
                      },
                      "create": {
                        "description": "If the user can create items.",
                        "type": "string",
                        "enum": [
                          "none",
                          "full"
                        ]
                      },
                      "delete": {
                        "description": "If the user can update items.",
                        "type": "string",
                        "enum": [
                          "none",
                          "mine",
                          "role",
                          "full"
                        ]
                      },
                      "explain": {
                        "description": "If the user is required to leave a comment explaining what was changed.",
                        "type": "string",
                        "enum": [
                          "none",
                          "create",
                          "update",
                          "always"
                        ]
                      },
                      "read": {
                        "description": "If the user can read items.",
                        "type": "string",
                        "enum": [
                          "none",
                          "mine",
                          "role",
                          "full"
                        ]
                      },
                      "role": {
                        "description": "Unique identifier of the role this permission applies to.",
                        "type": "integer",
                        "example": 3
                      },
                      "read_field_blacklist": {
                        "description": "Explicitly denies read access for specific fields.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "featured_image"
                        ]
                      },
                      "status": {
                        "description": "What status this permission applies to.",
                        "type": "string"
                      },
                      "status_blacklist": {
                        "description": "Explicitly denies specific statuses to be used.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "update": {
                        "description": "If the user can update items.",
                        "type": "string",
                        "enum": [
                          "none",
                          "mine",
                          "role",
                          "full"
                        ]
                      },
                      "write_field_blacklist": {
                        "description": "Explicitly denies write access for specific fields.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Permissions"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Permissions",
        "description": "Delete multiple existing permissions.",
        "tags": [
          "Permissions"
        ],
        "operationId": "deletePermissions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/permissions/me": {
      "get": {
        "summary": "List My Permissions",
        "description": "List the permissions that apply to the current user.",
        "operationId": "getMyPermissions",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Permissions"
        ]
      }
    },
    "/permissions/{id}": {
      "get": {
        "summary": "Retrieve a Permission",
        "description": "Retrieve a single permissions object by unique identifier.",
        "operationId": "getPermission",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Permissions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Permissions"
        ]
      },
      "patch": {
        "summary": "Update a Permission",
        "description": "Update an existing permission",
        "operationId": "updatePermission",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "collection": {
                    "description": "What collection this permission applies to.",
                    "type": "object"
                  },
                  "comment": {
                    "description": "If the user can post comments. `full`.",
                    "type": "string",
                    "enum": [
                      "none",
                      "create",
                      "update"
                    ]
                  },
                  "create": {
                    "description": "If the user can create items.",
                    "type": "string",
                    "enum": [
                      "none",
                      "full"
                    ]
                  },
                  "delete": {
                    "description": "If the user can update items.",
                    "type": "string",
                    "enum": [
                      "none",
                      "mine",
                      "role",
                      "full"
                    ]
                  },
                  "explain": {
                    "description": "If the user is required to leave a comment explaining what was changed.",
                    "type": "string",
                    "enum": [
                      "none",
                      "create",
                      "update",
                      "always"
                    ]
                  },
                  "read": {
                    "description": "If the user can read items.",
                    "type": "string",
                    "enum": [
                      "none",
                      "mine",
                      "role",
                      "full"
                    ]
                  },
                  "read_field_blacklist": {
                    "description": "Explicitly denies read access for specific fields.",
                    "type": "object"
                  },
                  "role": {
                    "description": "Unique identifier of the role this permission applies to.",
                    "type": "object"
                  },
                  "status": {
                    "description": "What status this permission applies to.",
                    "type": "object"
                  },
                  "status_blacklist": {
                    "description": "Explicitly denies specific statuses to be used.",
                    "type": "object"
                  },
                  "update": {
                    "description": "If the user can update items.",
                    "type": "string",
                    "enum": [
                      "none",
                      "mine",
                      "role",
                      "full"
                    ]
                  },
                  "write_field_blacklist": {
                    "description": "Explicitly denies write access for specific fields.",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Permissions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Permissions"
        ]
      },
      "delete": {
        "summary": "Delete a Permission",
        "description": "Delete an existing permission",
        "operationId": "deletePermission",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Permissions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ]
      }
    },
    "/fields": {
      "get": {
        "summary": "List All Fields",
        "description": "Returns a list of the fields available in the project.",
        "operationId": "getFields",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Sort"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Fields"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Fields"
        ]
      }
    },
    "/fields/{collection}": {
      "get": {
        "summary": "List Fields in Collection",
        "description": "Returns a list of the fields available in the given collection.",
        "operationId": "getCollectionFields",
        "parameters": [
          {
            "description": "Unique identifier of the collection the item resides in.",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Sort"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Fields"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Fields"
        ]
      },
      "post": {
        "summary": "Create Field in Collection",
        "description": "Create a new field in a given collection.",
        "operationId": "createField",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "field",
                  "datatype",
                  "type",
                  "length"
                ],
                "type": "object",
                "properties": {
                  "field": {
                    "description": "Unique name of the field. Field name is unique within the collection.",
                    "example": "id",
                    "type": "string"
                  },
                  "type": {
                    "description": "Directus specific data type. Used to cast values in the API.",
                    "example": "integer",
                    "type": "string"
                  },
                  "schema": {
                    "description": "The schema info.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "The name of the field.",
                        "example": "title",
                        "type": "string"
                      },
                      "table": {
                        "description": "The collection of the field.",
                        "example": "posts",
                        "type": "string"
                      },
                      "type": {
                        "description": "The type of the field.",
                        "example": "string",
                        "type": "string"
                      },
                      "default_value": {
                        "description": "The default value of the field.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "max_length": {
                        "description": "The max length of the field.",
                        "example": null,
                        "type": "integer",
                        "nullable": true
                      },
                      "is_nullable": {
                        "description": "If the field is nullable.",
                        "example": false,
                        "type": "boolean"
                      },
                      "is_primary_key": {
                        "description": "If the field is primary key.",
                        "example": false,
                        "type": "boolean"
                      },
                      "has_auto_increment": {
                        "description": "If the field has auto increment.",
                        "example": false,
                        "type": "boolean"
                      },
                      "foreign_key_column": {
                        "description": "Related column from the foreign key constraint.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "foreign_key_table": {
                        "description": "Related table from the foreign key constraint.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "comment": {
                        "description": "Comment as saved in the database.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "schema": {
                        "description": "Database schema (pg only).",
                        "example": "public",
                        "type": "string"
                      },
                      "foreign_key_schema": {
                        "description": "Related schema from the foreign key constraint (pg only).",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      }
                    }
                  },
                  "meta": {
                    "description": "The meta info.",
                    "type": "object",
                    "nullable": true,
                    "properties": {
                      "id": {
                        "description": "Unique identifier for the field in the `directus_fields` collection.",
                        "example": 3,
                        "type": "integer"
                      },
                      "collection": {
                        "description": "Unique name of the collection this field is in.",
                        "example": "posts",
                        "type": "string"
                      },
                      "field": {
                        "description": "Unique name of the field. Field name is unique within the collection.",
                        "example": "title",
                        "type": "string"
                      },
                      "special": {
                        "description": "Transformation flag for field",
                        "example": null,
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "nullable": true
                      },
                      "system-interface": {
                        "description": "What interface is used in the admin app to edit the value for this field.",
                        "example": "primary-key",
                        "type": "string",
                        "nullable": true
                      },
                      "options": {
                        "description": "Options for the interface that's used. This format is based on the individual interface.",
                        "example": null,
                        "type": "object",
                        "nullable": true
                      },
                      "display": {
                        "description": "What display is used in the admin app to display the value for this field.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "display_options": {
                        "description": "Options for the display that's used. This format is based on the individual display.",
                        "example": null,
                        "type": "object",
                        "nullable": true
                      },
                      "locked": {
                        "description": "If the field can be altered by the end user. Directus system fields have this value set to `true`.",
                        "example": true,
                        "type": "boolean"
                      },
                      "readonly": {
                        "description": "Prevents the user from editing the value in the field.",
                        "example": false,
                        "type": "boolean"
                      },
                      "hidden": {
                        "description": "If this field should be hidden.",
                        "example": true,
                        "type": "boolean"
                      },
                      "sort": {
                        "description": "Sort order of this field on the edit page of the admin app.",
                        "example": 1,
                        "type": "integer",
                        "nullable": true
                      },
                      "width": {
                        "description": "Width of the field on the edit form.",
                        "example": null,
                        "type": "string",
                        "nullable": true,
                        "enum": [
                          "half",
                          "half-left",
                          "half-right",
                          "full",
                          "fill",
                          null
                        ]
                      },
                      "group": {
                        "description": "What field group this field is part of.",
                        "example": null,
                        "type": "integer",
                        "nullable": true
                      },
                      "translation": {
                        "description": "Key value pair of `<language>: <translation>` that allows the user to change the displayed name of the field in the admin app.",
                        "example": null,
                        "type": "object",
                        "nullable": true
                      },
                      "note": {
                        "description": "A user provided note for the field. Will be rendered alongside the interface on the edit page.",
                        "example": "",
                        "type": "string",
                        "nullable": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Fields"
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Fields"
        ],
        "parameters": [
          {
            "description": "Unique identifier of the collection the item resides in.",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/fields/{collection}/{id}": {
      "get": {
        "summary": "Retrieve a Field",
        "description": "Retrieves the details of a single field in a given collection.",
        "operationId": "getCollectionField",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Fields"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Fields"
        ],
        "parameters": [
          {
            "name": "collection",
            "in": "path",
            "description": "Unique identifier of the collection the item resides in.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the field.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ]
      },
      "patch": {
        "summary": "Update a Field",
        "description": "Update an existing field.",
        "operationId": "updateField",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "field": {
                    "description": "Unique name of the field. Field name is unique within the collection.",
                    "example": "id",
                    "type": "string"
                  },
                  "type": {
                    "description": "Directus specific data type. Used to cast values in the API.",
                    "example": "integer",
                    "type": "string"
                  },
                  "schema": {
                    "description": "The schema info.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "The name of the field.",
                        "example": "title",
                        "type": "string"
                      },
                      "table": {
                        "description": "The collection of the field.",
                        "example": "posts",
                        "type": "string"
                      },
                      "type": {
                        "description": "The type of the field.",
                        "example": "string",
                        "type": "string"
                      },
                      "default_value": {
                        "description": "The default value of the field.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "max_length": {
                        "description": "The max length of the field.",
                        "example": null,
                        "type": "integer",
                        "nullable": true
                      },
                      "is_nullable": {
                        "description": "If the field is nullable.",
                        "example": false,
                        "type": "boolean"
                      },
                      "is_primary_key": {
                        "description": "If the field is primary key.",
                        "example": false,
                        "type": "boolean"
                      },
                      "has_auto_increment": {
                        "description": "If the field has auto increment.",
                        "example": false,
                        "type": "boolean"
                      },
                      "foreign_key_column": {
                        "description": "Related column from the foreign key constraint.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "foreign_key_table": {
                        "description": "Related table from the foreign key constraint.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "comment": {
                        "description": "Comment as saved in the database.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "schema": {
                        "description": "Database schema (pg only).",
                        "example": "public",
                        "type": "string"
                      },
                      "foreign_key_schema": {
                        "description": "Related schema from the foreign key constraint (pg only).",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      }
                    }
                  },
                  "meta": {
                    "description": "The meta info.",
                    "type": "object",
                    "nullable": true,
                    "properties": {
                      "id": {
                        "description": "Unique identifier for the field in the `directus_fields` collection.",
                        "example": 3,
                        "type": "integer"
                      },
                      "collection": {
                        "description": "Unique name of the collection this field is in.",
                        "example": "posts",
                        "type": "string"
                      },
                      "field": {
                        "description": "Unique name of the field. Field name is unique within the collection.",
                        "example": "title",
                        "type": "string"
                      },
                      "special": {
                        "description": "Transformation flag for field",
                        "example": null,
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "nullable": true
                      },
                      "system-interface": {
                        "description": "What interface is used in the admin app to edit the value for this field.",
                        "example": "primary-key",
                        "type": "string",
                        "nullable": true
                      },
                      "options": {
                        "description": "Options for the interface that's used. This format is based on the individual interface.",
                        "example": null,
                        "type": "object",
                        "nullable": true
                      },
                      "display": {
                        "description": "What display is used in the admin app to display the value for this field.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "display_options": {
                        "description": "Options for the display that's used. This format is based on the individual display.",
                        "example": null,
                        "type": "object",
                        "nullable": true
                      },
                      "locked": {
                        "description": "If the field can be altered by the end user. Directus system fields have this value set to `true`.",
                        "example": true,
                        "type": "boolean"
                      },
                      "readonly": {
                        "description": "Prevents the user from editing the value in the field.",
                        "example": false,
                        "type": "boolean"
                      },
                      "hidden": {
                        "description": "If this field should be hidden.",
                        "example": true,
                        "type": "boolean"
                      },
                      "sort": {
                        "description": "Sort order of this field on the edit page of the admin app.",
                        "example": 1,
                        "type": "integer",
                        "nullable": true
                      },
                      "width": {
                        "description": "Width of the field on the edit form.",
                        "example": null,
                        "type": "string",
                        "nullable": true,
                        "enum": [
                          "half",
                          "half-left",
                          "half-right",
                          "full",
                          "fill",
                          null
                        ]
                      },
                      "group": {
                        "description": "What field group this field is part of.",
                        "example": null,
                        "type": "integer",
                        "nullable": true
                      },
                      "translation": {
                        "description": "Key value pair of `<language>: <translation>` that allows the user to change the displayed name of the field in the admin app.",
                        "example": null,
                        "type": "object",
                        "nullable": true
                      },
                      "note": {
                        "description": "A user provided note for the field. Will be rendered alongside the interface on the edit page.",
                        "example": "",
                        "type": "string",
                        "nullable": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Fields"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Fields"
        ],
        "parameters": [
          {
            "name": "collection",
            "in": "path",
            "description": "Unique identifier of the collection the item resides in.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the field.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ]
      },
      "delete": {
        "summary": "Delete a Field",
        "description": "Delete an existing field.",
        "operationId": "deleteField",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Fields"
        ],
        "parameters": [
          {
            "name": "collection",
            "in": "path",
            "description": "Unique identifier of the collection the item resides in.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the field.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ]
      }
    },
    "/files": {
      "get": {
        "summary": "List Files",
        "description": "List the files.",
        "tags": [
          "Files"
        ],
        "operationId": "getFiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Files"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "summary": "Create a File",
        "description": "Create a new file",
        "tags": [
          "Files"
        ],
        "operationId": "createFile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Files"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Files",
        "description": "Update multiple files at the same time.",
        "tags": [
          "Files"
        ],
        "operationId": "updateFiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  },
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Files"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Files",
        "description": "Delete multiple existing files.",
        "tags": [
          "Files"
        ],
        "operationId": "deleteFiles",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/files/{id}": {
      "get": {
        "summary": "Retrieve a Files",
        "description": "Retrieve a single file by unique identifier.",
        "tags": [
          "Files"
        ],
        "operationId": "getFile",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Files"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update a File",
        "description": "Update an existing file, and/or replace it's file contents.",
        "tags": [
          "Files"
        ],
        "operationId": "updateFile",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "title": {
                    "description": "Title for the file. Is extracted from the filename on upload, but can be edited by the user.",
                    "example": "User Avatar",
                    "type": "string"
                  },
                  "filename_download": {
                    "description": "Preferred filename when file is downloaded.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description for the file.",
                    "type": "string",
                    "nullable": true
                  },
                  "folder": {
                    "description": "Virtual folder where this file resides in.",
                    "example": null,
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/Folders"
                      }
                    ],
                    "nullable": true
                  },
                  "tags": {
                    "description": "Tags for the file. Is automatically populated based on Exif data for images.",
                    "type": "array",
                    "nullable": true,
                    "items": {
                      "type": "string"
                    }
                  },
                  "file": {
                    "description": "File contents.",
                    "format": "binary"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "description": "Title for the file. Is extracted from the filename on upload, but can be edited by the user.",
                    "example": "User Avatar",
                    "type": "string"
                  },
                  "filename_download": {
                    "description": "Preferred filename when file is downloaded.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description for the file.",
                    "type": "string",
                    "nullable": true
                  },
                  "folder": {
                    "description": "Virtual folder where this file resides in.",
                    "example": null,
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/Folders"
                      }
                    ],
                    "nullable": true
                  },
                  "tags": {
                    "description": "Tags for the file. Is automatically populated based on Exif data for images.",
                    "type": "array",
                    "nullable": true,
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Files"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete a File",
        "description": "Delete an existing file.",
        "tags": [
          "Files"
        ],
        "operationId": "deleteFile",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      }
    },
    "/collections": {
      "get": {
        "summary": "List Collections",
        "description": "Returns a list of the collections available in the project.",
        "operationId": "getCollections",
        "parameters": [
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Collections"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Collections"
        ]
      },
      "post": {
        "summary": "Create a Collection",
        "description": "Create a new collection in Directus.",
        "operationId": "createCollection",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "collection",
                  "fields"
                ],
                "properties": {
                  "collection": {
                    "type": "string",
                    "description": "Unique name of the collection.",
                    "example": "my_collection"
                  },
                  "fields": {
                    "type": "array",
                    "description": "The fields contained in this collection. See the fields reference for more information. Each individual field requires field, type, and interface to be provided.",
                    "items": {
                      "type": "object"
                    }
                  },
                  "icon": {
                    "description": "Name of a Google Material Design Icon that's assigned to this collection.",
                    "type": "string",
                    "example": "people",
                    "nullable": true
                  },
                  "note": {
                    "description": "A note describing the collection.",
                    "type": "string",
                    "example": null,
                    "nullable": true
                  },
                  "display_template": {
                    "description": "Text representation of how items from this collection are shown across the system.",
                    "type": "string",
                    "example": null,
                    "nullable": true
                  },
                  "hidden": {
                    "description": "Whether or not the collection is hidden from the navigation in the admin app.",
                    "type": "boolean",
                    "example": false
                  },
                  "singleton": {
                    "description": "Whether or not the collection is treated as a single object.",
                    "type": "boolean",
                    "example": false
                  },
                  "translation": {
                    "description": "Key value pairs of how to show this collection's name in different languages in the admin app.",
                    "type": "string",
                    "example": null,
                    "nullable": true
                  },
                  "versioning": {
                    "description": "Whether or not Content Versioning is enabled for this collection.",
                    "type": "boolean",
                    "example": false
                  },
                  "archive_field": {
                    "description": "What field holds the archive value.",
                    "type": "string",
                    "example": null,
                    "nullable": true
                  },
                  "archive_app_filter": {
                    "description": "What value to use for \"archived\" items.",
                    "type": "string",
                    "example": null,
                    "nullable": true
                  },
                  "archive_value": {
                    "description": "What value to use to \"unarchive\" items.",
                    "type": "string",
                    "example": null,
                    "nullable": true
                  },
                  "unarchive_value": {
                    "description": "Whether or not to show the \"archived\" filter.",
                    "type": "string",
                    "example": null,
                    "nullable": true
                  },
                  "sort_field": {
                    "description": "The sort field in the collection.",
                    "type": "string",
                    "example": null,
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Collections"
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Collections"
        ]
      }
    },
    "/collections/{id}": {
      "get": {
        "summary": "Retrieve a Collection",
        "description": "Retrieves the details of a single collection.",
        "operationId": "getCollection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the collection.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Collections"
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Collections"
        ]
      },
      "patch": {
        "summary": "Update a Collection",
        "description": "Update an existing collection.",
        "operationId": "updateCollection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the collection.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "meta": {
                    "description": "Metadata of the collection.",
                    "type": "object",
                    "properties": {
                      "icon": {
                        "description": "Name of a Google Material Design Icon that's assigned to this collection.",
                        "type": "string",
                        "example": "people",
                        "nullable": true
                      },
                      "color": {
                        "description": "Choose the color for the icon assigned to this collection.",
                        "type": "string",
                        "example": "#6644ff",
                        "nullable": true
                      },
                      "note": {
                        "description": "A note describing the collection.",
                        "type": "string",
                        "example": null,
                        "nullable": true
                      },
                      "display_template": {
                        "description": "Text representation of how items from this collection are shown across the system.",
                        "type": "string",
                        "example": null,
                        "nullable": true
                      },
                      "hidden": {
                        "description": "Whether or not the collection is hidden from the navigation in the admin app.",
                        "type": "boolean",
                        "example": false
                      },
                      "singleton": {
                        "description": "Whether or not the collection is treated as a single object.",
                        "type": "boolean",
                        "example": false
                      },
                      "translation": {
                        "description": "Key value pairs of how to show this collection's name in different languages in the admin app.",
                        "type": "string",
                        "example": null,
                        "nullable": true
                      },
                      "versioning": {
                        "description": "Whether or not Content Versioning is enabled for this collection.",
                        "type": "boolean",
                        "example": false
                      },
                      "archive_field": {
                        "description": "What field holds the archive value.",
                        "type": "string",
                        "example": null,
                        "nullable": true
                      },
                      "archive_app_filter": {
                        "description": "What value to use for \"archived\" items.",
                        "type": "string",
                        "example": null,
                        "nullable": true
                      },
                      "archive_value": {
                        "description": "What value to use to \"unarchive\" items.",
                        "type": "string",
                        "example": null,
                        "nullable": true
                      },
                      "unarchive_value": {
                        "description": "Whether or not to show the \"archived\" filter.",
                        "type": "string",
                        "example": null,
                        "nullable": true
                      },
                      "sort_field": {
                        "description": "The sort field in the collection.",
                        "type": "string",
                        "example": null,
                        "nullable": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Collections"
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Collections"
        ]
      },
      "delete": {
        "summary": "Delete a Collection",
        "description": "Delete an existing collection. Warning: This will delete the whole collection, including the items within. Proceed with caution.",
        "operationId": "deleteCollection",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the collection.",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/folders": {
      "get": {
        "summary": "List Folders",
        "description": "List the folders.",
        "operationId": "getFolders",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Folders"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Folders"
        ]
      },
      "post": {
        "summary": "Create a Folder",
        "description": "Create a new folder.",
        "operationId": "createFolder",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Amsterdam",
                    "description": "Name of the folder."
                  },
                  "parent": {
                    "description": "Unique identifier of the parent folder. This allows for nested folders.",
                    "type": "integer"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Folders"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Folders"
        ]
      },
      "patch": {
        "summary": "Update Multiple Folders",
        "description": "Update multiple folders at the same time.",
        "tags": [
          "Folders"
        ],
        "operationId": "updateFolders",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "Amsterdam",
                        "description": "Name of the folder."
                      },
                      "parent": {
                        "description": "Unique identifier of the parent folder. This allows for nested folders.",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "name"
                    ]
                  },
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Folders"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Folders",
        "description": "Delete multiple existing folders.",
        "tags": [
          "Folders"
        ],
        "operationId": "deleteFolders",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/folders/{id}": {
      "get": {
        "summary": "Retrieve a Folder",
        "description": "Retrieve a single folder by unique identifier.",
        "operationId": "getFolder",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Folders"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Folders"
        ]
      },
      "patch": {
        "summary": "Update a Folder",
        "description": "Update an existing folder",
        "operationId": "updateFolder",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the folder. Can't be null or empty."
                  },
                  "parent": {
                    "type": "integer",
                    "example": 3,
                    "description": "Unique identifier of the parent folder. This allows for nested folders."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Folders"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Folders"
        ]
      },
      "delete": {
        "summary": "Delete a Folder",
        "description": "Delete an existing folder",
        "operationId": "deleteFolder",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Folders"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      }
    },
    "/users": {
      "get": {
        "summary": "List Users",
        "description": "List the users.",
        "operationId": "getUsers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Users"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      },
      "post": {
        "summary": "Create a User",
        "description": "Create a new user.",
        "operationId": "createUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Users"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "summary": "Update Multiple Users",
        "description": "Update multiple users at the same time.",
        "tags": [
          "Users"
        ],
        "operationId": "updateUsers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Users"
                  },
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Users"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Users",
        "description": "Delete multiple existing users.",
        "tags": [
          "Users"
        ],
        "operationId": "deleteUsers",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Retrieve a User",
        "description": "Retrieve a single user by unique identifier.",
        "operationId": "getUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Users"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "summary": "Update a User",
        "description": "Update an existing user",
        "operationId": "updateUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "summary": "Delete a User",
        "description": "Delete an existing user",
        "operationId": "deleteUser",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      }
    },
    "/users/invite": {
      "post": {
        "summary": "Invite User(s)",
        "description": "Invites one or more users to this project. It creates a user with an invited status, and then sends an email to the user with instructions on how to activate their account.",
        "operationId": "invite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "description": "Email address or array of email addresses of the to-be-invited user(s).",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Users"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/invite/accept": {
      "post": {
        "summary": "Accept User Invite",
        "description": "Accepts and enables an invited user using a JWT invitation token.",
        "operationId": "acceptInvite",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "eyJh...KmUk",
                    "description": "Accept invite token."
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of the user.",
                    "format": "password",
                    "example": "d1r3ctu5"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Users"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/me": {
      "get": {
        "summary": "Retrieve Current User",
        "description": "Retrieve the currently authenticated user.",
        "operationId": "getMe",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Users"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "summary": "Update Current User",
        "description": "Update the currently authenticated user.",
        "operationId": "updateMe",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Users"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/me/track/page": {
      "patch": {
        "summary": "Update Last Page",
        "description": "Updates the last used page field of the currently authenticated user. This is used internally to be able to open the Directus admin app from the last page you used.",
        "operationId": "updateLastUsedPageMe",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "last_page": {
                    "description": "Path of the page you used last.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/me/tfa/enable": {
      "post": {
        "summary": "Enable 2FA",
        "description": "Enables two-factor authentication for the currently authenticated user.",
        "operationId": "meTfaEnable",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/me/tfa/disable": {
      "post": {
        "summary": "Disable 2FA",
        "description": "Disables two-factor authentication for the currently authenticated user.",
        "operationId": "meTfaDisable",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/roles": {
      "get": {
        "summary": "List Roles",
        "description": "List the roles.",
        "operationId": "getRoles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Roles"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Roles"
        ]
      },
      "post": {
        "summary": "Create a Role",
        "description": "Create a new role.",
        "operationId": "createRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "Description of the role.",
                    "type": "string"
                  },
                  "enforce_tfa": {
                    "description": "Whether or not this role enforces the use of 2FA.",
                    "type": "boolean"
                  },
                  "external_id": {
                    "description": "ID used with external services in SCIM.",
                    "type": "string"
                  },
                  "ip_access": {
                    "description": "Array of IP addresses that are allowed to connect to the API as a user of this role.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "module_listing": {
                    "description": "Custom override for the admin app module bar navigation.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the role.",
                    "type": "string",
                    "example": "Interns"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Roles"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Roles"
        ]
      },
      "patch": {
        "summary": "Update Multiple Roles",
        "description": "Update multiple roles at the same time.",
        "tags": [
          "Roles"
        ],
        "operationId": "updateRoles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "description": {
                        "description": "Description of the role.",
                        "type": "string"
                      },
                      "enforce_tfa": {
                        "description": "Whether or not this role enforces the use of 2FA.",
                        "type": "boolean"
                      },
                      "external_id": {
                        "description": "ID used with external services in SCIM.",
                        "type": "string"
                      },
                      "ip_access": {
                        "description": "Array of IP addresses that are allowed to connect to the API as a user of this role.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "module_listing": {
                        "description": "Custom override for the admin app module bar navigation.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the role.",
                        "type": "string",
                        "example": "Interns"
                      }
                    }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Roles"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Roles",
        "description": "Delete multiple existing roles.",
        "tags": [
          "Roles"
        ],
        "operationId": "deleteRoles",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/roles/{id}": {
      "get": {
        "summary": "Retrieve a Role",
        "description": "Retrieve a single role by unique identifier.",
        "operationId": "getRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Roles"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Roles"
        ]
      },
      "patch": {
        "summary": "Update a Role",
        "description": "Update an existing role",
        "operationId": "updateRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "Description of the role.",
                    "type": "string"
                  },
                  "enforce_tfa": {
                    "description": "Whether or not this role enforces the use of 2FA.",
                    "type": "boolean"
                  },
                  "external_id": {
                    "description": "ID used with external services in SCIM.",
                    "type": "string"
                  },
                  "ip_access": {
                    "description": "Array of IP addresses that are allowed to connect to the API as a user of this role.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "module_listing": {
                    "description": "Custom override for the admin app module bar navigation.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the role.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Roles"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Roles"
        ]
      },
      "delete": {
        "summary": "Delete a Role",
        "description": "Delete an existing role",
        "operationId": "deleteRole",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Roles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      }
    },
    "/presets": {
      "get": {
        "tags": [
          "Presets"
        ],
        "operationId": "getPresets",
        "summary": "List Presets",
        "description": "List the presets.",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Presets"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "tags": [
          "Presets"
        ],
        "operationId": "createPreset",
        "summary": "Create a Preset",
        "description": "Create a new preset.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "collection"
                ],
                "properties": {
                  "collection": {
                    "type": "string",
                    "description": "What collection this collection preset is used for.",
                    "example": "articles"
                  },
                  "title": {
                    "type": "string",
                    "description": "Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.",
                    "example": "Highly rated articles"
                  },
                  "role": {
                    "type": "string",
                    "description": "The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role.",
                    "example": null
                  },
                  "search": {
                    "type": "string",
                    "description": "What the user searched for in search/filter in the header bar."
                  },
                  "filters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "example": "aHKLAakdVghzD"
                        },
                        "field": {
                          "type": "string",
                          "example": "rating"
                        },
                        "operator": {
                          "type": "string",
                          "example": "gte"
                        },
                        "value": {
                          "type": "integer",
                          "example": 4.5
                        }
                      }
                    }
                  },
                  "layout": {
                    "type": "string",
                    "description": "Name of the view type that is used."
                  },
                  "layout_query": {
                    "type": "string",
                    "description": "Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters."
                  },
                  "layout_options": {
                    "type": "string",
                    "description": "Options of the views. The properties in here are controlled by the layout."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Presets"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Presets",
        "description": "Update multiple presets at the same time.",
        "tags": [
          "Presets"
        ],
        "operationId": "updatePresets",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "data": {
                    "type": "object",
                    "required": [
                      "collection"
                    ],
                    "properties": {
                      "collection": {
                        "type": "string",
                        "description": "What collection this collection preset is used for.",
                        "example": "articles"
                      },
                      "title": {
                        "type": "string",
                        "description": "Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.",
                        "example": "Highly rated articles"
                      },
                      "role": {
                        "type": "string",
                        "description": "The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role.",
                        "example": null
                      },
                      "search": {
                        "type": "string",
                        "description": "What the user searched for in search/filter in the header bar."
                      },
                      "filters": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string",
                              "example": "aHKLAakdVghzD"
                            },
                            "field": {
                              "type": "string",
                              "example": "rating"
                            },
                            "operator": {
                              "type": "string",
                              "example": "gte"
                            },
                            "value": {
                              "type": "integer",
                              "example": 4.5
                            }
                          }
                        }
                      },
                      "layout": {
                        "type": "string",
                        "description": "Name of the view type that is used."
                      },
                      "layout_query": {
                        "type": "string",
                        "description": "Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters."
                      },
                      "layout_options": {
                        "type": "string",
                        "description": "Options of the views. The properties in here are controlled by the layout."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Presets"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Presets",
        "description": "Delete multiple existing presets.",
        "tags": [
          "Presets"
        ],
        "operationId": "deletePresets",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/presets/{id}": {
      "get": {
        "tags": [
          "Presets"
        ],
        "operationId": "getPreset",
        "summary": "Retrieve a Preset",
        "description": "Retrieve a single preset by unique identifier.",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Presets"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "tags": [
          "Presets"
        ],
        "operationId": "updatePreset",
        "summary": "Update a Preset",
        "description": "Update an existing preset.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "collection"
                ],
                "properties": {
                  "collection": {
                    "type": "string",
                    "description": "What collection this collection preset is used for.",
                    "example": "articles"
                  },
                  "title": {
                    "type": "string",
                    "description": "Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.",
                    "example": "Highly rated articles"
                  },
                  "role": {
                    "type": "integer",
                    "description": "The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role."
                  },
                  "search_query": {
                    "type": "string",
                    "description": "What the user searched for in search/filter in the header bar."
                  },
                  "filters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "field": {
                          "type": "string",
                          "example": "rating"
                        },
                        "operator": {
                          "type": "string",
                          "example": "gte"
                        },
                        "value": {
                          "type": "integer",
                          "example": 4.5
                        }
                      }
                    }
                  },
                  "view_type": {
                    "type": "string",
                    "description": "Name of the view type that is used. Defaults to tabular."
                  },
                  "view_query": {
                    "type": "string",
                    "description": "View query that's saved per view type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters."
                  },
                  "view_options": {
                    "type": "string",
                    "description": "Options of the views. The properties in here are controlled by the layout."
                  },
                  "translation": {
                    "type": "object",
                    "description": "Key value pair of language-translation. Can be used to translate the bookmark title in multiple languages."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Presets"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "tags": [
          "Presets"
        ],
        "operationId": "deletePreset",
        "summary": "Delete a Preset",
        "description": "Delete an existing preset.",
        "security": [
          {
            "Auth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ]
      }
    },
    "/revisions": {
      "get": {
        "summary": "List Revisions",
        "description": "List the revisions.",
        "operationId": "getRevisions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Revisions"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Revisions"
        ]
      }
    },
    "/revisions/{id}": {
      "get": {
        "summary": "Retrieve a Revision",
        "description": "Retrieve a single revision by unique identifier.",
        "operationId": "getRevision",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Revisions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Revisions"
        ]
      }
    },
    "/relations": {
      "get": {
        "summary": "List Relations",
        "description": "List the relations.",
        "operationId": "getRelations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Relations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Relations"
        ]
      },
      "post": {
        "summary": "Create a Relation",
        "description": "Create a new relation.",
        "operationId": "createRelation",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "collection_many": {
                    "description": "Collection that has the field that holds the foreign key.",
                    "type": "string",
                    "example": "articles"
                  },
                  "collection_one": {
                    "description": "Collection on the _one_ side of the relationship.",
                    "type": "string",
                    "example": "authors"
                  },
                  "field_many": {
                    "description": "Foreign key. Field that holds the primary key of the related collection.",
                    "type": "string",
                    "example": "author"
                  },
                  "field_one": {
                    "description": "Alias column that serves as the _one_ side of the relationship.",
                    "type": "string",
                    "example": "books"
                  },
                  "junction_field": {
                    "description": "Field on the junction table that holds the primary key of the related collection.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Relations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Relations"
        ]
      }
    },
    "/relations/{id}": {
      "get": {
        "summary": "Retrieve a Relation",
        "description": "Retrieve a single relation by unique identifier.",
        "operationId": "getRelation",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Relations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Relations"
        ]
      },
      "patch": {
        "summary": "Update a Relation",
        "description": "Update an existing relation",
        "operationId": "updateRelation",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "collection_many": {
                    "description": "Collection that has the field that holds the foreign key.",
                    "type": "string"
                  },
                  "collection_one": {
                    "description": "Collection on the _one_ side of the relationship.",
                    "type": "string"
                  },
                  "field_many": {
                    "description": "Foreign key. Field that holds the primary key of the related collection.",
                    "type": "string"
                  },
                  "field_one": {
                    "description": "Alias column that serves as the _one_ side of the relationship.",
                    "type": "string",
                    "example": "books"
                  },
                  "junction_field": {
                    "description": "Field on the junction table that holds the primary key of the related collection.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Relations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Relations"
        ]
      },
      "delete": {
        "summary": "Delete a Relation",
        "description": "Delete an existing relation.",
        "operationId": "deleteRelation",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Relations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ]
      }
    },
    "/flows": {
      "get": {
        "summary": "List Flows",
        "description": "Get all flows.",
        "operationId": "getFlows",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Flows"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Flows"
        ]
      },
      "post": {
        "summary": "Create a Flow",
        "description": "Create a new flow.",
        "operationId": "createFlow",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Flows"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Flows"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Flows"
        ]
      },
      "patch": {
        "summary": "Update Multiple Flows",
        "description": "Update multiple flows at the same time.",
        "tags": [
          "Flows"
        ],
        "operationId": "updateFlows",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/Flows"
                      }
                    ]
                  },
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Flows"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Flows",
        "description": "Delete multiple existing flows.",
        "tags": [
          "Flows"
        ],
        "operationId": "deleteFlows",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/flows/{id}": {
      "get": {
        "summary": "Retrieve a Flow",
        "description": "Retrieve a single flow by unique identifier.",
        "operationId": "getFlow",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Flows"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Flows"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      },
      "patch": {
        "summary": "Update a Flow",
        "description": "Update an existing flow",
        "operationId": "updateFlow",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Flows"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Flows"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Flows"
        ]
      },
      "delete": {
        "summary": "Delete a Flow",
        "description": "Delete an existing flow",
        "operationId": "deleteFlow",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Flows"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      }
    },
    "/operations": {
      "get": {
        "summary": "List Operations",
        "description": "Get all operations.",
        "operationId": "getOperations",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Operations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Operations"
        ]
      },
      "post": {
        "summary": "Create an Operation",
        "description": "Create a new operation.",
        "operationId": "createOperation",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Operations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Operations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Operations"
        ]
      },
      "patch": {
        "summary": "Update Multiple Operations",
        "description": "Update multiple operations at the same time.",
        "tags": [
          "Operations"
        ],
        "operationId": "updateOperations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/Operations"
                      }
                    ]
                  },
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Operations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Operations",
        "description": "Delete multiple existing operations.",
        "tags": [
          "Operations"
        ],
        "operationId": "deleteOperations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/operations/{id}": {
      "get": {
        "summary": "Retrieve an Operation",
        "description": "Retrieve a single operation by unique identifier.",
        "operationId": "getOperation",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Operations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Operations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      },
      "patch": {
        "summary": "Update an Operation",
        "description": "Update an existing operation",
        "operationId": "updateOperation",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Operations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Operations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Operations"
        ]
      },
      "delete": {
        "summary": "Delete an Operation",
        "description": "Delete an existing operation",
        "operationId": "deleteOperation",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Operations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      }
    },
    "/webhooks": {
      "get": {
        "summary": "List Webhooks",
        "description": "Get all webhooks.",
        "operationId": "getWebhooks",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Webhooks"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Webhooks"
        ]
      },
      "post": {
        "summary": "Create a Webhook",
        "description": "Create a new webhook.",
        "operationId": "createWebhook",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "The name of the webhook.",
                    "type": "string",
                    "example": "create articles"
                  },
                  "method": {
                    "description": "Method used in the webhook.",
                    "type": "string",
                    "example": "POST"
                  },
                  "url": {
                    "description": "The url of the webhook.",
                    "type": "string",
                    "example": null
                  },
                  "status": {
                    "description": "The status of the webhook.",
                    "type": "string",
                    "example": "active"
                  },
                  "data": {
                    "description": "If yes, send the content of what was done",
                    "type": "boolean",
                    "example": true
                  },
                  "actions": {
                    "description": "The actions that triggers this webhook.",
                    "example": null
                  },
                  "system-collections": {
                    "description": "The collections that triggers this webhook.",
                    "example": null
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Roles"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Webhooks"
        ]
      },
      "patch": {
        "summary": "Update Multiple Webhooks",
        "description": "Update multiple webhooks at the same time.",
        "tags": [
          "Webhooks"
        ],
        "operationId": "updateWebhooks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "name": {
                        "description": "The name of the webhook.",
                        "type": "string",
                        "example": "create articles"
                      },
                      "method": {
                        "description": "Method used in the webhook.",
                        "type": "string",
                        "example": "POST"
                      },
                      "url": {
                        "description": "The url of the webhook.",
                        "type": "string",
                        "example": null
                      },
                      "status": {
                        "description": "The status of the webhook.",
                        "type": "string",
                        "example": "active"
                      },
                      "data": {
                        "description": "If yes, send the content of what was done",
                        "type": "boolean",
                        "example": true
                      },
                      "actions": {
                        "description": "The actions that triggers this webhook.",
                        "example": null
                      },
                      "system-collections": {
                        "description": "The collections that triggers this webhook.",
                        "example": null
                      }
                    },
                    "type": "object"
                  },
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Webhooks"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Webhooks",
        "description": "Delete multiple existing webhooks.",
        "tags": [
          "Webhooks"
        ],
        "operationId": "deleteWebhooks",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/webhooks/{id}": {
      "get": {
        "summary": "Retrieve a Webhook",
        "description": "Retrieve a single webhook by unique identifier.",
        "operationId": "getWebhook",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Webhooks"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      },
      "patch": {
        "summary": "Update a Webhook",
        "description": "Update an existing webhook",
        "operationId": "updateWebhook",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "The name of the webhook.",
                    "type": "string",
                    "example": "create articles"
                  },
                  "method": {
                    "description": "Method used in the webhook.",
                    "type": "string",
                    "example": "POST"
                  },
                  "url": {
                    "description": "The url of the webhook.",
                    "type": "string",
                    "example": null
                  },
                  "status": {
                    "description": "The status of the webhook.",
                    "type": "string",
                    "example": "active"
                  },
                  "data": {
                    "description": "If yes, send the content of what was done",
                    "type": "boolean",
                    "example": true
                  },
                  "actions": {
                    "description": "The actions that triggers this webhook.",
                    "example": null
                  },
                  "system-collections": {
                    "description": "The collections that triggers this webhook.",
                    "example": null
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Roles"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Webhooks"
        ]
      },
      "delete": {
        "summary": "Delete a Webhook",
        "description": "Delete an existing webhook",
        "operationId": "deleteWebhook",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      }
    },
    "/extensions": {
      "get": {
        "summary": "List Extensions",
        "description": "List the installed extensions and their configuration in the project.",
        "operationId": "listExtensions",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Extensions"
                      }
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "tags": [
          "Extensions"
        ]
      }
    },
    "/extensions/{name}": {
      "patch": {
        "summary": "Update an Extension",
        "description": "Update an existing extension.",
        "operationId": "updateExtensions",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "meta": {
                    "type": "object",
                    "description": "Directus metadata for the extension. Where the configuration for the extension in the current project is stored.",
                    "properties": {
                      "enabled": {
                        "description": "Whether or not the extension is enabled.",
                        "example": true,
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Extensions"
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Extensions"
        ]
      }
    },
    "/extensions/{bundle}/{name}": {
      "patch": {
        "summary": "Update an Extension",
        "description": "Update an existing extension.",
        "operationId": "updateExtensionBundle",
        "parameters": [
          {
            "in": "path",
            "name": "bundle",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "meta": {
                    "type": "object",
                    "description": "Directus metadata for the extension. Where the configuration for the extension in the current project is stored.",
                    "properties": {
                      "enabled": {
                        "description": "Whether or not the extension is enabled.",
                        "example": true,
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Extensions"
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Extensions"
        ]
      }
    },
    "/settings": {
      "get": {
        "summary": "Retrieve Settings",
        "description": "List the settings.",
        "operationId": "getSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Settings"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Settings"
        ]
      },
      "patch": {
        "summary": "Update Settings",
        "description": "Update the settings",
        "operationId": "updateSetting",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Settings"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Settings"
        ]
      }
    },
    "/versions": {
      "get": {
        "summary": "List Content Versions",
        "description": "Get all Content Versions.",
        "operationId": "getContentVersions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Versions"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Versions"
        ]
      },
      "post": {
        "summary": "Create Multiple Content Versions",
        "description": "Create multiple new Content Versions.",
        "operationId": "createContentVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Versions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Versions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Versions"
        ]
      },
      "patch": {
        "summary": "Update Multiple Content Versions",
        "description": "Update multiple Content Versions at the same time.",
        "operationId": "updateContentVersions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/Versions"
                      }
                    ]
                  },
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Versions"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "tags": [
          "Versions"
        ]
      },
      "delete": {
        "summary": "Delete Multiple Content Versions",
        "description": "Delete multiple existing Content Versions.",
        "operationId": "deleteContentVersions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "tags": [
          "Versions"
        ]
      }
    },
    "/versions/{id}": {
      "get": {
        "summary": "Retrieve a Content Version",
        "description": "Retrieve a single Content Version by unique identifier.",
        "operationId": "getContentVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Versions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Versions"
        ]
      },
      "patch": {
        "summary": "Update a Content Version",
        "description": "Update an existing Content Version.",
        "operationId": "updateContentVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Versions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Versions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Versions"
        ]
      },
      "delete": {
        "summary": "Delete a Content Version",
        "description": "Delete an existing Content Version.",
        "operationId": "deleteContentVersion",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Versions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      }
    },
    "/versions/{id}/save": {
      "post": {
        "summary": "Save to a Content Version",
        "description": "Save item changes to an existing Content Version.",
        "operationId": "saveContentVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Versions"
        ]
      }
    },
    "/versions/{id}/compare": {
      "get": {
        "summary": "Compare a Content Version",
        "description": "Compare an existing Content Version with the main version of the item.",
        "operationId": "compareContentVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Versions"
        ]
      }
    },
    "/versions/{id}/promote": {
      "post": {
        "summary": "Promote a Content Version",
        "description": "Pass the current hash of the main version of the item (obtained from the `compare` endpoint) along with an optional array of field names of which the values are to be promoted (by default, all fields are selected).",
        "operationId": "promoteContentVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "mainHash": {
                    "description": "Hash of the main version of the item to be promoted.",
                    "type": "string"
                  },
                  "fields": {
                    "description": "Optional array of field names of which the values are to be promoted.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Versions"
        ]
      }
    },
    "/comments": {
      "get": {
        "tags": [
          "Comments"
        ],
        "operationId": "getComments",
        "summary": "List Comments",
        "description": "List the comments.",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Comments"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "tags": [
          "Comments"
        ],
        "operationId": "createComment",
        "summary": "Create a Comment",
        "description": "Create a new comment.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "collection",
                  "item",
                  "comment"
                ],
                "properties": {
                  "collection": {
                    "type": "string",
                    "description": "Which collection this collection comment is for.",
                    "example": "projects"
                  },
                  "item": {
                    "type": "string",
                    "example": "81dfa7e0-56d2-471f-b96a-1cf8a62bdf28"
                  },
                  "comment": {
                    "type": "string",
                    "example": "A new comment"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Comments"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Comments",
        "description": "Update multiple comments at the same time.",
        "tags": [
          "Comments"
        ],
        "operationId": "updateComments",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "data": {
                    "type": "object",
                    "required": [
                      "collection"
                    ],
                    "properties": {
                      "collection": {
                        "type": "string",
                        "description": "Which collection this collection comment is for.",
                        "example": "projects"
                      },
                      "item": {
                        "type": "string",
                        "example": "81dfa7e0-56d2-471f-b96a-1cf8a62bdf28"
                      },
                      "comment": {
                        "type": "string",
                        "example": "A new comment"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Comments"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Comments",
        "description": "Delete multiple existing comments.",
        "tags": [
          "Comments"
        ],
        "operationId": "deleteComments",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/comments/{id}": {
      "get": {
        "tags": [
          "Comments"
        ],
        "operationId": "getComment",
        "summary": "Retrieve a Comment",
        "description": "Retrieve a single comment by unique identifier.",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Comments"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "tags": [
          "Comments"
        ],
        "operationId": "updateComment",
        "summary": "Update a Comment",
        "description": "Update an existing comment.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "collection"
                ],
                "properties": {
                  "collection": {
                    "type": "string",
                    "description": "Which collection this comment is for.",
                    "example": "projects"
                  },
                  "item": {
                    "type": "string",
                    "example": "81dfa7e0-56d2-471f-b96a-1cf8a62bdf28"
                  },
                  "comment": {
                    "type": "string",
                    "example": "An updated comment"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Comments"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "tags": [
          "Comments"
        ],
        "operationId": "deleteComment",
        "summary": "Delete a Comment",
        "description": "Delete an existing comment.",
        "security": [
          {
            "Auth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/block_button": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new block_button item.",
        "tags": [
          "Items",
          "ItemsBlockButton"
        ],
        "operationId": "createItemsBlockButton",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBlockButton"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBlockButton"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBlockButton"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the block_button items.",
        "tags": [
          "Items",
          "ItemsBlockButton"
        ],
        "operationId": "readItemsBlockButton",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsBlockButton"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple block_button items at the same time.",
        "tags": [
          "Items",
          "ItemsBlockButton"
        ],
        "operationId": "updateItemsBlockButton",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBlockButton"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBlockButton"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBlockButton"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing block_button items.",
        "tags": [
          "Items",
          "ItemsBlockButton"
        ],
        "operationId": "deleteItemsBlockButton",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/block_button/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single block_button item by unique identifier.",
        "tags": [
          "Items",
          "ItemsBlockButton"
        ],
        "operationId": "readSingleItemsBlockButton",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBlockButton"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing block_button item.",
        "tags": [
          "Items",
          "ItemsBlockButton"
        ],
        "operationId": "updateSingleItemsBlockButton",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsBlockButton"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBlockButton"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing block_button item.",
        "tags": [
          "Items",
          "ItemsBlockButton"
        ],
        "operationId": "deleteSingleItemsBlockButton",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/block_posts": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new block_posts item.",
        "tags": [
          "Items",
          "ItemsBlockPosts"
        ],
        "operationId": "createItemsBlockPosts",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBlockPosts"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBlockPosts"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBlockPosts"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the block_posts items.",
        "tags": [
          "Items",
          "ItemsBlockPosts"
        ],
        "operationId": "readItemsBlockPosts",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsBlockPosts"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple block_posts items at the same time.",
        "tags": [
          "Items",
          "ItemsBlockPosts"
        ],
        "operationId": "updateItemsBlockPosts",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBlockPosts"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBlockPosts"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBlockPosts"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing block_posts items.",
        "tags": [
          "Items",
          "ItemsBlockPosts"
        ],
        "operationId": "deleteItemsBlockPosts",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/block_posts/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single block_posts item by unique identifier.",
        "tags": [
          "Items",
          "ItemsBlockPosts"
        ],
        "operationId": "readSingleItemsBlockPosts",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBlockPosts"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing block_posts item.",
        "tags": [
          "Items",
          "ItemsBlockPosts"
        ],
        "operationId": "updateSingleItemsBlockPosts",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsBlockPosts"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBlockPosts"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing block_posts item.",
        "tags": [
          "Items",
          "ItemsBlockPosts"
        ],
        "operationId": "deleteSingleItemsBlockPosts",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/block_button_group": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new block_button_group item.",
        "tags": [
          "Items",
          "ItemsBlockButtonGroup"
        ],
        "operationId": "createItemsBlockButtonGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBlockButtonGroup"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBlockButtonGroup"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBlockButtonGroup"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the block_button_group items.",
        "tags": [
          "Items",
          "ItemsBlockButtonGroup"
        ],
        "operationId": "readItemsBlockButtonGroup",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsBlockButtonGroup"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple block_button_group items at the same time.",
        "tags": [
          "Items",
          "ItemsBlockButtonGroup"
        ],
        "operationId": "updateItemsBlockButtonGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBlockButtonGroup"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBlockButtonGroup"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBlockButtonGroup"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing block_button_group items.",
        "tags": [
          "Items",
          "ItemsBlockButtonGroup"
        ],
        "operationId": "deleteItemsBlockButtonGroup",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/block_button_group/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single block_button_group item by unique identifier.",
        "tags": [
          "Items",
          "ItemsBlockButtonGroup"
        ],
        "operationId": "readSingleItemsBlockButtonGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBlockButtonGroup"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing block_button_group item.",
        "tags": [
          "Items",
          "ItemsBlockButtonGroup"
        ],
        "operationId": "updateSingleItemsBlockButtonGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsBlockButtonGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBlockButtonGroup"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing block_button_group item.",
        "tags": [
          "Items",
          "ItemsBlockButtonGroup"
        ],
        "operationId": "deleteSingleItemsBlockButtonGroup",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/block_hero": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new block_hero item.",
        "tags": [
          "Items",
          "ItemsBlockHero"
        ],
        "operationId": "createItemsBlockHero",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBlockHero"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBlockHero"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBlockHero"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the block_hero items.",
        "tags": [
          "Items",
          "ItemsBlockHero"
        ],
        "operationId": "readItemsBlockHero",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsBlockHero"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple block_hero items at the same time.",
        "tags": [
          "Items",
          "ItemsBlockHero"
        ],
        "operationId": "updateItemsBlockHero",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBlockHero"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBlockHero"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBlockHero"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing block_hero items.",
        "tags": [
          "Items",
          "ItemsBlockHero"
        ],
        "operationId": "deleteItemsBlockHero",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/block_hero/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single block_hero item by unique identifier.",
        "tags": [
          "Items",
          "ItemsBlockHero"
        ],
        "operationId": "readSingleItemsBlockHero",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBlockHero"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing block_hero item.",
        "tags": [
          "Items",
          "ItemsBlockHero"
        ],
        "operationId": "updateSingleItemsBlockHero",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsBlockHero"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBlockHero"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing block_hero item.",
        "tags": [
          "Items",
          "ItemsBlockHero"
        ],
        "operationId": "deleteSingleItemsBlockHero",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/block_gallery_items": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new block_gallery_items item.",
        "tags": [
          "Items",
          "ItemsBlockGalleryItems"
        ],
        "operationId": "createItemsBlockGalleryItems",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBlockGalleryItems"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBlockGalleryItems"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBlockGalleryItems"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the block_gallery_items items.",
        "tags": [
          "Items",
          "ItemsBlockGalleryItems"
        ],
        "operationId": "readItemsBlockGalleryItems",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsBlockGalleryItems"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple block_gallery_items items at the same time.",
        "tags": [
          "Items",
          "ItemsBlockGalleryItems"
        ],
        "operationId": "updateItemsBlockGalleryItems",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBlockGalleryItems"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBlockGalleryItems"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBlockGalleryItems"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing block_gallery_items items.",
        "tags": [
          "Items",
          "ItemsBlockGalleryItems"
        ],
        "operationId": "deleteItemsBlockGalleryItems",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/block_gallery_items/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single block_gallery_items item by unique identifier.",
        "tags": [
          "Items",
          "ItemsBlockGalleryItems"
        ],
        "operationId": "readSingleItemsBlockGalleryItems",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBlockGalleryItems"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing block_gallery_items item.",
        "tags": [
          "Items",
          "ItemsBlockGalleryItems"
        ],
        "operationId": "updateSingleItemsBlockGalleryItems",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsBlockGalleryItems"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBlockGalleryItems"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing block_gallery_items item.",
        "tags": [
          "Items",
          "ItemsBlockGalleryItems"
        ],
        "operationId": "deleteSingleItemsBlockGalleryItems",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/block_gallery": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new block_gallery item.",
        "tags": [
          "Items",
          "ItemsBlockGallery"
        ],
        "operationId": "createItemsBlockGallery",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBlockGallery"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBlockGallery"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBlockGallery"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the block_gallery items.",
        "tags": [
          "Items",
          "ItemsBlockGallery"
        ],
        "operationId": "readItemsBlockGallery",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsBlockGallery"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple block_gallery items at the same time.",
        "tags": [
          "Items",
          "ItemsBlockGallery"
        ],
        "operationId": "updateItemsBlockGallery",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBlockGallery"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBlockGallery"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBlockGallery"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing block_gallery items.",
        "tags": [
          "Items",
          "ItemsBlockGallery"
        ],
        "operationId": "deleteItemsBlockGallery",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/block_gallery/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single block_gallery item by unique identifier.",
        "tags": [
          "Items",
          "ItemsBlockGallery"
        ],
        "operationId": "readSingleItemsBlockGallery",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBlockGallery"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing block_gallery item.",
        "tags": [
          "Items",
          "ItemsBlockGallery"
        ],
        "operationId": "updateSingleItemsBlockGallery",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsBlockGallery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBlockGallery"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing block_gallery item.",
        "tags": [
          "Items",
          "ItemsBlockGallery"
        ],
        "operationId": "deleteSingleItemsBlockGallery",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/block_form": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new block_form item.",
        "tags": [
          "Items",
          "ItemsBlockForm"
        ],
        "operationId": "createItemsBlockForm",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBlockForm"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBlockForm"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBlockForm"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the block_form items.",
        "tags": [
          "Items",
          "ItemsBlockForm"
        ],
        "operationId": "readItemsBlockForm",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsBlockForm"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple block_form items at the same time.",
        "tags": [
          "Items",
          "ItemsBlockForm"
        ],
        "operationId": "updateItemsBlockForm",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBlockForm"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBlockForm"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBlockForm"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing block_form items.",
        "tags": [
          "Items",
          "ItemsBlockForm"
        ],
        "operationId": "deleteItemsBlockForm",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/block_form/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single block_form item by unique identifier.",
        "tags": [
          "Items",
          "ItemsBlockForm"
        ],
        "operationId": "readSingleItemsBlockForm",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBlockForm"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing block_form item.",
        "tags": [
          "Items",
          "ItemsBlockForm"
        ],
        "operationId": "updateSingleItemsBlockForm",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsBlockForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBlockForm"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing block_form item.",
        "tags": [
          "Items",
          "ItemsBlockForm"
        ],
        "operationId": "deleteSingleItemsBlockForm",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/globals": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new globals item.",
        "tags": [
          "Items",
          "ItemsGlobals"
        ],
        "operationId": "createItemsGlobals",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsGlobals"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsGlobals"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsGlobals"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the globals items.",
        "tags": [
          "Items",
          "ItemsGlobals"
        ],
        "operationId": "readItemsGlobals",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsGlobals"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple globals items at the same time.",
        "tags": [
          "Items",
          "ItemsGlobals"
        ],
        "operationId": "updateItemsGlobals",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsGlobals"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsGlobals"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsGlobals"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing globals items.",
        "tags": [
          "Items",
          "ItemsGlobals"
        ],
        "operationId": "deleteItemsGlobals",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/globals/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single globals item by unique identifier.",
        "tags": [
          "Items",
          "ItemsGlobals"
        ],
        "operationId": "readSingleItemsGlobals",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsGlobals"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing globals item.",
        "tags": [
          "Items",
          "ItemsGlobals"
        ],
        "operationId": "updateSingleItemsGlobals",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsGlobals"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsGlobals"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing globals item.",
        "tags": [
          "Items",
          "ItemsGlobals"
        ],
        "operationId": "deleteSingleItemsGlobals",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/block_pricing": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new block_pricing item.",
        "tags": [
          "Items",
          "ItemsBlockPricing"
        ],
        "operationId": "createItemsBlockPricing",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBlockPricing"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBlockPricing"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBlockPricing"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the block_pricing items.",
        "tags": [
          "Items",
          "ItemsBlockPricing"
        ],
        "operationId": "readItemsBlockPricing",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsBlockPricing"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple block_pricing items at the same time.",
        "tags": [
          "Items",
          "ItemsBlockPricing"
        ],
        "operationId": "updateItemsBlockPricing",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBlockPricing"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBlockPricing"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBlockPricing"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing block_pricing items.",
        "tags": [
          "Items",
          "ItemsBlockPricing"
        ],
        "operationId": "deleteItemsBlockPricing",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/block_pricing/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single block_pricing item by unique identifier.",
        "tags": [
          "Items",
          "ItemsBlockPricing"
        ],
        "operationId": "readSingleItemsBlockPricing",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBlockPricing"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing block_pricing item.",
        "tags": [
          "Items",
          "ItemsBlockPricing"
        ],
        "operationId": "updateSingleItemsBlockPricing",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsBlockPricing"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBlockPricing"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing block_pricing item.",
        "tags": [
          "Items",
          "ItemsBlockPricing"
        ],
        "operationId": "deleteSingleItemsBlockPricing",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/form_submission_values": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new form_submission_values item.",
        "tags": [
          "Items",
          "ItemsFormSubmissionValues"
        ],
        "operationId": "createItemsFormSubmissionValues",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFormSubmissionValues"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFormSubmissionValues"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsFormSubmissionValues"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the form_submission_values items.",
        "tags": [
          "Items",
          "ItemsFormSubmissionValues"
        ],
        "operationId": "readItemsFormSubmissionValues",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFormSubmissionValues"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple form_submission_values items at the same time.",
        "tags": [
          "Items",
          "ItemsFormSubmissionValues"
        ],
        "operationId": "updateItemsFormSubmissionValues",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFormSubmissionValues"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFormSubmissionValues"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsFormSubmissionValues"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing form_submission_values items.",
        "tags": [
          "Items",
          "ItemsFormSubmissionValues"
        ],
        "operationId": "deleteItemsFormSubmissionValues",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/form_submission_values/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single form_submission_values item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFormSubmissionValues"
        ],
        "operationId": "readSingleItemsFormSubmissionValues",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFormSubmissionValues"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing form_submission_values item.",
        "tags": [
          "Items",
          "ItemsFormSubmissionValues"
        ],
        "operationId": "updateSingleItemsFormSubmissionValues",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFormSubmissionValues"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFormSubmissionValues"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing form_submission_values item.",
        "tags": [
          "Items",
          "ItemsFormSubmissionValues"
        ],
        "operationId": "deleteSingleItemsFormSubmissionValues",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/block_pricing_cards": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new block_pricing_cards item.",
        "tags": [
          "Items",
          "ItemsBlockPricingCards"
        ],
        "operationId": "createItemsBlockPricingCards",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBlockPricingCards"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBlockPricingCards"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBlockPricingCards"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the block_pricing_cards items.",
        "tags": [
          "Items",
          "ItemsBlockPricingCards"
        ],
        "operationId": "readItemsBlockPricingCards",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsBlockPricingCards"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple block_pricing_cards items at the same time.",
        "tags": [
          "Items",
          "ItemsBlockPricingCards"
        ],
        "operationId": "updateItemsBlockPricingCards",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBlockPricingCards"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBlockPricingCards"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBlockPricingCards"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing block_pricing_cards items.",
        "tags": [
          "Items",
          "ItemsBlockPricingCards"
        ],
        "operationId": "deleteItemsBlockPricingCards",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/block_pricing_cards/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single block_pricing_cards item by unique identifier.",
        "tags": [
          "Items",
          "ItemsBlockPricingCards"
        ],
        "operationId": "readSingleItemsBlockPricingCards",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBlockPricingCards"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing block_pricing_cards item.",
        "tags": [
          "Items",
          "ItemsBlockPricingCards"
        ],
        "operationId": "updateSingleItemsBlockPricingCards",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsBlockPricingCards"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBlockPricingCards"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing block_pricing_cards item.",
        "tags": [
          "Items",
          "ItemsBlockPricingCards"
        ],
        "operationId": "deleteSingleItemsBlockPricingCards",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/form_submissions": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new form_submissions item.",
        "tags": [
          "Items",
          "ItemsFormSubmissions"
        ],
        "operationId": "createItemsFormSubmissions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFormSubmissions"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFormSubmissions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsFormSubmissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the form_submissions items.",
        "tags": [
          "Items",
          "ItemsFormSubmissions"
        ],
        "operationId": "readItemsFormSubmissions",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFormSubmissions"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple form_submissions items at the same time.",
        "tags": [
          "Items",
          "ItemsFormSubmissions"
        ],
        "operationId": "updateItemsFormSubmissions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFormSubmissions"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFormSubmissions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsFormSubmissions"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing form_submissions items.",
        "tags": [
          "Items",
          "ItemsFormSubmissions"
        ],
        "operationId": "deleteItemsFormSubmissions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/form_submissions/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single form_submissions item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFormSubmissions"
        ],
        "operationId": "readSingleItemsFormSubmissions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFormSubmissions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing form_submissions item.",
        "tags": [
          "Items",
          "ItemsFormSubmissions"
        ],
        "operationId": "updateSingleItemsFormSubmissions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFormSubmissions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFormSubmissions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing form_submissions item.",
        "tags": [
          "Items",
          "ItemsFormSubmissions"
        ],
        "operationId": "deleteSingleItemsFormSubmissions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/form_fields": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new form_fields item.",
        "tags": [
          "Items",
          "ItemsFormFields"
        ],
        "operationId": "createItemsFormFields",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFormFields"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFormFields"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsFormFields"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the form_fields items.",
        "tags": [
          "Items",
          "ItemsFormFields"
        ],
        "operationId": "readItemsFormFields",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFormFields"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple form_fields items at the same time.",
        "tags": [
          "Items",
          "ItemsFormFields"
        ],
        "operationId": "updateItemsFormFields",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFormFields"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFormFields"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsFormFields"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing form_fields items.",
        "tags": [
          "Items",
          "ItemsFormFields"
        ],
        "operationId": "deleteItemsFormFields",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/form_fields/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single form_fields item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFormFields"
        ],
        "operationId": "readSingleItemsFormFields",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFormFields"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing form_fields item.",
        "tags": [
          "Items",
          "ItemsFormFields"
        ],
        "operationId": "updateSingleItemsFormFields",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFormFields"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFormFields"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing form_fields item.",
        "tags": [
          "Items",
          "ItemsFormFields"
        ],
        "operationId": "deleteSingleItemsFormFields",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/navigation_items": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new navigation_items item.",
        "tags": [
          "Items",
          "ItemsNavigationItems"
        ],
        "operationId": "createItemsNavigationItems",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsNavigationItems"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsNavigationItems"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsNavigationItems"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the navigation_items items.",
        "tags": [
          "Items",
          "ItemsNavigationItems"
        ],
        "operationId": "readItemsNavigationItems",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsNavigationItems"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple navigation_items items at the same time.",
        "tags": [
          "Items",
          "ItemsNavigationItems"
        ],
        "operationId": "updateItemsNavigationItems",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsNavigationItems"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsNavigationItems"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsNavigationItems"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing navigation_items items.",
        "tags": [
          "Items",
          "ItemsNavigationItems"
        ],
        "operationId": "deleteItemsNavigationItems",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/navigation_items/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single navigation_items item by unique identifier.",
        "tags": [
          "Items",
          "ItemsNavigationItems"
        ],
        "operationId": "readSingleItemsNavigationItems",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsNavigationItems"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing navigation_items item.",
        "tags": [
          "Items",
          "ItemsNavigationItems"
        ],
        "operationId": "updateSingleItemsNavigationItems",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsNavigationItems"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsNavigationItems"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing navigation_items item.",
        "tags": [
          "Items",
          "ItemsNavigationItems"
        ],
        "operationId": "deleteSingleItemsNavigationItems",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/page_blocks": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new page_blocks item.",
        "tags": [
          "Items",
          "ItemsPageBlocks"
        ],
        "operationId": "createItemsPageBlocks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPageBlocks"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPageBlocks"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPageBlocks"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the page_blocks items.",
        "tags": [
          "Items",
          "ItemsPageBlocks"
        ],
        "operationId": "readItemsPageBlocks",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsPageBlocks"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple page_blocks items at the same time.",
        "tags": [
          "Items",
          "ItemsPageBlocks"
        ],
        "operationId": "updateItemsPageBlocks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPageBlocks"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPageBlocks"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPageBlocks"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing page_blocks items.",
        "tags": [
          "Items",
          "ItemsPageBlocks"
        ],
        "operationId": "deleteItemsPageBlocks",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/page_blocks/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single page_blocks item by unique identifier.",
        "tags": [
          "Items",
          "ItemsPageBlocks"
        ],
        "operationId": "readSingleItemsPageBlocks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPageBlocks"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing page_blocks item.",
        "tags": [
          "Items",
          "ItemsPageBlocks"
        ],
        "operationId": "updateSingleItemsPageBlocks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsPageBlocks"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPageBlocks"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing page_blocks item.",
        "tags": [
          "Items",
          "ItemsPageBlocks"
        ],
        "operationId": "deleteSingleItemsPageBlocks",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/block_richtext": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new block_richtext item.",
        "tags": [
          "Items",
          "ItemsBlockRichtext"
        ],
        "operationId": "createItemsBlockRichtext",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBlockRichtext"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBlockRichtext"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBlockRichtext"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the block_richtext items.",
        "tags": [
          "Items",
          "ItemsBlockRichtext"
        ],
        "operationId": "readItemsBlockRichtext",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsBlockRichtext"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple block_richtext items at the same time.",
        "tags": [
          "Items",
          "ItemsBlockRichtext"
        ],
        "operationId": "updateItemsBlockRichtext",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBlockRichtext"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBlockRichtext"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBlockRichtext"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing block_richtext items.",
        "tags": [
          "Items",
          "ItemsBlockRichtext"
        ],
        "operationId": "deleteItemsBlockRichtext",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/block_richtext/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single block_richtext item by unique identifier.",
        "tags": [
          "Items",
          "ItemsBlockRichtext"
        ],
        "operationId": "readSingleItemsBlockRichtext",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBlockRichtext"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing block_richtext item.",
        "tags": [
          "Items",
          "ItemsBlockRichtext"
        ],
        "operationId": "updateSingleItemsBlockRichtext",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsBlockRichtext"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBlockRichtext"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing block_richtext item.",
        "tags": [
          "Items",
          "ItemsBlockRichtext"
        ],
        "operationId": "deleteSingleItemsBlockRichtext",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/forms": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new forms item.",
        "tags": [
          "Items",
          "ItemsForms"
        ],
        "operationId": "createItemsForms",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsForms"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsForms"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsForms"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the forms items.",
        "tags": [
          "Items",
          "ItemsForms"
        ],
        "operationId": "readItemsForms",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsForms"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple forms items at the same time.",
        "tags": [
          "Items",
          "ItemsForms"
        ],
        "operationId": "updateItemsForms",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsForms"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsForms"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsForms"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing forms items.",
        "tags": [
          "Items",
          "ItemsForms"
        ],
        "operationId": "deleteItemsForms",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/forms/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single forms item by unique identifier.",
        "tags": [
          "Items",
          "ItemsForms"
        ],
        "operationId": "readSingleItemsForms",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsForms"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing forms item.",
        "tags": [
          "Items",
          "ItemsForms"
        ],
        "operationId": "updateSingleItemsForms",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsForms"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsForms"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing forms item.",
        "tags": [
          "Items",
          "ItemsForms"
        ],
        "operationId": "deleteSingleItemsForms",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/navigation": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new navigation item.",
        "tags": [
          "Items",
          "ItemsNavigation"
        ],
        "operationId": "createItemsNavigation",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsNavigation"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsNavigation"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsNavigation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the navigation items.",
        "tags": [
          "Items",
          "ItemsNavigation"
        ],
        "operationId": "readItemsNavigation",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsNavigation"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple navigation items at the same time.",
        "tags": [
          "Items",
          "ItemsNavigation"
        ],
        "operationId": "updateItemsNavigation",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsNavigation"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsNavigation"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsNavigation"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing navigation items.",
        "tags": [
          "Items",
          "ItemsNavigation"
        ],
        "operationId": "deleteItemsNavigation",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/navigation/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single navigation item by unique identifier.",
        "tags": [
          "Items",
          "ItemsNavigation"
        ],
        "operationId": "readSingleItemsNavigation",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsNavigation"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing navigation item.",
        "tags": [
          "Items",
          "ItemsNavigation"
        ],
        "operationId": "updateSingleItemsNavigation",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsNavigation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsNavigation"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing navigation item.",
        "tags": [
          "Items",
          "ItemsNavigation"
        ],
        "operationId": "deleteSingleItemsNavigation",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/redirects": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new redirects item.",
        "tags": [
          "Items",
          "ItemsRedirects"
        ],
        "operationId": "createItemsRedirects",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsRedirects"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsRedirects"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsRedirects"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the redirects items.",
        "tags": [
          "Items",
          "ItemsRedirects"
        ],
        "operationId": "readItemsRedirects",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsRedirects"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple redirects items at the same time.",
        "tags": [
          "Items",
          "ItemsRedirects"
        ],
        "operationId": "updateItemsRedirects",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsRedirects"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsRedirects"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsRedirects"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing redirects items.",
        "tags": [
          "Items",
          "ItemsRedirects"
        ],
        "operationId": "deleteItemsRedirects",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/redirects/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single redirects item by unique identifier.",
        "tags": [
          "Items",
          "ItemsRedirects"
        ],
        "operationId": "readSingleItemsRedirects",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsRedirects"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing redirects item.",
        "tags": [
          "Items",
          "ItemsRedirects"
        ],
        "operationId": "updateSingleItemsRedirects",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsRedirects"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsRedirects"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing redirects item.",
        "tags": [
          "Items",
          "ItemsRedirects"
        ],
        "operationId": "deleteSingleItemsRedirects",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/posts": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new posts item.",
        "tags": [
          "Items",
          "ItemsPosts"
        ],
        "operationId": "createItemsPosts",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPosts"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPosts"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPosts"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the posts items.",
        "tags": [
          "Items",
          "ItemsPosts"
        ],
        "operationId": "readItemsPosts",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsPosts"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple posts items at the same time.",
        "tags": [
          "Items",
          "ItemsPosts"
        ],
        "operationId": "updateItemsPosts",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPosts"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPosts"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPosts"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing posts items.",
        "tags": [
          "Items",
          "ItemsPosts"
        ],
        "operationId": "deleteItemsPosts",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/posts/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single posts item by unique identifier.",
        "tags": [
          "Items",
          "ItemsPosts"
        ],
        "operationId": "readSingleItemsPosts",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPosts"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing posts item.",
        "tags": [
          "Items",
          "ItemsPosts"
        ],
        "operationId": "updateSingleItemsPosts",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsPosts"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPosts"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing posts item.",
        "tags": [
          "Items",
          "ItemsPosts"
        ],
        "operationId": "deleteSingleItemsPosts",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/pages": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new pages item.",
        "tags": [
          "Items",
          "ItemsPages"
        ],
        "operationId": "createItemsPages",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPages"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPages"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPages"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the pages items.",
        "tags": [
          "Items",
          "ItemsPages"
        ],
        "operationId": "readItemsPages",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsPages"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple pages items at the same time.",
        "tags": [
          "Items",
          "ItemsPages"
        ],
        "operationId": "updateItemsPages",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPages"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPages"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPages"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing pages items.",
        "tags": [
          "Items",
          "ItemsPages"
        ],
        "operationId": "deleteItemsPages",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/pages/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single pages item by unique identifier.",
        "tags": [
          "Items",
          "ItemsPages"
        ],
        "operationId": "readSingleItemsPages",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPages"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing pages item.",
        "tags": [
          "Items",
          "ItemsPages"
        ],
        "operationId": "updateSingleItemsPages",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsPages"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPages"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing pages item.",
        "tags": [
          "Items",
          "ItemsPages"
        ],
        "operationId": "deleteSingleItemsPages",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/roles": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new roles item.",
        "tags": [
          "Items",
          "ItemsRoles"
        ],
        "operationId": "createItemsRoles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsRoles"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsRoles"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsRoles"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the roles items.",
        "tags": [
          "Items",
          "ItemsRoles"
        ],
        "operationId": "readItemsRoles",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsRoles"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple roles items at the same time.",
        "tags": [
          "Items",
          "ItemsRoles"
        ],
        "operationId": "updateItemsRoles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsRoles"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsRoles"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsRoles"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing roles items.",
        "tags": [
          "Items",
          "ItemsRoles"
        ],
        "operationId": "deleteItemsRoles",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/roles/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single roles item by unique identifier.",
        "tags": [
          "Items",
          "ItemsRoles"
        ],
        "operationId": "readSingleItemsRoles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsRoles"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing roles item.",
        "tags": [
          "Items",
          "ItemsRoles"
        ],
        "operationId": "updateSingleItemsRoles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsRoles"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsRoles"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing roles item.",
        "tags": [
          "Items",
          "ItemsRoles"
        ],
        "operationId": "deleteSingleItemsRoles",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/people": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new people item.",
        "tags": [
          "Items",
          "ItemsPeople"
        ],
        "operationId": "createItemsPeople",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPeople"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPeople"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPeople"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the people items.",
        "tags": [
          "Items",
          "ItemsPeople"
        ],
        "operationId": "readItemsPeople",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsPeople"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple people items at the same time.",
        "tags": [
          "Items",
          "ItemsPeople"
        ],
        "operationId": "updateItemsPeople",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPeople"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPeople"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPeople"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing people items.",
        "tags": [
          "Items",
          "ItemsPeople"
        ],
        "operationId": "deleteItemsPeople",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/people/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single people item by unique identifier.",
        "tags": [
          "Items",
          "ItemsPeople"
        ],
        "operationId": "readSingleItemsPeople",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPeople"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing people item.",
        "tags": [
          "Items",
          "ItemsPeople"
        ],
        "operationId": "updateSingleItemsPeople",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsPeople"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPeople"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing people item.",
        "tags": [
          "Items",
          "ItemsPeople"
        ],
        "operationId": "deleteSingleItemsPeople",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/shows": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new shows item.",
        "tags": [
          "Items",
          "ItemsShows"
        ],
        "operationId": "createItemsShows",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsShows"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsShows"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsShows"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the shows items.",
        "tags": [
          "Items",
          "ItemsShows"
        ],
        "operationId": "readItemsShows",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsShows"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple shows items at the same time.",
        "tags": [
          "Items",
          "ItemsShows"
        ],
        "operationId": "updateItemsShows",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsShows"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsShows"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsShows"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing shows items.",
        "tags": [
          "Items",
          "ItemsShows"
        ],
        "operationId": "deleteItemsShows",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/shows/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single shows item by unique identifier.",
        "tags": [
          "Items",
          "ItemsShows"
        ],
        "operationId": "readSingleItemsShows",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsShows"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing shows item.",
        "tags": [
          "Items",
          "ItemsShows"
        ],
        "operationId": "updateSingleItemsShows",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsShows"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsShows"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing shows item.",
        "tags": [
          "Items",
          "ItemsShows"
        ],
        "operationId": "deleteSingleItemsShows",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/programs": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new programs item.",
        "tags": [
          "Items",
          "ItemsPrograms"
        ],
        "operationId": "createItemsPrograms",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPrograms"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPrograms"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPrograms"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the programs items.",
        "tags": [
          "Items",
          "ItemsPrograms"
        ],
        "operationId": "readItemsPrograms",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsPrograms"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple programs items at the same time.",
        "tags": [
          "Items",
          "ItemsPrograms"
        ],
        "operationId": "updateItemsPrograms",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPrograms"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPrograms"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPrograms"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing programs items.",
        "tags": [
          "Items",
          "ItemsPrograms"
        ],
        "operationId": "deleteItemsPrograms",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/programs/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single programs item by unique identifier.",
        "tags": [
          "Items",
          "ItemsPrograms"
        ],
        "operationId": "readSingleItemsPrograms",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPrograms"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing programs item.",
        "tags": [
          "Items",
          "ItemsPrograms"
        ],
        "operationId": "updateSingleItemsPrograms",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsPrograms"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPrograms"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing programs item.",
        "tags": [
          "Items",
          "ItemsPrograms"
        ],
        "operationId": "deleteSingleItemsPrograms",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/productions": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new productions item.",
        "tags": [
          "Items",
          "ItemsProductions"
        ],
        "operationId": "createItemsProductions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsProductions"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsProductions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsProductions"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the productions items.",
        "tags": [
          "Items",
          "ItemsProductions"
        ],
        "operationId": "readItemsProductions",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsProductions"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple productions items at the same time.",
        "tags": [
          "Items",
          "ItemsProductions"
        ],
        "operationId": "updateItemsProductions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsProductions"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsProductions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsProductions"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing productions items.",
        "tags": [
          "Items",
          "ItemsProductions"
        ],
        "operationId": "deleteItemsProductions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/productions/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single productions item by unique identifier.",
        "tags": [
          "Items",
          "ItemsProductions"
        ],
        "operationId": "readSingleItemsProductions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsProductions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing productions item.",
        "tags": [
          "Items",
          "ItemsProductions"
        ],
        "operationId": "updateSingleItemsProductions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsProductions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsProductions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing productions item.",
        "tags": [
          "Items",
          "ItemsProductions"
        ],
        "operationId": "deleteSingleItemsProductions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/cities": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new cities item.",
        "tags": [
          "Items",
          "ItemsCities"
        ],
        "operationId": "createItemsCities",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCities"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCities"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsCities"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the cities items.",
        "tags": [
          "Items",
          "ItemsCities"
        ],
        "operationId": "readItemsCities",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsCities"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple cities items at the same time.",
        "tags": [
          "Items",
          "ItemsCities"
        ],
        "operationId": "updateItemsCities",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCities"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCities"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsCities"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing cities items.",
        "tags": [
          "Items",
          "ItemsCities"
        ],
        "operationId": "deleteItemsCities",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/cities/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single cities item by unique identifier.",
        "tags": [
          "Items",
          "ItemsCities"
        ],
        "operationId": "readSingleItemsCities",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCities"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing cities item.",
        "tags": [
          "Items",
          "ItemsCities"
        ],
        "operationId": "updateSingleItemsCities",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsCities"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCities"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing cities item.",
        "tags": [
          "Items",
          "ItemsCities"
        ],
        "operationId": "deleteSingleItemsCities",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/organizations": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new organizations item.",
        "tags": [
          "Items",
          "ItemsOrganizations"
        ],
        "operationId": "createItemsOrganizations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsOrganizations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsOrganizations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsOrganizations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the organizations items.",
        "tags": [
          "Items",
          "ItemsOrganizations"
        ],
        "operationId": "readItemsOrganizations",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsOrganizations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple organizations items at the same time.",
        "tags": [
          "Items",
          "ItemsOrganizations"
        ],
        "operationId": "updateItemsOrganizations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsOrganizations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsOrganizations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsOrganizations"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing organizations items.",
        "tags": [
          "Items",
          "ItemsOrganizations"
        ],
        "operationId": "deleteItemsOrganizations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/organizations/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single organizations item by unique identifier.",
        "tags": [
          "Items",
          "ItemsOrganizations"
        ],
        "operationId": "readSingleItemsOrganizations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsOrganizations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing organizations item.",
        "tags": [
          "Items",
          "ItemsOrganizations"
        ],
        "operationId": "updateSingleItemsOrganizations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsOrganizations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsOrganizations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing organizations item.",
        "tags": [
          "Items",
          "ItemsOrganizations"
        ],
        "operationId": "deleteSingleItemsOrganizations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/pronouns": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new pronouns item.",
        "tags": [
          "Items",
          "ItemsPronouns"
        ],
        "operationId": "createItemsPronouns",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPronouns"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPronouns"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPronouns"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the pronouns items.",
        "tags": [
          "Items",
          "ItemsPronouns"
        ],
        "operationId": "readItemsPronouns",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsPronouns"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple pronouns items at the same time.",
        "tags": [
          "Items",
          "ItemsPronouns"
        ],
        "operationId": "updateItemsPronouns",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPronouns"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPronouns"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPronouns"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing pronouns items.",
        "tags": [
          "Items",
          "ItemsPronouns"
        ],
        "operationId": "deleteItemsPronouns",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/pronouns/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single pronouns item by unique identifier.",
        "tags": [
          "Items",
          "ItemsPronouns"
        ],
        "operationId": "readSingleItemsPronouns",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPronouns"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing pronouns item.",
        "tags": [
          "Items",
          "ItemsPronouns"
        ],
        "operationId": "updateSingleItemsPronouns",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsPronouns"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPronouns"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing pronouns item.",
        "tags": [
          "Items",
          "ItemsPronouns"
        ],
        "operationId": "deleteSingleItemsPronouns",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/productions_organizations": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new productions_organizations item.",
        "tags": [
          "Items",
          "ItemsProductionsOrganizations"
        ],
        "operationId": "createItemsProductionsOrganizations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsProductionsOrganizations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsProductionsOrganizations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsProductionsOrganizations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the productions_organizations items.",
        "tags": [
          "Items",
          "ItemsProductionsOrganizations"
        ],
        "operationId": "readItemsProductionsOrganizations",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsProductionsOrganizations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple productions_organizations items at the same time.",
        "tags": [
          "Items",
          "ItemsProductionsOrganizations"
        ],
        "operationId": "updateItemsProductionsOrganizations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsProductionsOrganizations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsProductionsOrganizations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsProductionsOrganizations"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing productions_organizations items.",
        "tags": [
          "Items",
          "ItemsProductionsOrganizations"
        ],
        "operationId": "deleteItemsProductionsOrganizations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/productions_organizations/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single productions_organizations item by unique identifier.",
        "tags": [
          "Items",
          "ItemsProductionsOrganizations"
        ],
        "operationId": "readSingleItemsProductionsOrganizations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsProductionsOrganizations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing productions_organizations item.",
        "tags": [
          "Items",
          "ItemsProductionsOrganizations"
        ],
        "operationId": "updateSingleItemsProductionsOrganizations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsProductionsOrganizations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsProductionsOrganizations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing productions_organizations item.",
        "tags": [
          "Items",
          "ItemsProductionsOrganizations"
        ],
        "operationId": "deleteSingleItemsProductionsOrganizations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/shows_people": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new shows_people item.",
        "tags": [
          "Items",
          "ItemsShowsPeople"
        ],
        "operationId": "createItemsShowsPeople",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsShowsPeople"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsShowsPeople"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsShowsPeople"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the shows_people items.",
        "tags": [
          "Items",
          "ItemsShowsPeople"
        ],
        "operationId": "readItemsShowsPeople",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsShowsPeople"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple shows_people items at the same time.",
        "tags": [
          "Items",
          "ItemsShowsPeople"
        ],
        "operationId": "updateItemsShowsPeople",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsShowsPeople"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsShowsPeople"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsShowsPeople"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing shows_people items.",
        "tags": [
          "Items",
          "ItemsShowsPeople"
        ],
        "operationId": "deleteItemsShowsPeople",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/shows_people/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single shows_people item by unique identifier.",
        "tags": [
          "Items",
          "ItemsShowsPeople"
        ],
        "operationId": "readSingleItemsShowsPeople",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsShowsPeople"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing shows_people item.",
        "tags": [
          "Items",
          "ItemsShowsPeople"
        ],
        "operationId": "updateSingleItemsShowsPeople",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsShowsPeople"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsShowsPeople"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing shows_people item.",
        "tags": [
          "Items",
          "ItemsShowsPeople"
        ],
        "operationId": "deleteSingleItemsShowsPeople",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/productions_shows": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new productions_shows item.",
        "tags": [
          "Items",
          "ItemsProductionsShows"
        ],
        "operationId": "createItemsProductionsShows",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsProductionsShows"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsProductionsShows"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsProductionsShows"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the productions_shows items.",
        "tags": [
          "Items",
          "ItemsProductionsShows"
        ],
        "operationId": "readItemsProductionsShows",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsProductionsShows"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple productions_shows items at the same time.",
        "tags": [
          "Items",
          "ItemsProductionsShows"
        ],
        "operationId": "updateItemsProductionsShows",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsProductionsShows"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsProductionsShows"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsProductionsShows"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing productions_shows items.",
        "tags": [
          "Items",
          "ItemsProductionsShows"
        ],
        "operationId": "deleteItemsProductionsShows",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/productions_shows/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single productions_shows item by unique identifier.",
        "tags": [
          "Items",
          "ItemsProductionsShows"
        ],
        "operationId": "readSingleItemsProductionsShows",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsProductionsShows"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing productions_shows item.",
        "tags": [
          "Items",
          "ItemsProductionsShows"
        ],
        "operationId": "updateSingleItemsProductionsShows",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsProductionsShows"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsProductionsShows"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing productions_shows item.",
        "tags": [
          "Items",
          "ItemsProductionsShows"
        ],
        "operationId": "deleteSingleItemsProductionsShows",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/addresses": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new addresses item.",
        "tags": [
          "Items",
          "ItemsAddresses"
        ],
        "operationId": "createItemsAddresses",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsAddresses"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsAddresses"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsAddresses"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the addresses items.",
        "tags": [
          "Items",
          "ItemsAddresses"
        ],
        "operationId": "readItemsAddresses",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsAddresses"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple addresses items at the same time.",
        "tags": [
          "Items",
          "ItemsAddresses"
        ],
        "operationId": "updateItemsAddresses",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsAddresses"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsAddresses"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsAddresses"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing addresses items.",
        "tags": [
          "Items",
          "ItemsAddresses"
        ],
        "operationId": "deleteItemsAddresses",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/addresses/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single addresses item by unique identifier.",
        "tags": [
          "Items",
          "ItemsAddresses"
        ],
        "operationId": "readSingleItemsAddresses",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsAddresses"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing addresses item.",
        "tags": [
          "Items",
          "ItemsAddresses"
        ],
        "operationId": "updateSingleItemsAddresses",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsAddresses"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsAddresses"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing addresses item.",
        "tags": [
          "Items",
          "ItemsAddresses"
        ],
        "operationId": "deleteSingleItemsAddresses",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/songs": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new songs item.",
        "tags": [
          "Items",
          "ItemsSongs"
        ],
        "operationId": "createItemsSongs",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSongs"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSongs"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSongs"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the songs items.",
        "tags": [
          "Items",
          "ItemsSongs"
        ],
        "operationId": "readItemsSongs",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsSongs"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple songs items at the same time.",
        "tags": [
          "Items",
          "ItemsSongs"
        ],
        "operationId": "updateItemsSongs",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSongs"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSongs"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSongs"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing songs items.",
        "tags": [
          "Items",
          "ItemsSongs"
        ],
        "operationId": "deleteItemsSongs",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/songs/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single songs item by unique identifier.",
        "tags": [
          "Items",
          "ItemsSongs"
        ],
        "operationId": "readSingleItemsSongs",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSongs"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing songs item.",
        "tags": [
          "Items",
          "ItemsSongs"
        ],
        "operationId": "updateSingleItemsSongs",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsSongs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSongs"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing songs item.",
        "tags": [
          "Items",
          "ItemsSongs"
        ],
        "operationId": "deleteSingleItemsSongs",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/festivals": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new festivals item.",
        "tags": [
          "Items",
          "ItemsFestivals"
        ],
        "operationId": "createItemsFestivals",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFestivals"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFestivals"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsFestivals"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the festivals items.",
        "tags": [
          "Items",
          "ItemsFestivals"
        ],
        "operationId": "readItemsFestivals",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFestivals"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple festivals items at the same time.",
        "tags": [
          "Items",
          "ItemsFestivals"
        ],
        "operationId": "updateItemsFestivals",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFestivals"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFestivals"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsFestivals"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing festivals items.",
        "tags": [
          "Items",
          "ItemsFestivals"
        ],
        "operationId": "deleteItemsFestivals",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/festivals/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single festivals item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFestivals"
        ],
        "operationId": "readSingleItemsFestivals",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFestivals"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing festivals item.",
        "tags": [
          "Items",
          "ItemsFestivals"
        ],
        "operationId": "updateSingleItemsFestivals",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFestivals"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFestivals"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing festivals item.",
        "tags": [
          "Items",
          "ItemsFestivals"
        ],
        "operationId": "deleteSingleItemsFestivals",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/events": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new events item.",
        "tags": [
          "Items",
          "ItemsEvents"
        ],
        "operationId": "createItemsEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsEvents"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsEvents"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsEvents"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the events items.",
        "tags": [
          "Items",
          "ItemsEvents"
        ],
        "operationId": "readItemsEvents",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsEvents"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple events items at the same time.",
        "tags": [
          "Items",
          "ItemsEvents"
        ],
        "operationId": "updateItemsEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsEvents"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsEvents"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsEvents"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing events items.",
        "tags": [
          "Items",
          "ItemsEvents"
        ],
        "operationId": "deleteItemsEvents",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/events/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single events item by unique identifier.",
        "tags": [
          "Items",
          "ItemsEvents"
        ],
        "operationId": "readSingleItemsEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsEvents"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing events item.",
        "tags": [
          "Items",
          "ItemsEvents"
        ],
        "operationId": "updateSingleItemsEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsEvents"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsEvents"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing events item.",
        "tags": [
          "Items",
          "ItemsEvents"
        ],
        "operationId": "deleteSingleItemsEvents",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/festivals_productions": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new festivals_productions item.",
        "tags": [
          "Items",
          "ItemsFestivalsProductions"
        ],
        "operationId": "createItemsFestivalsProductions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFestivalsProductions"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFestivalsProductions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsFestivalsProductions"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the festivals_productions items.",
        "tags": [
          "Items",
          "ItemsFestivalsProductions"
        ],
        "operationId": "readItemsFestivalsProductions",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFestivalsProductions"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple festivals_productions items at the same time.",
        "tags": [
          "Items",
          "ItemsFestivalsProductions"
        ],
        "operationId": "updateItemsFestivalsProductions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFestivalsProductions"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFestivalsProductions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsFestivalsProductions"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing festivals_productions items.",
        "tags": [
          "Items",
          "ItemsFestivalsProductions"
        ],
        "operationId": "deleteItemsFestivalsProductions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/festivals_productions/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single festivals_productions item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFestivalsProductions"
        ],
        "operationId": "readSingleItemsFestivalsProductions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFestivalsProductions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing festivals_productions item.",
        "tags": [
          "Items",
          "ItemsFestivalsProductions"
        ],
        "operationId": "updateSingleItemsFestivalsProductions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFestivalsProductions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFestivalsProductions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing festivals_productions item.",
        "tags": [
          "Items",
          "ItemsFestivalsProductions"
        ],
        "operationId": "deleteSingleItemsFestivalsProductions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/festivals_organizations": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new festivals_organizations item.",
        "tags": [
          "Items",
          "ItemsFestivalsOrganizations"
        ],
        "operationId": "createItemsFestivalsOrganizations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFestivalsOrganizations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFestivalsOrganizations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsFestivalsOrganizations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the festivals_organizations items.",
        "tags": [
          "Items",
          "ItemsFestivalsOrganizations"
        ],
        "operationId": "readItemsFestivalsOrganizations",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFestivalsOrganizations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple festivals_organizations items at the same time.",
        "tags": [
          "Items",
          "ItemsFestivalsOrganizations"
        ],
        "operationId": "updateItemsFestivalsOrganizations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFestivalsOrganizations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFestivalsOrganizations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsFestivalsOrganizations"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing festivals_organizations items.",
        "tags": [
          "Items",
          "ItemsFestivalsOrganizations"
        ],
        "operationId": "deleteItemsFestivalsOrganizations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/festivals_organizations/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single festivals_organizations item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFestivalsOrganizations"
        ],
        "operationId": "readSingleItemsFestivalsOrganizations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFestivalsOrganizations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing festivals_organizations item.",
        "tags": [
          "Items",
          "ItemsFestivalsOrganizations"
        ],
        "operationId": "updateSingleItemsFestivalsOrganizations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFestivalsOrganizations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFestivalsOrganizations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing festivals_organizations item.",
        "tags": [
          "Items",
          "ItemsFestivalsOrganizations"
        ],
        "operationId": "deleteSingleItemsFestivalsOrganizations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/songs_people": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new songs_people item.",
        "tags": [
          "Items",
          "ItemsSongsPeople"
        ],
        "operationId": "createItemsSongsPeople",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSongsPeople"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSongsPeople"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSongsPeople"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the songs_people items.",
        "tags": [
          "Items",
          "ItemsSongsPeople"
        ],
        "operationId": "readItemsSongsPeople",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsSongsPeople"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple songs_people items at the same time.",
        "tags": [
          "Items",
          "ItemsSongsPeople"
        ],
        "operationId": "updateItemsSongsPeople",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSongsPeople"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSongsPeople"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSongsPeople"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing songs_people items.",
        "tags": [
          "Items",
          "ItemsSongsPeople"
        ],
        "operationId": "deleteItemsSongsPeople",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/songs_people/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single songs_people item by unique identifier.",
        "tags": [
          "Items",
          "ItemsSongsPeople"
        ],
        "operationId": "readSingleItemsSongsPeople",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSongsPeople"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing songs_people item.",
        "tags": [
          "Items",
          "ItemsSongsPeople"
        ],
        "operationId": "updateSingleItemsSongsPeople",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsSongsPeople"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSongsPeople"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing songs_people item.",
        "tags": [
          "Items",
          "ItemsSongsPeople"
        ],
        "operationId": "deleteSingleItemsSongsPeople",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/shows_songs": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new shows_songs item.",
        "tags": [
          "Items",
          "ItemsShowsSongs"
        ],
        "operationId": "createItemsShowsSongs",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsShowsSongs"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsShowsSongs"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsShowsSongs"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the shows_songs items.",
        "tags": [
          "Items",
          "ItemsShowsSongs"
        ],
        "operationId": "readItemsShowsSongs",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsShowsSongs"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple shows_songs items at the same time.",
        "tags": [
          "Items",
          "ItemsShowsSongs"
        ],
        "operationId": "updateItemsShowsSongs",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsShowsSongs"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsShowsSongs"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsShowsSongs"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing shows_songs items.",
        "tags": [
          "Items",
          "ItemsShowsSongs"
        ],
        "operationId": "deleteItemsShowsSongs",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/shows_songs/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single shows_songs item by unique identifier.",
        "tags": [
          "Items",
          "ItemsShowsSongs"
        ],
        "operationId": "readSingleItemsShowsSongs",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsShowsSongs"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing shows_songs item.",
        "tags": [
          "Items",
          "ItemsShowsSongs"
        ],
        "operationId": "updateSingleItemsShowsSongs",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsShowsSongs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsShowsSongs"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing shows_songs item.",
        "tags": [
          "Items",
          "ItemsShowsSongs"
        ],
        "operationId": "deleteSingleItemsShowsSongs",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/festivals_programs": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new festivals_programs item.",
        "tags": [
          "Items",
          "ItemsFestivalsPrograms"
        ],
        "operationId": "createItemsFestivalsPrograms",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFestivalsPrograms"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFestivalsPrograms"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsFestivalsPrograms"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the festivals_programs items.",
        "tags": [
          "Items",
          "ItemsFestivalsPrograms"
        ],
        "operationId": "readItemsFestivalsPrograms",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFestivalsPrograms"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple festivals_programs items at the same time.",
        "tags": [
          "Items",
          "ItemsFestivalsPrograms"
        ],
        "operationId": "updateItemsFestivalsPrograms",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFestivalsPrograms"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFestivalsPrograms"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsFestivalsPrograms"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing festivals_programs items.",
        "tags": [
          "Items",
          "ItemsFestivalsPrograms"
        ],
        "operationId": "deleteItemsFestivalsPrograms",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/festivals_programs/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single festivals_programs item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFestivalsPrograms"
        ],
        "operationId": "readSingleItemsFestivalsPrograms",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFestivalsPrograms"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing festivals_programs item.",
        "tags": [
          "Items",
          "ItemsFestivalsPrograms"
        ],
        "operationId": "updateSingleItemsFestivalsPrograms",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFestivalsPrograms"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFestivalsPrograms"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing festivals_programs item.",
        "tags": [
          "Items",
          "ItemsFestivalsPrograms"
        ],
        "operationId": "deleteSingleItemsFestivalsPrograms",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/programs_songs": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new programs_songs item.",
        "tags": [
          "Items",
          "ItemsProgramsSongs"
        ],
        "operationId": "createItemsProgramsSongs",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsProgramsSongs"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsProgramsSongs"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsProgramsSongs"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the programs_songs items.",
        "tags": [
          "Items",
          "ItemsProgramsSongs"
        ],
        "operationId": "readItemsProgramsSongs",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsProgramsSongs"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple programs_songs items at the same time.",
        "tags": [
          "Items",
          "ItemsProgramsSongs"
        ],
        "operationId": "updateItemsProgramsSongs",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsProgramsSongs"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsProgramsSongs"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsProgramsSongs"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing programs_songs items.",
        "tags": [
          "Items",
          "ItemsProgramsSongs"
        ],
        "operationId": "deleteItemsProgramsSongs",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/programs_songs/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single programs_songs item by unique identifier.",
        "tags": [
          "Items",
          "ItemsProgramsSongs"
        ],
        "operationId": "readSingleItemsProgramsSongs",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsProgramsSongs"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing programs_songs item.",
        "tags": [
          "Items",
          "ItemsProgramsSongs"
        ],
        "operationId": "updateSingleItemsProgramsSongs",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsProgramsSongs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsProgramsSongs"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing programs_songs item.",
        "tags": [
          "Items",
          "ItemsProgramsSongs"
        ],
        "operationId": "deleteSingleItemsProgramsSongs",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/venues": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new venues item.",
        "tags": [
          "Items",
          "ItemsVenues"
        ],
        "operationId": "createItemsVenues",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsVenues"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsVenues"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsVenues"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the venues items.",
        "tags": [
          "Items",
          "ItemsVenues"
        ],
        "operationId": "readItemsVenues",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsVenues"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple venues items at the same time.",
        "tags": [
          "Items",
          "ItemsVenues"
        ],
        "operationId": "updateItemsVenues",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsVenues"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsVenues"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsVenues"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing venues items.",
        "tags": [
          "Items",
          "ItemsVenues"
        ],
        "operationId": "deleteItemsVenues",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/venues/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single venues item by unique identifier.",
        "tags": [
          "Items",
          "ItemsVenues"
        ],
        "operationId": "readSingleItemsVenues",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsVenues"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing venues item.",
        "tags": [
          "Items",
          "ItemsVenues"
        ],
        "operationId": "updateSingleItemsVenues",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsVenues"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsVenues"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing venues item.",
        "tags": [
          "Items",
          "ItemsVenues"
        ],
        "operationId": "deleteSingleItemsVenues",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/events_venues": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new events_venues item.",
        "tags": [
          "Items",
          "ItemsEventsVenues"
        ],
        "operationId": "createItemsEventsVenues",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsEventsVenues"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsEventsVenues"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsEventsVenues"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the events_venues items.",
        "tags": [
          "Items",
          "ItemsEventsVenues"
        ],
        "operationId": "readItemsEventsVenues",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsEventsVenues"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple events_venues items at the same time.",
        "tags": [
          "Items",
          "ItemsEventsVenues"
        ],
        "operationId": "updateItemsEventsVenues",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsEventsVenues"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsEventsVenues"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsEventsVenues"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing events_venues items.",
        "tags": [
          "Items",
          "ItemsEventsVenues"
        ],
        "operationId": "deleteItemsEventsVenues",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/events_venues/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single events_venues item by unique identifier.",
        "tags": [
          "Items",
          "ItemsEventsVenues"
        ],
        "operationId": "readSingleItemsEventsVenues",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsEventsVenues"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing events_venues item.",
        "tags": [
          "Items",
          "ItemsEventsVenues"
        ],
        "operationId": "updateSingleItemsEventsVenues",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsEventsVenues"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsEventsVenues"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing events_venues item.",
        "tags": [
          "Items",
          "ItemsEventsVenues"
        ],
        "operationId": "deleteSingleItemsEventsVenues",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/productions_people": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new productions_people item.",
        "tags": [
          "Items",
          "ItemsProductionsPeople"
        ],
        "operationId": "createItemsProductionsPeople",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsProductionsPeople"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsProductionsPeople"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsProductionsPeople"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the productions_people items.",
        "tags": [
          "Items",
          "ItemsProductionsPeople"
        ],
        "operationId": "readItemsProductionsPeople",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsProductionsPeople"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple productions_people items at the same time.",
        "tags": [
          "Items",
          "ItemsProductionsPeople"
        ],
        "operationId": "updateItemsProductionsPeople",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsProductionsPeople"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsProductionsPeople"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsProductionsPeople"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing productions_people items.",
        "tags": [
          "Items",
          "ItemsProductionsPeople"
        ],
        "operationId": "deleteItemsProductionsPeople",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/productions_people/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single productions_people item by unique identifier.",
        "tags": [
          "Items",
          "ItemsProductionsPeople"
        ],
        "operationId": "readSingleItemsProductionsPeople",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsProductionsPeople"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing productions_people item.",
        "tags": [
          "Items",
          "ItemsProductionsPeople"
        ],
        "operationId": "updateSingleItemsProductionsPeople",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsProductionsPeople"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsProductionsPeople"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing productions_people item.",
        "tags": [
          "Items",
          "ItemsProductionsPeople"
        ],
        "operationId": "deleteSingleItemsProductionsPeople",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/programs_events": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new programs_events item.",
        "tags": [
          "Items",
          "ItemsProgramsEvents"
        ],
        "operationId": "createItemsProgramsEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsProgramsEvents"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsProgramsEvents"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsProgramsEvents"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the programs_events items.",
        "tags": [
          "Items",
          "ItemsProgramsEvents"
        ],
        "operationId": "readItemsProgramsEvents",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsProgramsEvents"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple programs_events items at the same time.",
        "tags": [
          "Items",
          "ItemsProgramsEvents"
        ],
        "operationId": "updateItemsProgramsEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsProgramsEvents"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsProgramsEvents"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsProgramsEvents"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing programs_events items.",
        "tags": [
          "Items",
          "ItemsProgramsEvents"
        ],
        "operationId": "deleteItemsProgramsEvents",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/programs_events/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single programs_events item by unique identifier.",
        "tags": [
          "Items",
          "ItemsProgramsEvents"
        ],
        "operationId": "readSingleItemsProgramsEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsProgramsEvents"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing programs_events item.",
        "tags": [
          "Items",
          "ItemsProgramsEvents"
        ],
        "operationId": "updateSingleItemsProgramsEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsProgramsEvents"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsProgramsEvents"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing programs_events item.",
        "tags": [
          "Items",
          "ItemsProgramsEvents"
        ],
        "operationId": "deleteSingleItemsProgramsEvents",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/programs_people": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new programs_people item.",
        "tags": [
          "Items",
          "ItemsProgramsPeople"
        ],
        "operationId": "createItemsProgramsPeople",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsProgramsPeople"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsProgramsPeople"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsProgramsPeople"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the programs_people items.",
        "tags": [
          "Items",
          "ItemsProgramsPeople"
        ],
        "operationId": "readItemsProgramsPeople",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsProgramsPeople"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple programs_people items at the same time.",
        "tags": [
          "Items",
          "ItemsProgramsPeople"
        ],
        "operationId": "updateItemsProgramsPeople",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsProgramsPeople"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsProgramsPeople"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsProgramsPeople"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing programs_people items.",
        "tags": [
          "Items",
          "ItemsProgramsPeople"
        ],
        "operationId": "deleteItemsProgramsPeople",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/programs_people/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single programs_people item by unique identifier.",
        "tags": [
          "Items",
          "ItemsProgramsPeople"
        ],
        "operationId": "readSingleItemsProgramsPeople",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsProgramsPeople"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing programs_people item.",
        "tags": [
          "Items",
          "ItemsProgramsPeople"
        ],
        "operationId": "updateSingleItemsProgramsPeople",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsProgramsPeople"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsProgramsPeople"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing programs_people item.",
        "tags": [
          "Items",
          "ItemsProgramsPeople"
        ],
        "operationId": "deleteSingleItemsProgramsPeople",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/tags": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new tags item.",
        "tags": [
          "Items",
          "ItemsTags"
        ],
        "operationId": "createItemsTags",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsTags"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsTags"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsTags"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the tags items.",
        "tags": [
          "Items",
          "ItemsTags"
        ],
        "operationId": "readItemsTags",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsTags"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple tags items at the same time.",
        "tags": [
          "Items",
          "ItemsTags"
        ],
        "operationId": "updateItemsTags",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsTags"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsTags"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsTags"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing tags items.",
        "tags": [
          "Items",
          "ItemsTags"
        ],
        "operationId": "deleteItemsTags",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/tags/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single tags item by unique identifier.",
        "tags": [
          "Items",
          "ItemsTags"
        ],
        "operationId": "readSingleItemsTags",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsTags"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing tags item.",
        "tags": [
          "Items",
          "ItemsTags"
        ],
        "operationId": "updateSingleItemsTags",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsTags"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsTags"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing tags item.",
        "tags": [
          "Items",
          "ItemsTags"
        ],
        "operationId": "deleteSingleItemsTags",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/programs_sections": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new programs_sections item.",
        "tags": [
          "Items",
          "ItemsProgramsSections"
        ],
        "operationId": "createItemsProgramsSections",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsProgramsSections"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsProgramsSections"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsProgramsSections"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the programs_sections items.",
        "tags": [
          "Items",
          "ItemsProgramsSections"
        ],
        "operationId": "readItemsProgramsSections",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsProgramsSections"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple programs_sections items at the same time.",
        "tags": [
          "Items",
          "ItemsProgramsSections"
        ],
        "operationId": "updateItemsProgramsSections",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsProgramsSections"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsProgramsSections"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsProgramsSections"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing programs_sections items.",
        "tags": [
          "Items",
          "ItemsProgramsSections"
        ],
        "operationId": "deleteItemsProgramsSections",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/programs_sections/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single programs_sections item by unique identifier.",
        "tags": [
          "Items",
          "ItemsProgramsSections"
        ],
        "operationId": "readSingleItemsProgramsSections",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsProgramsSections"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing programs_sections item.",
        "tags": [
          "Items",
          "ItemsProgramsSections"
        ],
        "operationId": "updateSingleItemsProgramsSections",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsProgramsSections"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsProgramsSections"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing programs_sections item.",
        "tags": [
          "Items",
          "ItemsProgramsSections"
        ],
        "operationId": "deleteSingleItemsProgramsSections",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/organizations_tags": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new organizations_tags item.",
        "tags": [
          "Items",
          "ItemsOrganizationsTags"
        ],
        "operationId": "createItemsOrganizationsTags",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsOrganizationsTags"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsOrganizationsTags"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsOrganizationsTags"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the organizations_tags items.",
        "tags": [
          "Items",
          "ItemsOrganizationsTags"
        ],
        "operationId": "readItemsOrganizationsTags",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsOrganizationsTags"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple organizations_tags items at the same time.",
        "tags": [
          "Items",
          "ItemsOrganizationsTags"
        ],
        "operationId": "updateItemsOrganizationsTags",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsOrganizationsTags"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsOrganizationsTags"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsOrganizationsTags"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing organizations_tags items.",
        "tags": [
          "Items",
          "ItemsOrganizationsTags"
        ],
        "operationId": "deleteItemsOrganizationsTags",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/organizations_tags/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single organizations_tags item by unique identifier.",
        "tags": [
          "Items",
          "ItemsOrganizationsTags"
        ],
        "operationId": "readSingleItemsOrganizationsTags",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsOrganizationsTags"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing organizations_tags item.",
        "tags": [
          "Items",
          "ItemsOrganizationsTags"
        ],
        "operationId": "updateSingleItemsOrganizationsTags",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsOrganizationsTags"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsOrganizationsTags"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing organizations_tags item.",
        "tags": [
          "Items",
          "ItemsOrganizationsTags"
        ],
        "operationId": "deleteSingleItemsOrganizationsTags",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/section_notes": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new section_notes item.",
        "tags": [
          "Items",
          "ItemsSectionNotes"
        ],
        "operationId": "createItemsSectionNotes",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSectionNotes"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSectionNotes"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSectionNotes"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the section_notes items.",
        "tags": [
          "Items",
          "ItemsSectionNotes"
        ],
        "operationId": "readItemsSectionNotes",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsSectionNotes"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple section_notes items at the same time.",
        "tags": [
          "Items",
          "ItemsSectionNotes"
        ],
        "operationId": "updateItemsSectionNotes",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSectionNotes"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSectionNotes"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSectionNotes"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing section_notes items.",
        "tags": [
          "Items",
          "ItemsSectionNotes"
        ],
        "operationId": "deleteItemsSectionNotes",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/section_notes/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single section_notes item by unique identifier.",
        "tags": [
          "Items",
          "ItemsSectionNotes"
        ],
        "operationId": "readSingleItemsSectionNotes",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSectionNotes"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing section_notes item.",
        "tags": [
          "Items",
          "ItemsSectionNotes"
        ],
        "operationId": "updateSingleItemsSectionNotes",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsSectionNotes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSectionNotes"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing section_notes item.",
        "tags": [
          "Items",
          "ItemsSectionNotes"
        ],
        "operationId": "deleteSingleItemsSectionNotes",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/section_cover": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new section_cover item.",
        "tags": [
          "Items",
          "ItemsSectionCover"
        ],
        "operationId": "createItemsSectionCover",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSectionCover"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSectionCover"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSectionCover"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the section_cover items.",
        "tags": [
          "Items",
          "ItemsSectionCover"
        ],
        "operationId": "readItemsSectionCover",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsSectionCover"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple section_cover items at the same time.",
        "tags": [
          "Items",
          "ItemsSectionCover"
        ],
        "operationId": "updateItemsSectionCover",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSectionCover"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSectionCover"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSectionCover"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing section_cover items.",
        "tags": [
          "Items",
          "ItemsSectionCover"
        ],
        "operationId": "deleteItemsSectionCover",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/section_cover/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single section_cover item by unique identifier.",
        "tags": [
          "Items",
          "ItemsSectionCover"
        ],
        "operationId": "readSingleItemsSectionCover",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSectionCover"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing section_cover item.",
        "tags": [
          "Items",
          "ItemsSectionCover"
        ],
        "operationId": "updateSingleItemsSectionCover",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsSectionCover"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSectionCover"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing section_cover item.",
        "tags": [
          "Items",
          "ItemsSectionCover"
        ],
        "operationId": "deleteSingleItemsSectionCover",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/programs_sponsors": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new programs_sponsors item.",
        "tags": [
          "Items",
          "ItemsProgramsSponsors"
        ],
        "operationId": "createItemsProgramsSponsors",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsProgramsSponsors"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsProgramsSponsors"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsProgramsSponsors"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the programs_sponsors items.",
        "tags": [
          "Items",
          "ItemsProgramsSponsors"
        ],
        "operationId": "readItemsProgramsSponsors",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsProgramsSponsors"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple programs_sponsors items at the same time.",
        "tags": [
          "Items",
          "ItemsProgramsSponsors"
        ],
        "operationId": "updateItemsProgramsSponsors",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsProgramsSponsors"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsProgramsSponsors"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsProgramsSponsors"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing programs_sponsors items.",
        "tags": [
          "Items",
          "ItemsProgramsSponsors"
        ],
        "operationId": "deleteItemsProgramsSponsors",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/programs_sponsors/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single programs_sponsors item by unique identifier.",
        "tags": [
          "Items",
          "ItemsProgramsSponsors"
        ],
        "operationId": "readSingleItemsProgramsSponsors",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsProgramsSponsors"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing programs_sponsors item.",
        "tags": [
          "Items",
          "ItemsProgramsSponsors"
        ],
        "operationId": "updateSingleItemsProgramsSponsors",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsProgramsSponsors"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsProgramsSponsors"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing programs_sponsors item.",
        "tags": [
          "Items",
          "ItemsProgramsSponsors"
        ],
        "operationId": "deleteSingleItemsProgramsSponsors",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/section_bios": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new section_bios item.",
        "tags": [
          "Items",
          "ItemsSectionBIOS"
        ],
        "operationId": "createItemsSectionBIOS",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSectionBIOS"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSectionBIOS"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSectionBIOS"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the section_bios items.",
        "tags": [
          "Items",
          "ItemsSectionBIOS"
        ],
        "operationId": "readItemsSectionBIOS",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsSectionBIOS"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple section_bios items at the same time.",
        "tags": [
          "Items",
          "ItemsSectionBIOS"
        ],
        "operationId": "updateItemsSectionBIOS",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSectionBIOS"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSectionBIOS"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSectionBIOS"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing section_bios items.",
        "tags": [
          "Items",
          "ItemsSectionBIOS"
        ],
        "operationId": "deleteItemsSectionBIOS",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/section_bios/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single section_bios item by unique identifier.",
        "tags": [
          "Items",
          "ItemsSectionBIOS"
        ],
        "operationId": "readSingleItemsSectionBIOS",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSectionBIOS"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing section_bios item.",
        "tags": [
          "Items",
          "ItemsSectionBIOS"
        ],
        "operationId": "updateSingleItemsSectionBIOS",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsSectionBIOS"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSectionBIOS"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing section_bios item.",
        "tags": [
          "Items",
          "ItemsSectionBIOS"
        ],
        "operationId": "deleteSingleItemsSectionBIOS",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/section_photos": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new section_photos item.",
        "tags": [
          "Items",
          "ItemsSectionPhotos"
        ],
        "operationId": "createItemsSectionPhotos",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSectionPhotos"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSectionPhotos"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSectionPhotos"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the section_photos items.",
        "tags": [
          "Items",
          "ItemsSectionPhotos"
        ],
        "operationId": "readItemsSectionPhotos",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsSectionPhotos"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple section_photos items at the same time.",
        "tags": [
          "Items",
          "ItemsSectionPhotos"
        ],
        "operationId": "updateItemsSectionPhotos",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSectionPhotos"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSectionPhotos"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSectionPhotos"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing section_photos items.",
        "tags": [
          "Items",
          "ItemsSectionPhotos"
        ],
        "operationId": "deleteItemsSectionPhotos",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/section_photos/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single section_photos item by unique identifier.",
        "tags": [
          "Items",
          "ItemsSectionPhotos"
        ],
        "operationId": "readSingleItemsSectionPhotos",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSectionPhotos"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing section_photos item.",
        "tags": [
          "Items",
          "ItemsSectionPhotos"
        ],
        "operationId": "updateSingleItemsSectionPhotos",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsSectionPhotos"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSectionPhotos"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing section_photos item.",
        "tags": [
          "Items",
          "ItemsSectionPhotos"
        ],
        "operationId": "deleteSingleItemsSectionPhotos",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/block_ad": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new block_ad item.",
        "tags": [
          "Items",
          "ItemsBlockAd"
        ],
        "operationId": "createItemsBlockAd",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBlockAd"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBlockAd"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBlockAd"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the block_ad items.",
        "tags": [
          "Items",
          "ItemsBlockAd"
        ],
        "operationId": "readItemsBlockAd",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsBlockAd"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple block_ad items at the same time.",
        "tags": [
          "Items",
          "ItemsBlockAd"
        ],
        "operationId": "updateItemsBlockAd",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBlockAd"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBlockAd"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBlockAd"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing block_ad items.",
        "tags": [
          "Items",
          "ItemsBlockAd"
        ],
        "operationId": "deleteItemsBlockAd",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/block_ad/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single block_ad item by unique identifier.",
        "tags": [
          "Items",
          "ItemsBlockAd"
        ],
        "operationId": "readSingleItemsBlockAd",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBlockAd"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing block_ad item.",
        "tags": [
          "Items",
          "ItemsBlockAd"
        ],
        "operationId": "updateSingleItemsBlockAd",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsBlockAd"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBlockAd"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing block_ad item.",
        "tags": [
          "Items",
          "ItemsBlockAd"
        ],
        "operationId": "deleteSingleItemsBlockAd",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/section_sponsors": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new section_sponsors item.",
        "tags": [
          "Items",
          "ItemsSectionSponsors"
        ],
        "operationId": "createItemsSectionSponsors",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSectionSponsors"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSectionSponsors"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSectionSponsors"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the section_sponsors items.",
        "tags": [
          "Items",
          "ItemsSectionSponsors"
        ],
        "operationId": "readItemsSectionSponsors",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsSectionSponsors"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple section_sponsors items at the same time.",
        "tags": [
          "Items",
          "ItemsSectionSponsors"
        ],
        "operationId": "updateItemsSectionSponsors",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSectionSponsors"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSectionSponsors"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSectionSponsors"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing section_sponsors items.",
        "tags": [
          "Items",
          "ItemsSectionSponsors"
        ],
        "operationId": "deleteItemsSectionSponsors",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/section_sponsors/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single section_sponsors item by unique identifier.",
        "tags": [
          "Items",
          "ItemsSectionSponsors"
        ],
        "operationId": "readSingleItemsSectionSponsors",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSectionSponsors"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing section_sponsors item.",
        "tags": [
          "Items",
          "ItemsSectionSponsors"
        ],
        "operationId": "updateSingleItemsSectionSponsors",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsSectionSponsors"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSectionSponsors"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing section_sponsors item.",
        "tags": [
          "Items",
          "ItemsSectionSponsors"
        ],
        "operationId": "deleteSingleItemsSectionSponsors",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/block_ad_blocks": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new block_ad_blocks item.",
        "tags": [
          "Items",
          "ItemsBlockAdBlocks"
        ],
        "operationId": "createItemsBlockAdBlocks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBlockAdBlocks"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBlockAdBlocks"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBlockAdBlocks"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the block_ad_blocks items.",
        "tags": [
          "Items",
          "ItemsBlockAdBlocks"
        ],
        "operationId": "readItemsBlockAdBlocks",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsBlockAdBlocks"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple block_ad_blocks items at the same time.",
        "tags": [
          "Items",
          "ItemsBlockAdBlocks"
        ],
        "operationId": "updateItemsBlockAdBlocks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBlockAdBlocks"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBlockAdBlocks"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBlockAdBlocks"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing block_ad_blocks items.",
        "tags": [
          "Items",
          "ItemsBlockAdBlocks"
        ],
        "operationId": "deleteItemsBlockAdBlocks",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/block_ad_blocks/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single block_ad_blocks item by unique identifier.",
        "tags": [
          "Items",
          "ItemsBlockAdBlocks"
        ],
        "operationId": "readSingleItemsBlockAdBlocks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBlockAdBlocks"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing block_ad_blocks item.",
        "tags": [
          "Items",
          "ItemsBlockAdBlocks"
        ],
        "operationId": "updateSingleItemsBlockAdBlocks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsBlockAdBlocks"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBlockAdBlocks"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing block_ad_blocks item.",
        "tags": [
          "Items",
          "ItemsBlockAdBlocks"
        ],
        "operationId": "deleteSingleItemsBlockAdBlocks",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/section_staff": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new section_staff item.",
        "tags": [
          "Items",
          "ItemsSectionStaff"
        ],
        "operationId": "createItemsSectionStaff",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSectionStaff"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSectionStaff"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSectionStaff"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the section_staff items.",
        "tags": [
          "Items",
          "ItemsSectionStaff"
        ],
        "operationId": "readItemsSectionStaff",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsSectionStaff"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple section_staff items at the same time.",
        "tags": [
          "Items",
          "ItemsSectionStaff"
        ],
        "operationId": "updateItemsSectionStaff",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSectionStaff"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSectionStaff"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSectionStaff"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing section_staff items.",
        "tags": [
          "Items",
          "ItemsSectionStaff"
        ],
        "operationId": "deleteItemsSectionStaff",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/section_staff/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single section_staff item by unique identifier.",
        "tags": [
          "Items",
          "ItemsSectionStaff"
        ],
        "operationId": "readSingleItemsSectionStaff",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSectionStaff"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing section_staff item.",
        "tags": [
          "Items",
          "ItemsSectionStaff"
        ],
        "operationId": "updateSingleItemsSectionStaff",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsSectionStaff"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSectionStaff"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing section_staff item.",
        "tags": [
          "Items",
          "ItemsSectionStaff"
        ],
        "operationId": "deleteSingleItemsSectionStaff",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/section_songs": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new section_songs item.",
        "tags": [
          "Items",
          "ItemsSectionSongs"
        ],
        "operationId": "createItemsSectionSongs",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSectionSongs"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSectionSongs"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSectionSongs"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the section_songs items.",
        "tags": [
          "Items",
          "ItemsSectionSongs"
        ],
        "operationId": "readItemsSectionSongs",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsSectionSongs"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple section_songs items at the same time.",
        "tags": [
          "Items",
          "ItemsSectionSongs"
        ],
        "operationId": "updateItemsSectionSongs",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSectionSongs"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSectionSongs"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSectionSongs"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing section_songs items.",
        "tags": [
          "Items",
          "ItemsSectionSongs"
        ],
        "operationId": "deleteItemsSectionSongs",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/section_songs/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single section_songs item by unique identifier.",
        "tags": [
          "Items",
          "ItemsSectionSongs"
        ],
        "operationId": "readSingleItemsSectionSongs",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSectionSongs"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing section_songs item.",
        "tags": [
          "Items",
          "ItemsSectionSongs"
        ],
        "operationId": "updateSingleItemsSectionSongs",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsSectionSongs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSectionSongs"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing section_songs item.",
        "tags": [
          "Items",
          "ItemsSectionSongs"
        ],
        "operationId": "deleteSingleItemsSectionSongs",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/section_notes_blocks": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new section_notes_blocks item.",
        "tags": [
          "Items",
          "ItemsSectionNotesBlocks"
        ],
        "operationId": "createItemsSectionNotesBlocks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSectionNotesBlocks"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSectionNotesBlocks"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSectionNotesBlocks"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the section_notes_blocks items.",
        "tags": [
          "Items",
          "ItemsSectionNotesBlocks"
        ],
        "operationId": "readItemsSectionNotesBlocks",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsSectionNotesBlocks"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple section_notes_blocks items at the same time.",
        "tags": [
          "Items",
          "ItemsSectionNotesBlocks"
        ],
        "operationId": "updateItemsSectionNotesBlocks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSectionNotesBlocks"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSectionNotesBlocks"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSectionNotesBlocks"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing section_notes_blocks items.",
        "tags": [
          "Items",
          "ItemsSectionNotesBlocks"
        ],
        "operationId": "deleteItemsSectionNotesBlocks",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/section_notes_blocks/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single section_notes_blocks item by unique identifier.",
        "tags": [
          "Items",
          "ItemsSectionNotesBlocks"
        ],
        "operationId": "readSingleItemsSectionNotesBlocks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSectionNotesBlocks"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing section_notes_blocks item.",
        "tags": [
          "Items",
          "ItemsSectionNotesBlocks"
        ],
        "operationId": "updateSingleItemsSectionNotesBlocks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsSectionNotesBlocks"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSectionNotesBlocks"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing section_notes_blocks item.",
        "tags": [
          "Items",
          "ItemsSectionNotesBlocks"
        ],
        "operationId": "deleteSingleItemsSectionNotesBlocks",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/section_credits": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new section_credits item.",
        "tags": [
          "Items",
          "ItemsSectionCredits"
        ],
        "operationId": "createItemsSectionCredits",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSectionCredits"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSectionCredits"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSectionCredits"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the section_credits items.",
        "tags": [
          "Items",
          "ItemsSectionCredits"
        ],
        "operationId": "readItemsSectionCredits",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsSectionCredits"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple section_credits items at the same time.",
        "tags": [
          "Items",
          "ItemsSectionCredits"
        ],
        "operationId": "updateItemsSectionCredits",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSectionCredits"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSectionCredits"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSectionCredits"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing section_credits items.",
        "tags": [
          "Items",
          "ItemsSectionCredits"
        ],
        "operationId": "deleteItemsSectionCredits",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/section_credits/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single section_credits item by unique identifier.",
        "tags": [
          "Items",
          "ItemsSectionCredits"
        ],
        "operationId": "readSingleItemsSectionCredits",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSectionCredits"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing section_credits item.",
        "tags": [
          "Items",
          "ItemsSectionCredits"
        ],
        "operationId": "updateSingleItemsSectionCredits",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsSectionCredits"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSectionCredits"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing section_credits item.",
        "tags": [
          "Items",
          "ItemsSectionCredits"
        ],
        "operationId": "deleteSingleItemsSectionCredits",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/section_special_thanks": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new section_special_thanks item.",
        "tags": [
          "Items",
          "ItemsSectionSpecialThanks"
        ],
        "operationId": "createItemsSectionSpecialThanks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSectionSpecialThanks"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSectionSpecialThanks"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSectionSpecialThanks"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the section_special_thanks items.",
        "tags": [
          "Items",
          "ItemsSectionSpecialThanks"
        ],
        "operationId": "readItemsSectionSpecialThanks",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsSectionSpecialThanks"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple section_special_thanks items at the same time.",
        "tags": [
          "Items",
          "ItemsSectionSpecialThanks"
        ],
        "operationId": "updateItemsSectionSpecialThanks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSectionSpecialThanks"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSectionSpecialThanks"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSectionSpecialThanks"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing section_special_thanks items.",
        "tags": [
          "Items",
          "ItemsSectionSpecialThanks"
        ],
        "operationId": "deleteItemsSectionSpecialThanks",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/section_special_thanks/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single section_special_thanks item by unique identifier.",
        "tags": [
          "Items",
          "ItemsSectionSpecialThanks"
        ],
        "operationId": "readSingleItemsSectionSpecialThanks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSectionSpecialThanks"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing section_special_thanks item.",
        "tags": [
          "Items",
          "ItemsSectionSpecialThanks"
        ],
        "operationId": "updateSingleItemsSectionSpecialThanks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsSectionSpecialThanks"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSectionSpecialThanks"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing section_special_thanks item.",
        "tags": [
          "Items",
          "ItemsSectionSpecialThanks"
        ],
        "operationId": "deleteSingleItemsSectionSpecialThanks",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/section_ads": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new section_ads item.",
        "tags": [
          "Items",
          "ItemsSectionAds"
        ],
        "operationId": "createItemsSectionAds",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSectionAds"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSectionAds"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSectionAds"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the section_ads items.",
        "tags": [
          "Items",
          "ItemsSectionAds"
        ],
        "operationId": "readItemsSectionAds",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsSectionAds"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple section_ads items at the same time.",
        "tags": [
          "Items",
          "ItemsSectionAds"
        ],
        "operationId": "updateItemsSectionAds",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSectionAds"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSectionAds"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSectionAds"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing section_ads items.",
        "tags": [
          "Items",
          "ItemsSectionAds"
        ],
        "operationId": "deleteItemsSectionAds",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/section_ads/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single section_ads item by unique identifier.",
        "tags": [
          "Items",
          "ItemsSectionAds"
        ],
        "operationId": "readSingleItemsSectionAds",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSectionAds"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing section_ads item.",
        "tags": [
          "Items",
          "ItemsSectionAds"
        ],
        "operationId": "updateSingleItemsSectionAds",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsSectionAds"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSectionAds"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing section_ads item.",
        "tags": [
          "Items",
          "ItemsSectionAds"
        ],
        "operationId": "deleteSingleItemsSectionAds",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Assets",
      "description": "Image typed files can be dynamically resized and transformed to fit any need."
    },
    {
      "name": "Authentication",
      "description": "All data within the platform is private by default. The public role can be configured to expose data without authentication, or you can pass an access token to the API to access private data."
    },
    {
      "name": "Schema",
      "description": "Retrieve and update the schema of an instance.",
      "x-authentication": "admin",
      "x-schemas": [
        "Schema",
        "Diff"
      ]
    },
    {
      "name": "Server",
      "description": "Access to where Directus runs. Allows you to make sure your server has everything needed to run the platform, and check what kind of latency we're dealing with."
    },
    {
      "name": "Utilities",
      "description": "Directus comes with various utility endpoints you can use to simplify your development flow.",
      "x-authentication": "user",
      "x-schemas": [
        "Files",
        "Folders",
        "Users",
        "Roles"
      ]
    },
    {
      "name": "Activity",
      "description": "All events that happen within Directus are tracked and stored in the activities collection. This gives you full accountability over everything that happens.",
      "x-collection": "directus_activity"
    },
    {
      "name": "Permissions",
      "description": "Permissions control who has access to what and when.",
      "x-collection": "directus_permissions"
    },
    {
      "name": "Fields",
      "description": "Fields are individual pieces of content within an item. They are mapped to columns in the database.",
      "x-collection": "directus_fields"
    },
    {
      "name": "Files",
      "description": "Files can be saved in any given location. Directus has a powerful assets endpoint that can be used to generate thumbnails for images on the fly.",
      "x-collection": "directus_files"
    },
    {
      "name": "Collections",
      "description": "Collections are the individual collections of items, similar to tables in a database. Changes to collections will alter the schema of the database.",
      "x-collection": "directus_collections"
    },
    {
      "name": "Folders",
      "description": "Group files by virtual folders.",
      "x-collection": "directus_folders"
    },
    {
      "name": "Users",
      "description": "Users are what gives you access to the data.",
      "x-collection": "directus_users"
    },
    {
      "name": "Roles",
      "description": "Roles are groups of users that share permissions.",
      "x-collection": "directus_roles"
    },
    {
      "name": "Presets",
      "description": "Presets hold the preferences of individual users of the platform. This allows Directus to show and maintain custom item listings for users of the app.",
      "x-collection": "directus_presets"
    },
    {
      "name": "Revisions",
      "description": "Revisions are individual changes to items made. Directus keeps track of changes made, so you're able to revert to a previous state at will.",
      "x-collection": "directus_revisions"
    },
    {
      "name": "Relations",
      "description": "What data is linked to what other data. Allows you to assign authors to articles, products to sales, and whatever other structures you can think of.",
      "x-collection": "directus_relations"
    },
    {
      "name": "Flows",
      "description": "Flows enable custom, event-driven data processing and task automation.",
      "x-collection": "directus_flows"
    },
    {
      "name": "Operations",
      "description": "Operations are the building blocks within Data Flows.",
      "x-collection": "directus_operations"
    },
    {
      "name": "Webhooks",
      "description": "Webhooks.",
      "x-collection": "directus_webhooks"
    },
    {
      "name": "Extensions",
      "description": "Directus can easily be extended through the addition of several types of extensions, including layouts, interfaces, and modules.",
      "x-collection": "directus_extensions"
    },
    {
      "name": "Settings",
      "description": "Settings control the way the platform works and acts.",
      "x-collection": "directus_settings"
    },
    {
      "name": "Versions",
      "description": "Enables users to create unpublished copies of an item, modify them independently from the main version, and promote them to become the new main version when ready.",
      "x-collection": "directus_versions"
    },
    {
      "name": "Comments",
      "description": "Comments can be added to items.",
      "x-collection": "directus_comments"
    },
    {
      "name": "ItemsBlockButton",
      "x-collection": "block_button"
    },
    {
      "name": "ItemsBlockPosts",
      "x-collection": "block_posts"
    },
    {
      "name": "ItemsBlockButtonGroup",
      "x-collection": "block_button_group"
    },
    {
      "name": "ItemsBlockHero",
      "x-collection": "block_hero"
    },
    {
      "name": "ItemsBlockGalleryItems",
      "x-collection": "block_gallery_items"
    },
    {
      "name": "ItemsBlockGallery",
      "x-collection": "block_gallery"
    },
    {
      "name": "ItemsBlockForm",
      "x-collection": "block_form"
    },
    {
      "name": "ItemsGlobals",
      "x-collection": "globals",
      "description": "Site-wide settings"
    },
    {
      "name": "ItemsBlockPricing",
      "x-collection": "block_pricing"
    },
    {
      "name": "ItemsFormSubmissionValues",
      "x-collection": "form_submission_values",
      "description": "Individual responses to each form field within a form submission"
    },
    {
      "name": "ItemsBlockPricingCards",
      "x-collection": "block_pricing_cards"
    },
    {
      "name": "ItemsFormSubmissions",
      "x-collection": "form_submissions",
      "description": "Data for all form responses"
    },
    {
      "name": "ItemsFormFields",
      "x-collection": "form_fields",
      "description": "Individual fields for each form"
    },
    {
      "name": "ItemsNavigationItems",
      "x-collection": "navigation_items",
      "description": "Individual menu items"
    },
    {
      "name": "ItemsPageBlocks",
      "x-collection": "page_blocks"
    },
    {
      "name": "ItemsBlockRichtext",
      "x-collection": "block_richtext"
    },
    {
      "name": "ItemsForms",
      "x-collection": "forms",
      "description": "Dynamic forms"
    },
    {
      "name": "ItemsNavigation",
      "x-collection": "navigation",
      "description": "Dynamic menus for your site"
    },
    {
      "name": "ItemsRedirects",
      "x-collection": "redirects",
      "description": "Manage URL redirects for your website"
    },
    {
      "name": "ItemsPosts",
      "x-collection": "posts",
      "description": "Individual blog posts"
    },
    {
      "name": "ItemsPages",
      "x-collection": "pages",
      "description": "Dynamic page builder"
    },
    {
      "name": "ItemsRoles",
      "x-collection": "roles"
    },
    {
      "name": "ItemsPeople",
      "x-collection": "people"
    },
    {
      "name": "ItemsShows",
      "x-collection": "shows"
    },
    {
      "name": "ItemsPrograms",
      "x-collection": "programs"
    },
    {
      "name": "ItemsProductions",
      "x-collection": "productions"
    },
    {
      "name": "ItemsCities",
      "x-collection": "cities"
    },
    {
      "name": "ItemsOrganizations",
      "x-collection": "organizations"
    },
    {
      "name": "ItemsPronouns",
      "x-collection": "pronouns"
    },
    {
      "name": "ItemsProductionsOrganizations",
      "x-collection": "productions_organizations"
    },
    {
      "name": "ItemsShowsPeople",
      "x-collection": "shows_people"
    },
    {
      "name": "ItemsProductionsShows",
      "x-collection": "productions_shows"
    },
    {
      "name": "ItemsAddresses",
      "x-collection": "addresses"
    },
    {
      "name": "ItemsSongs",
      "x-collection": "songs"
    },
    {
      "name": "ItemsFestivals",
      "x-collection": "festivals"
    },
    {
      "name": "ItemsEvents",
      "x-collection": "events"
    },
    {
      "name": "ItemsFestivalsProductions",
      "x-collection": "festivals_productions"
    },
    {
      "name": "ItemsFestivalsOrganizations",
      "x-collection": "festivals_organizations"
    },
    {
      "name": "ItemsSongsPeople",
      "x-collection": "songs_people"
    },
    {
      "name": "ItemsShowsSongs",
      "x-collection": "shows_songs"
    },
    {
      "name": "ItemsFestivalsPrograms",
      "x-collection": "festivals_programs"
    },
    {
      "name": "ItemsProgramsSongs",
      "x-collection": "programs_songs"
    },
    {
      "name": "ItemsVenues",
      "x-collection": "venues"
    },
    {
      "name": "ItemsEventsVenues",
      "x-collection": "events_venues"
    },
    {
      "name": "ItemsProductionsPeople",
      "x-collection": "productions_people"
    },
    {
      "name": "ItemsProgramsEvents",
      "x-collection": "programs_events"
    },
    {
      "name": "ItemsProgramsPeople",
      "x-collection": "programs_people"
    },
    {
      "name": "ItemsTags",
      "x-collection": "tags"
    },
    {
      "name": "ItemsProgramsSections",
      "x-collection": "programs_sections"
    },
    {
      "name": "ItemsOrganizationsTags",
      "x-collection": "organizations_tags"
    },
    {
      "name": "ItemsSectionNotes",
      "x-collection": "section_notes"
    },
    {
      "name": "ItemsSectionCover",
      "x-collection": "section_cover"
    },
    {
      "name": "ItemsProgramsSponsors",
      "x-collection": "programs_sponsors"
    },
    {
      "name": "ItemsSectionBIOS",
      "x-collection": "section_bios"
    },
    {
      "name": "ItemsSectionPhotos",
      "x-collection": "section_photos"
    },
    {
      "name": "ItemsBlockAd",
      "x-collection": "block_ad"
    },
    {
      "name": "ItemsSectionSponsors",
      "x-collection": "section_sponsors"
    },
    {
      "name": "ItemsBlockAdBlocks",
      "x-collection": "block_ad_blocks"
    },
    {
      "name": "ItemsSectionStaff",
      "x-collection": "section_staff"
    },
    {
      "name": "ItemsSectionSongs",
      "x-collection": "section_songs"
    },
    {
      "name": "ItemsSectionNotesBlocks",
      "x-collection": "section_notes_blocks"
    },
    {
      "name": "ItemsSectionCredits",
      "x-collection": "section_credits"
    },
    {
      "name": "ItemsSectionSpecialThanks",
      "x-collection": "section_special_thanks"
    },
    {
      "name": "ItemsSectionAds",
      "x-collection": "section_ads"
    }
  ],
  "components": {
    "schemas": {
      "Diff": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string"
          },
          "diff": {
            "type": "object",
            "properties": {
              "collections": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "collection": {
                      "type": "string"
                    },
                    "diff": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              },
              "fields": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "collection": {
                      "type": "string"
                    },
                    "field": {
                      "type": "string"
                    },
                    "diff": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              },
              "relations": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "collection": {
                      "type": "string"
                    },
                    "field": {
                      "type": "string"
                    },
                    "related_collection": {
                      "type": "string"
                    },
                    "diff": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Files": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the file.",
            "example": "8cbb43fe-4cdf-4991-8352-c461779cec02",
            "type": "string"
          },
          "storage": {
            "description": "Where the file is stored. Either `local` for the local filesystem or the name of the storage adapter (for example `s3`).",
            "example": "local",
            "type": "string"
          },
          "filename_disk": {
            "description": "Name of the file on disk. By default, Directus uses a random hash for the filename.",
            "example": "a88c3b72-ac58-5436-a4ec-b2858531333a.jpg",
            "type": "string"
          },
          "filename_download": {
            "description": "How you want to the file to be named when it's being downloaded.",
            "example": "avatar.jpg",
            "type": "string"
          },
          "title": {
            "description": "Title for the file. Is extracted from the filename on upload, but can be edited by the user.",
            "example": "User Avatar",
            "type": "string"
          },
          "type": {
            "description": "MIME type of the file.",
            "example": "image/jpeg",
            "type": "string"
          },
          "folder": {
            "description": "Virtual folder where this file resides in.",
            "type": "string",
            "nullable": true
          },
          "uploaded_by": {
            "description": "Who uploaded the file.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "created_on": {
            "description": "When the file was created.",
            "example": "2019-12-03T00:10:15+00:00",
            "type": "string",
            "format": "date-time"
          },
          "modified_by": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "modified_on": {
            "nullable": false,
            "type": "string",
            "format": "timestamp"
          },
          "charset": {
            "description": "Character set of the file.",
            "example": "binary",
            "type": "string",
            "nullable": true
          },
          "filesize": {
            "description": "Size of the file in bytes.",
            "example": 137862,
            "type": "integer"
          },
          "width": {
            "description": "Width of the file in pixels. Only applies to images.",
            "example": 800,
            "type": "integer",
            "nullable": true
          },
          "height": {
            "description": "Height of the file in pixels. Only applies to images.",
            "example": 838,
            "type": "integer",
            "nullable": true
          },
          "duration": {
            "description": "Duration of the file in seconds. Only applies to audio and video.",
            "example": 0,
            "type": "integer",
            "nullable": true
          },
          "embed": {
            "description": "Where the file was embedded from.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "description": {
            "description": "Description for the file.",
            "type": "string",
            "nullable": true
          },
          "location": {
            "description": "Where the file was created. Is automatically populated based on Exif data for images.",
            "type": "string",
            "nullable": true
          },
          "tags": {
            "description": "Tags for the file. Is automatically populated based on Exif data for images.",
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "description": "IPTC, Exif, and ICC metadata extracted from file",
            "type": "object",
            "nullable": true
          },
          "focal_point_x": {
            "nullable": true,
            "type": "integer"
          },
          "focal_point_y": {
            "nullable": true,
            "type": "integer"
          },
          "tus_id": {
            "nullable": true,
            "type": "string"
          },
          "tus_data": {
            "nullable": true
          },
          "uploaded_on": {
            "description": "When the file was last uploaded/replaced.",
            "example": "2019-12-03T00:10:15+00:00",
            "type": "string",
            "format": "date-time"
          }
        },
        "x-collection": "directus_files"
      },
      "Folders": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the folder.",
            "example": "0cf0e03d-4364-45df-b77b-ca61f61869d2",
            "type": "string"
          },
          "name": {
            "description": "Name of the folder.",
            "example": "New York",
            "type": "string"
          },
          "parent": {
            "description": "Unique identifier of the parent folder. This allows for nested folders.",
            "example": null,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Folders"
              }
            ],
            "nullable": true
          }
        },
        "x-collection": "directus_folders"
      },
      "Roles": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the role.",
            "example": "2f24211d-d928-469a-aea3-3c8f53d4e426",
            "type": "string"
          },
          "name": {
            "description": "Name of the role.",
            "example": "Administrator",
            "type": "string"
          },
          "icon": {
            "description": "The role's icon.",
            "example": "verified_user",
            "type": "string"
          },
          "description": {
            "description": "Description of the role.",
            "example": "Admins have access to all managed data within the system by default",
            "type": "string",
            "nullable": true
          },
          "parent": {
            "nullable": true,
            "description": "$t:field_options.directus_roles.parent_note",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Roles"
              }
            ]
          },
          "children": {
            "nullable": true,
            "description": "$t:field_options.directus_roles.children_note",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/Roles"
                }
              ]
            }
          },
          "policies": {
            "nullable": true
          },
          "users": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/Users"
                }
              ]
            }
          }
        },
        "x-collection": "directus_roles"
      },
      "Schema": {
        "type": "object",
        "properties": {
          "version": {
            "type": "integer",
            "example": 1
          },
          "directus": {
            "type": "string"
          },
          "vendor": {
            "type": "string"
          },
          "collections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Collections"
            }
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Fields"
            }
          },
          "relations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relations"
            }
          }
        }
      },
      "Users": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the user.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "type": "string"
          },
          "first_name": {
            "description": "First name of the user.",
            "example": "Admin",
            "type": "string"
          },
          "last_name": {
            "description": "Last name of the user.",
            "example": "User",
            "type": "string"
          },
          "email": {
            "description": "Unique email address for the user.",
            "example": "admin@example.com",
            "type": "string",
            "format": "email"
          },
          "password": {
            "description": "Password of the user.",
            "type": "string"
          },
          "location": {
            "description": "The user's location.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "title": {
            "description": "The user's title.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "description": {
            "description": "The user's description.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "tags": {
            "description": "The user's tags.",
            "example": null,
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "avatar": {
            "description": "The user's avatar.",
            "example": null,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ],
            "nullable": true
          },
          "language": {
            "description": "The user's language used in Directus.",
            "example": "en-US",
            "type": "string"
          },
          "tfa_secret": {
            "description": "The 2FA secret string that's used to generate one time passwords.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "status": {
            "description": "Status of the user.",
            "example": "active",
            "type": "string",
            "enum": [
              "active",
              "invited",
              "draft",
              "suspended",
              "deleted"
            ]
          },
          "role": {
            "description": "Unique identifier of the role of this user.",
            "example": "2f24211d-d928-469a-aea3-3c8f53d4e426",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Roles"
              }
            ]
          },
          "token": {
            "description": "Static token for the user.",
            "type": "string",
            "nullable": true
          },
          "last_access": {
            "description": "When this user used the API last.",
            "example": "2020-05-31T14:32:37Z",
            "type": "string",
            "nullable": true,
            "format": "date-time"
          },
          "last_page": {
            "description": "Last page that the user was on.",
            "example": "/my-project/settings/collections/a",
            "type": "string",
            "nullable": true
          },
          "provider": {
            "nullable": false,
            "type": "string"
          },
          "external_identifier": {
            "nullable": true,
            "type": "string"
          },
          "auth_data": {
            "nullable": true
          },
          "email_notifications": {
            "nullable": true,
            "type": "boolean"
          },
          "appearance": {
            "nullable": true,
            "type": "string"
          },
          "theme_dark": {
            "nullable": true,
            "type": "string"
          },
          "theme_light": {
            "nullable": true,
            "type": "string"
          },
          "theme_light_overrides": {
            "nullable": true
          },
          "theme_dark_overrides": {
            "nullable": true
          },
          "person": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPeople"
              }
            ]
          },
          "posts": {
            "nullable": true,
            "description": "Blog posts this user has authored.",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsPosts"
                }
              ]
            }
          },
          "policies": {
            "nullable": true
          }
        },
        "x-collection": "directus_users"
      },
      "Query": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Control what fields are being returned in the object.",
            "example": [
              "*",
              "*.*"
            ]
          },
          "filter": {
            "type": "object",
            "example": {
              "<field>": {
                "<operator>": "<value>"
              }
            }
          },
          "search": {
            "description": "Filter by items that contain the given search query in one of their fields.",
            "type": "string"
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "How to sort the returned items.",
            "example": [
              "-date_created"
            ]
          },
          "limit": {
            "type": "number",
            "description": "Set the maximum number of items that will be returned"
          },
          "offset": {
            "type": "number",
            "description": "How many items to skip when fetching data."
          },
          "page": {
            "type": "number",
            "description": "Cursor for use in pagination. Often used in combination with limit."
          },
          "deep": {
            "type": "object",
            "description": "Deep allows you to set any of the other query parameters on a nested relational dataset.",
            "example": {
              "related_articles": {
                "_limit": 3
              }
            }
          }
        }
      },
      "x-metadata": {
        "type": "object",
        "properties": {
          "total_count": {
            "description": "Returns the total item count of the collection you're querying.",
            "type": "integer"
          },
          "filter_count": {
            "description": "Returns the item count of the collection you're querying, taking the current filter/search parameters into account.",
            "type": "integer"
          }
        }
      },
      "Activity": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the object.",
            "example": 2,
            "type": "integer"
          },
          "action": {
            "description": "Action that was performed.",
            "example": "update",
            "type": "string",
            "enum": [
              "create",
              "update",
              "delete",
              "login"
            ]
          },
          "user": {
            "description": "The user who performed this action.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ],
            "nullable": true
          },
          "timestamp": {
            "description": "When the action happened.",
            "example": "2019-12-05T22:52:09Z",
            "type": "string",
            "format": "date-time"
          },
          "ip": {
            "description": "The IP address of the user at the time the action took place.",
            "example": "127.0.0.1",
            "oneOf": [
              {
                "type": "string",
                "format": "ipv4"
              }
            ]
          },
          "user_agent": {
            "description": "User agent string of the browser the user used when the action took place.",
            "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_1) AppleWebKit/537.36 (KHTML,like Gecko) Chrome/78.0.3904.108 Safari/537.36",
            "type": "string"
          },
          "collection": {
            "description": "Collection identifier in which the item resides.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Collections"
              }
            ]
          },
          "item": {
            "description": "Unique identifier for the item the action applied to. This is always a string, even for integer primary keys.",
            "example": "328",
            "type": "string"
          },
          "origin": {
            "description": "Origin of the request when the action took place.",
            "example": "https://directus.io",
            "type": "string"
          },
          "revisions": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/Revisions"
                }
              ]
            }
          }
        },
        "x-collection": "directus_activity"
      },
      "Permissions": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the permission.",
            "example": 1,
            "type": "integer"
          },
          "collection": {
            "description": "What collection this permission applies to.",
            "example": "customers",
            "type": "string"
          },
          "action": {
            "description": "What action this permission applies to.",
            "example": "create",
            "type": "string",
            "enum": [
              "create",
              "read",
              "update",
              "delete"
            ]
          },
          "permissions": {
            "description": "JSON structure containing the permissions checks for this permission.",
            "type": "object",
            "nullable": true
          },
          "validation": {
            "description": "JSON structure containing the validation checks for this permission.",
            "type": "object",
            "nullable": true
          },
          "presets": {
            "description": "JSON structure containing the preset value for created/updated items.",
            "type": "object",
            "nullable": true
          },
          "fields": {
            "description": "CSV of fields that the user is allowed to interact with.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "policy": {
            "nullable": false
          }
        },
        "x-collection": "directus_permissions"
      },
      "Fields": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "collection": {
            "description": "Unique name of the collection this field is in.",
            "example": "about_us",
            "type": "string"
          },
          "field": {
            "description": "Unique name of the field. Field name is unique within the collection.",
            "example": "id",
            "type": "string"
          },
          "special": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "interface": {
            "nullable": true,
            "type": "string"
          },
          "options": {
            "nullable": true
          },
          "display": {
            "nullable": true,
            "type": "string"
          },
          "display_options": {
            "nullable": true
          },
          "readonly": {
            "nullable": false,
            "type": "boolean"
          },
          "hidden": {
            "nullable": false,
            "type": "boolean"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "width": {
            "nullable": true,
            "type": "string"
          },
          "translations": {
            "nullable": true
          },
          "note": {
            "nullable": true,
            "type": "string"
          },
          "conditions": {
            "nullable": true
          },
          "required": {
            "nullable": true,
            "type": "boolean"
          },
          "group": {
            "nullable": true,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/Fields"
              }
            ]
          },
          "validation": {
            "nullable": true
          },
          "validation_message": {
            "nullable": true,
            "type": "string"
          }
        },
        "x-collection": "directus_fields"
      },
      "Collections": {
        "type": "object",
        "properties": {
          "collection": {
            "description": "The collection key.",
            "example": "customers",
            "type": "string"
          },
          "icon": {
            "nullable": true,
            "type": "string"
          },
          "note": {
            "nullable": true,
            "type": "string"
          },
          "display_template": {
            "nullable": true,
            "type": "string"
          },
          "hidden": {
            "nullable": false,
            "type": "boolean"
          },
          "singleton": {
            "nullable": false,
            "type": "boolean"
          },
          "translations": {
            "nullable": true
          },
          "archive_field": {
            "nullable": true,
            "type": "string"
          },
          "archive_app_filter": {
            "nullable": false,
            "type": "boolean"
          },
          "archive_value": {
            "nullable": true,
            "type": "string"
          },
          "unarchive_value": {
            "nullable": true,
            "type": "string"
          },
          "sort_field": {
            "nullable": true,
            "type": "string"
          },
          "accountability": {
            "nullable": true,
            "type": "string"
          },
          "color": {
            "nullable": true,
            "type": "string"
          },
          "item_duplication_fields": {
            "nullable": true
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "group": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Collections"
              }
            ]
          },
          "collapse": {
            "nullable": false,
            "type": "string"
          },
          "preview_url": {
            "nullable": true,
            "type": "string"
          },
          "versioning": {
            "nullable": false,
            "type": "boolean"
          }
        },
        "x-collection": "directus_collections"
      },
      "Presets": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for this single collection preset.",
            "example": 155,
            "type": "integer"
          },
          "bookmark": {
            "description": "Name for the bookmark. If this is set, the preset will be considered a bookmark.",
            "nullable": true,
            "type": "string"
          },
          "user": {
            "description": "The unique identifier of the user to whom this collection preset applies.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "role": {
            "description": "The unique identifier of a role in the platform. If `user` is null, this will be used to apply the collection preset or bookmark for all users in the role.",
            "example": "50419801-0f30-8644-2b3c-9bc2d980d0a0",
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Roles"
              }
            ]
          },
          "collection": {
            "description": "What collection this collection preset is used for.",
            "example": "articles",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Collections"
              }
            ]
          },
          "search": {
            "description": "Search query.",
            "type": "string",
            "nullable": true
          },
          "layout": {
            "description": "Key of the layout that is used.",
            "type": "string",
            "example": null
          },
          "layout_query": {
            "description": "Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters.",
            "example": {
              "cards": {
                "sort": "-published_on"
              }
            },
            "nullable": true
          },
          "layout_options": {
            "description": "Options of the views. The properties in here are controlled by the layout.",
            "example": {
              "cards": {
                "icon": "account_circle",
                "title": "{{ first_name }} {{ last_name }}",
                "subtitle": "{{ title }}",
                "size": 3
              }
            },
            "nullable": true
          },
          "refresh_interval": {
            "nullable": true,
            "type": "integer"
          },
          "filter": {
            "nullable": true
          },
          "icon": {
            "nullable": true,
            "type": "string"
          },
          "color": {
            "nullable": true,
            "type": "string"
          }
        },
        "x-collection": "directus_presets"
      },
      "Revisions": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the revision.",
            "example": 1,
            "type": "integer"
          },
          "activity": {
            "description": "Unique identifier for the activity record.",
            "example": 2,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/Activity"
              }
            ]
          },
          "collection": {
            "description": "Collection of the updated item.",
            "example": "articles",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Collections"
              }
            ]
          },
          "item": {
            "description": "Primary key of updated item.",
            "example": "168",
            "type": "string"
          },
          "data": {
            "description": "Copy of item state at time of update.",
            "example": {
              "author": 1,
              "body": "This is my first post",
              "featured_image": 15,
              "id": "168",
              "title": "Hello, World!"
            },
            "type": "object",
            "nullable": true
          },
          "delta": {
            "description": "Changes between the previous and the current revision.",
            "example": {
              "title": "Hello, World!"
            },
            "type": "object"
          },
          "parent": {
            "description": "If the current item was updated relationally, this is the id of the parent revision record",
            "example": null,
            "type": "integer",
            "nullable": true
          },
          "version": {
            "description": "Associated version of this revision.",
            "example": "draft",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Versions"
              }
            ]
          }
        },
        "x-collection": "directus_revisions"
      },
      "Relations": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the relation.",
            "example": 1,
            "type": "integer"
          },
          "many_collection": {
            "description": "Collection that has the field that holds the foreign key.",
            "example": "directus_activity",
            "type": "string"
          },
          "many_field": {
            "description": "Foreign key. Field that holds the primary key of the related collection.",
            "example": "user",
            "type": "string"
          },
          "one_collection": {
            "description": "Collection on the _one_ side of the relationship.",
            "example": "directus_users",
            "type": "string"
          },
          "one_field": {
            "description": "Alias column that serves as the _one_ side of the relationship.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "one_collection_field": {
            "nullable": true,
            "type": "string"
          },
          "one_allowed_collections": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "junction_field": {
            "description": "Field on the junction table that holds the many field of the related relation.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "sort_field": {
            "nullable": true,
            "type": "string"
          },
          "one_deselect_action": {
            "nullable": false,
            "type": "string"
          }
        },
        "x-collection": "directus_relations"
      },
      "Flows": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the flow.",
            "type": "string",
            "example": "2f24211d-d928-469a-aea3-3c8f53d4e426"
          },
          "name": {
            "description": "The name of the flow.",
            "type": "string",
            "example": "Update Articles Flow"
          },
          "icon": {
            "description": "Icon displayed in the Admin App for the flow.",
            "type": "string",
            "example": "bolt"
          },
          "color": {
            "description": "Color of the icon displayed in the Admin App for the flow.",
            "type": "string",
            "example": "#112233",
            "nullable": true
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "description": "Current status of the flow.",
            "type": "string",
            "example": "active",
            "default": "active",
            "enum": [
              "active",
              "inactive"
            ]
          },
          "trigger": {
            "description": "Type of trigger for the flow. One of `hook`, `webhook`, `operation`, `schedule`, `manual`.",
            "type": "string",
            "example": "manual"
          },
          "accountability": {
            "description": "The permission used during the flow. One of `$public`, `$trigger`, `$full`, or UUID of a role.",
            "type": "string",
            "example": "$trigger"
          },
          "options": {
            "description": "Options of the selected trigger for the flow.",
            "type": "object",
            "example": null,
            "nullable": true
          },
          "operation": {
            "description": "UUID of the operation connected to the trigger in the flow.",
            "example": "92e82998-e421-412f-a513-13701e83e4ce",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Operations"
              }
            ]
          },
          "date_created": {
            "description": "Timestamp in ISO8601 when the flow was created.",
            "type": "string",
            "example": "2022-05-11T13:14:52Z",
            "format": "date-time",
            "nullable": true
          },
          "user_created": {
            "description": "The user who created the flow.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "operations": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/Operations"
                }
              ]
            }
          }
        },
        "x-collection": "directus_flows"
      },
      "Operations": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the operation.",
            "type": "string",
            "example": "2f24211d-d928-469a-aea3-3c8f53d4e426"
          },
          "name": {
            "description": "The name of the operation.",
            "type": "string",
            "example": "Log to Console"
          },
          "key": {
            "description": "Key for the operation. Must be unique within a given flow.",
            "type": "string",
            "example": "log_console"
          },
          "type": {
            "description": "Type of operation. One of `log`, `mail`, `notification`, `create`, `read`, `request`, `sleep`, `transform`, `trigger`, `condition`, or any type of custom operation extensions.",
            "type": "string",
            "example": "log"
          },
          "position_x": {
            "description": "Position of the operation on the X axis within the flow workspace.",
            "type": "integer",
            "example": 12
          },
          "position_y": {
            "description": "Position of the operation on the Y axis within the flow workspace.",
            "type": "integer",
            "example": 12
          },
          "options": {
            "description": "Options depending on the type of the operation.",
            "type": "object",
            "example": null,
            "nullable": true
          },
          "resolve": {
            "description": "The operation triggered when the current operation succeeds (or `then` logic of a condition operation).",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Operations"
              }
            ]
          },
          "reject": {
            "description": "The operation triggered when the current operation fails (or `otherwise` logic of a condition operation).",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Operations"
              }
            ]
          },
          "flow": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Flows"
              }
            ]
          },
          "date_created": {
            "description": "Timestamp in ISO8601 when the operation was created.",
            "type": "string",
            "example": "2022-05-11T13:14:52Z",
            "format": "date-time",
            "nullable": true
          },
          "user_created": {
            "description": "The user who created the operation.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          }
        },
        "x-collection": "directus_operations"
      },
      "Webhooks": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The index of the webhook.",
            "type": "integer",
            "example": 1
          },
          "name": {
            "description": "The name of the webhook.",
            "type": "string",
            "example": "create articles"
          },
          "method": {
            "description": "Method used in the webhook.",
            "type": "string",
            "example": "POST"
          },
          "url": {
            "description": "The url of the webhook.",
            "type": "string",
            "example": null,
            "nullable": true
          },
          "status": {
            "description": "The status of the webhook.",
            "type": "string",
            "example": "inactive"
          },
          "data": {
            "description": "If yes, send the content of what was done",
            "type": "boolean",
            "example": true
          },
          "actions": {
            "description": "The actions that triggers this webhook.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": null,
            "nullable": true
          },
          "collections": {
            "nullable": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "headers": {
            "nullable": true
          },
          "was_active_before_deprecation": {
            "nullable": false,
            "type": "boolean"
          },
          "migrated_flow": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Flows"
              }
            ]
          }
        },
        "x-collection": "directus_webhooks"
      },
      "Extensions": {
        "type": "object",
        "properties": {
          "enabled": {
            "nullable": false,
            "type": "boolean"
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "folder": {
            "nullable": false,
            "type": "string"
          },
          "source": {
            "nullable": false,
            "type": "string"
          },
          "bundle": {
            "description": "Name of the bundle the extension is in.",
            "example": "directus-extension-my-bundle",
            "type": "string",
            "nullable": true
          }
        },
        "x-collection": "directus_extensions"
      },
      "Settings": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the setting.",
            "type": "integer",
            "example": 1
          },
          "project_name": {
            "description": "The name of the project.",
            "type": "string",
            "example": "Directus"
          },
          "project_url": {
            "description": "The url of the project.",
            "type": "string",
            "example": null,
            "nullable": true
          },
          "project_color": {
            "description": "The brand color of the project.",
            "type": "string",
            "example": null,
            "nullable": true
          },
          "project_logo": {
            "description": "The logo of the project.",
            "type": "string",
            "example": null,
            "nullable": true
          },
          "public_foreground": {
            "description": "The foreground of the project.",
            "type": "string",
            "example": null,
            "nullable": true
          },
          "public_background": {
            "description": "The background of the project.",
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "example": null,
            "nullable": true
          },
          "public_note": {
            "description": "Note rendered on the public pages of the app.",
            "type": "string",
            "example": null,
            "nullable": true
          },
          "auth_login_attempts": {
            "description": "Allowed authentication login attempts before the user's status is set to blocked.",
            "type": "integer",
            "example": 25
          },
          "auth_password_policy": {
            "description": "Authentication password policy.",
            "type": "string",
            "nullable": true
          },
          "storage_asset_transform": {
            "description": "What transformations are allowed in the assets endpoint.",
            "type": "string",
            "enum": [
              "all",
              "none",
              "presets"
            ],
            "example": "all",
            "nullable": true
          },
          "storage_asset_presets": {
            "description": "Array of allowed",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "description": "Key for the asset. Used in the assets endpoint.",
                  "type": "string"
                },
                "fit": {
                  "description": "Whether to crop the thumbnail to match the size, or maintain the aspect ratio.",
                  "type": "string",
                  "enum": [
                    "cover",
                    "contain",
                    "inside",
                    "outside"
                  ]
                },
                "width": {
                  "description": "Width of the thumbnail.",
                  "type": "integer"
                },
                "height": {
                  "description": "Height of the thumbnail.",
                  "type": "integer"
                },
                "withoutEnlargement": {
                  "description": "No image upscale",
                  "type": "boolean"
                },
                "quality": {
                  "description": "Quality of the compression used.",
                  "type": "integer"
                },
                "format": {
                  "description": "Reformat output image",
                  "type": "string",
                  "enum": [
                    "",
                    "jpeg",
                    "png",
                    "webp",
                    "tiff",
                    "avif"
                  ]
                },
                "transforms": {
                  "description": "Additional transformations to apply",
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "type": "object",
                    "properties": {
                      "method": {
                        "description": "The Sharp method name",
                        "type": "string"
                      },
                      "arguments": {
                        "description": "A list of arguments to pass to the Sharp method",
                        "type": "array",
                        "nullable": true,
                        "items": {
                          "type": "object",
                          "properties": {
                            "argument": {
                              "description": "A JSON representation of the argument value",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": null,
            "nullable": true
          },
          "custom_css": {
            "nullable": true,
            "type": "string"
          },
          "storage_default_folder": {
            "description": "Default folder to place files",
            "type": "string",
            "format": "uuid"
          },
          "basemaps": {
            "nullable": true
          },
          "mapbox_key": {
            "nullable": true,
            "type": "string"
          },
          "module_bar": {
            "nullable": true
          },
          "project_descriptor": {
            "nullable": true,
            "type": "string"
          },
          "default_language": {
            "nullable": false,
            "type": "string"
          },
          "custom_aspect_ratios": {
            "nullable": true
          },
          "public_favicon": {
            "nullable": true,
            "description": "$t:field_options.directus_settings.project_favicon_note",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "default_appearance": {
            "nullable": false,
            "type": "string"
          },
          "default_theme_light": {
            "nullable": true,
            "type": "string"
          },
          "theme_light_overrides": {
            "nullable": true
          },
          "default_theme_dark": {
            "nullable": true,
            "type": "string"
          },
          "theme_dark_overrides": {
            "nullable": true
          },
          "report_error_url": {
            "nullable": true,
            "type": "string"
          },
          "report_bug_url": {
            "nullable": true,
            "type": "string"
          },
          "report_feature_url": {
            "nullable": true,
            "type": "string"
          },
          "public_registration": {
            "nullable": false,
            "description": "$t:fields.directus_settings.public_registration_note",
            "type": "boolean"
          },
          "public_registration_verify_email": {
            "nullable": false,
            "description": "$t:fields.directus_settings.public_registration_verify_email_note",
            "type": "boolean"
          },
          "public_registration_role": {
            "nullable": true,
            "description": "$t:fields.directus_settings.public_registration_role_note",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Roles"
              }
            ]
          },
          "public_registration_email_filter": {
            "nullable": true,
            "description": "$t:fields.directus_settings.public_registration_email_filter_note"
          },
          "visual_editor_urls": {
            "nullable": true
          },
          "accepted_terms": {
            "nullable": true,
            "type": "boolean"
          },
          "project_id": {
            "nullable": true,
            "type": "string",
            "format": "uuid"
          },
          "command_palette_settings": {
            "nullable": true,
            "description": "Settings for the Command Palette Module."
          }
        },
        "x-collection": "directus_settings"
      },
      "Versions": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Primary key of the Content Version.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "type": "string"
          },
          "key": {
            "description": "Key of the Content Version, used as the value for the \"version\" query parameter.",
            "example": "draft",
            "type": "string"
          },
          "name": {
            "description": "Descriptive name of the Content Version.",
            "example": "My Draft",
            "type": "string"
          },
          "collection": {
            "description": "Name of the collection the Content Version is created on.",
            "example": "articles",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Collections"
              }
            ]
          },
          "item": {
            "description": "The item the Content Version is created on.",
            "example": "168",
            "type": "string"
          },
          "hash": {
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "description": "When the Content Version was created.",
            "type": "string",
            "example": "2022-05-11T13:14:52Z",
            "format": "date-time",
            "nullable": true
          },
          "date_updated": {
            "description": "When the Content Version was last updated.",
            "type": "string",
            "example": "2022-05-11T13:14:53Z",
            "format": "date-time",
            "nullable": true
          },
          "user_created": {
            "description": "User that created the Content Version.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_updated": {
            "description": "User that last updated the Content Version.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "delta": {
            "description": "The current changes compared to the main version of the item.",
            "example": {
              "my_field": "Updated Value"
            },
            "type": "object"
          }
        },
        "x-collection": "directus_versions"
      },
      "Comments": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for this single collection preset.",
            "example": "81dfa7e0-56d2-471f-b96a-1cf8a62bdf28",
            "type": "string"
          },
          "collection": {
            "description": "The collection of the item the Comment is created for.",
            "example": "articles",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Collections"
              }
            ]
          },
          "item": {
            "description": "The item the Comment is created for.",
            "example": "123",
            "type": "string"
          },
          "comment": {
            "description": "User comment. This will store the comments that show up in the right sidebar of the item edit page in the admin app.",
            "example": "This is a comment",
            "type": "string"
          },
          "date_created": {
            "description": "When the Comment was created.",
            "type": "string",
            "example": "2024-01-23T12:34:56Z",
            "format": "date-time",
            "nullable": true
          },
          "date_updated": {
            "description": "When the Comment was updated.",
            "type": "string",
            "example": "2024-01-23T12:34:56Z",
            "format": "date-time",
            "nullable": true
          },
          "user_created": {
            "description": "User that created the Comment.",
            "example": "81dfa7e0-56d2-471f-b96a-1cf8a62bdf28",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_updated": {
            "description": "User that updated the Comment.",
            "example": "81dfa7e0-56d2-471f-b96a-1cf8a62bdf28",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          }
        },
        "x-collection": "directus_comments"
      },
      "ItemsBlockButton": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "type": {
            "nullable": true,
            "description": "What type of link is this? Page and Post allow you to link to internal content. URL is for external content. Group can contain other menu items.",
            "type": "string"
          },
          "page": {
            "nullable": true,
            "description": "The internal page to link to.",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPages"
              }
            ]
          },
          "post": {
            "nullable": true,
            "description": "The internal post to link to.",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPosts"
              }
            ]
          },
          "label": {
            "nullable": true,
            "description": "Text to include on the button.",
            "type": "string"
          },
          "variant": {
            "nullable": true,
            "description": "What type of button",
            "type": "string"
          },
          "button_group": {
            "nullable": true,
            "description": "The id of the Button Group this button belongs to.",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsBlockButtonGroup"
              }
            ]
          },
          "url": {
            "nullable": true,
            "description": "The URL to link to. Could be relative (ie `/my-page`) or a full external URL (ie `https://docs.directus.io`)",
            "type": "string"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          }
        },
        "x-collection": "block_button",
        "required": [
          "id"
        ]
      },
      "ItemsBlockPosts": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "headline": {
            "nullable": true,
            "description": "Larger main headline for this page section.",
            "type": "string"
          },
          "collection": {
            "nullable": true,
            "description": "The collection of content to fetch and display on the page within this block.",
            "type": "string"
          },
          "tagline": {
            "nullable": true,
            "description": "Smaller copy shown above the headline to label a section or add extra context.",
            "type": "string"
          },
          "limit": {
            "nullable": true,
            "type": "integer"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          }
        },
        "x-collection": "block_posts",
        "required": [
          "id"
        ]
      },
      "ItemsBlockButtonGroup": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "buttons": {
            "nullable": true,
            "description": "Add individual buttons to the button group.",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsBlockButton"
                }
              ]
            }
          }
        },
        "x-collection": "block_button_group",
        "required": [
          "id"
        ]
      },
      "ItemsBlockHero": {
        "type": "object",
        "properties": {
          "headline": {
            "nullable": true,
            "description": "Larger main headline for this page section.",
            "type": "string"
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "image": {
            "nullable": true,
            "description": "Featured image in the hero.",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "button_group": {
            "nullable": true,
            "description": "Action buttons that show below headline and description.",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsBlockButtonGroup"
              }
            ]
          },
          "description": {
            "nullable": true,
            "description": "Supporting copy that shows below the headline.",
            "type": "string"
          },
          "tagline": {
            "nullable": true,
            "description": "Smaller copy shown above the headline to label a section or add extra context.",
            "type": "string"
          },
          "layout": {
            "nullable": true,
            "description": "The layout for the component. You can set the image to display left, right, or in the center of page..",
            "type": "string"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          }
        },
        "x-collection": "block_hero",
        "required": [
          "id"
        ]
      },
      "ItemsBlockGalleryItems": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "block_gallery": {
            "nullable": true,
            "description": "The id of the gallery block this item belongs to.",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsBlockGallery"
              }
            ]
          },
          "directus_file": {
            "nullable": true,
            "description": "The id of the file included in the gallery.",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          }
        },
        "x-collection": "block_gallery_items",
        "required": [
          "id"
        ]
      },
      "ItemsBlockGallery": {
        "type": "object",
        "properties": {
          "headline": {
            "nullable": true,
            "description": "Larger main headline for this page section.",
            "type": "string"
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "tagline": {
            "nullable": true,
            "description": "Smaller copy shown above the headline to label a section or add extra context.",
            "type": "string"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "items": {
            "nullable": true,
            "description": "Images to include in the image gallery.",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsBlockGalleryItems"
                }
              ]
            }
          }
        },
        "x-collection": "block_gallery",
        "required": [
          "id"
        ]
      },
      "ItemsBlockForm": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "form": {
            "nullable": true,
            "description": "Form to show within block",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsForms"
              }
            ]
          },
          "headline": {
            "nullable": true,
            "description": "Larger main headline for this page section.",
            "type": "string"
          },
          "tagline": {
            "nullable": true,
            "description": "Smaller copy shown above the headline to label a section or add extra context.",
            "type": "string"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          }
        },
        "x-collection": "block_form",
        "required": [
          "id"
        ]
      },
      "ItemsGlobals": {
        "type": "object",
        "properties": {
          "description": {
            "nullable": true,
            "description": "Site summary for search results.",
            "type": "string"
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "social_links": {
            "nullable": true,
            "description": "Social media profile URLs"
          },
          "tagline": {
            "nullable": true,
            "description": "Short phrase describing the site.",
            "type": "string"
          },
          "title": {
            "nullable": true,
            "description": "Main site title",
            "type": "string"
          },
          "url": {
            "nullable": true,
            "description": "Public URL for the website",
            "type": "string"
          },
          "favicon": {
            "nullable": true,
            "description": "Small icon for browser tabs. 1:1 ratio. No larger than 512px × 512px.",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "logo": {
            "nullable": true,
            "description": "Main logo shown on the site (for light mode).",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "openai_api_key": {
            "nullable": true,
            "description": "Secret OpenAI API key. Don't share with anyone outside your team.",
            "type": "string"
          },
          "directus_url": {
            "nullable": true,
            "description": "The public URL for this Directus instance. Used in Flows.",
            "type": "string"
          },
          "logo_dark_mode": {
            "nullable": true,
            "description": "Main logo shown on the site (for dark mode).",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "accent_color": {
            "nullable": true,
            "description": "Accent color for the website (used on buttons, links, etc).",
            "type": "string"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          }
        },
        "x-collection": "globals",
        "required": [
          "id"
        ]
      },
      "ItemsBlockPricing": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "headline": {
            "nullable": true,
            "description": "Larger main headline for this page section.",
            "type": "string"
          },
          "tagline": {
            "nullable": true,
            "description": "Smaller copy shown above the headline to label a section or add extra context.",
            "type": "string"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "pricing_cards": {
            "nullable": true,
            "description": "The individual pricing cards to display.",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsBlockPricingCards"
                }
              ]
            }
          }
        },
        "x-collection": "block_pricing",
        "required": [
          "id"
        ]
      },
      "ItemsFormSubmissionValues": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "form_submission": {
            "nullable": true,
            "description": "Parent form submission for this value.",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFormSubmissions"
              }
            ]
          },
          "field": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFormFields"
              }
            ]
          },
          "value": {
            "nullable": true,
            "description": "The data entered by the user for this specific field in the form submission.",
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "file": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "timestamp": {
            "nullable": true,
            "description": "Form submission date and time.",
            "type": "string",
            "format": "timestamp"
          }
        },
        "x-collection": "form_submission_values",
        "required": [
          "id"
        ]
      },
      "ItemsBlockPricingCards": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "nullable": true,
            "description": "Name of the pricing plan. Shown at the top of the card.",
            "type": "string"
          },
          "description": {
            "nullable": true,
            "description": "Short, one sentence description of the pricing plan and who it is for.",
            "type": "string"
          },
          "price": {
            "nullable": true,
            "description": "Price and term for the pricing plan. (ie `$199/mo`)",
            "type": "string"
          },
          "badge": {
            "nullable": true,
            "description": "Badge that displays at the top of the pricing plan card to add helpful context.",
            "type": "string"
          },
          "features": {
            "nullable": true,
            "description": "Short list of features included in this plan. Press `Enter` to add another item to the list."
          },
          "button": {
            "nullable": true,
            "description": "The action button / link shown at the bottom of the pricing card.",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsBlockButton"
              }
            ]
          },
          "pricing": {
            "nullable": true,
            "description": "The id of the pricing block this card belongs to.",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsBlockPricing"
              }
            ]
          },
          "is_highlighted": {
            "nullable": true,
            "description": "Add highlighted border around the pricing plan to make it stand out.",
            "type": "boolean"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          }
        },
        "x-collection": "block_pricing_cards",
        "required": [
          "id"
        ]
      },
      "ItemsFormSubmissions": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "description": "Unique ID for this specific form submission",
            "type": "string",
            "format": "uuid"
          },
          "timestamp": {
            "nullable": true,
            "description": "Form submission date and time.",
            "type": "string",
            "format": "timestamp"
          },
          "form": {
            "nullable": true,
            "description": "Associated form for this submission.",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsForms"
              }
            ]
          },
          "values": {
            "nullable": true,
            "description": "Submitted field responses",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsFormSubmissionValues"
                }
              ]
            }
          }
        },
        "x-collection": "form_submissions",
        "required": [
          "id"
        ]
      },
      "ItemsFormFields": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "nullable": true,
            "description": "Unique field identifier, not shown to users (lowercase, hyphenated)",
            "type": "string"
          },
          "type": {
            "nullable": true,
            "description": "Input type for the field",
            "type": "string"
          },
          "label": {
            "nullable": true,
            "description": "Text label shown to form users.",
            "type": "string"
          },
          "placeholder": {
            "nullable": true,
            "description": "Default text shown in empty input.",
            "type": "string"
          },
          "help": {
            "nullable": true,
            "description": "Additional instructions shown below the input",
            "type": "string"
          },
          "validation": {
            "nullable": true,
            "description": "Available rules: `email`, `url`, `min:5`, `max:20`, `length:10`. Combine with pipes example: `email|max:255`",
            "type": "string"
          },
          "width": {
            "nullable": true,
            "description": "Field width on the form",
            "type": "string"
          },
          "choices": {
            "nullable": true,
            "description": "Options for radio or select inputs"
          },
          "form": {
            "nullable": true,
            "description": "Parent form this field belongs to.",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsForms"
              }
            ]
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "required": {
            "nullable": true,
            "description": "Make this field mandatory to complete.",
            "type": "boolean"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          }
        },
        "x-collection": "form_fields",
        "required": [
          "id"
        ]
      },
      "ItemsNavigationItems": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "navigation": {
            "nullable": true,
            "description": "Navigation menu that the individual links belong to.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsNavigation"
              }
            ]
          },
          "page": {
            "nullable": true,
            "description": "The internal page to link to.",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPages"
              }
            ]
          },
          "parent": {
            "nullable": true,
            "description": "The parent navigation item.",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsNavigationItems"
              }
            ]
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "title": {
            "nullable": true,
            "description": "Label shown to the user for the menu item.",
            "type": "string"
          },
          "type": {
            "nullable": true,
            "description": "What type of link is this? Page and Post allow you to link to internal content. URL is for external content. Group can contain other menu items.",
            "type": "string"
          },
          "url": {
            "nullable": true,
            "description": "The URL to link to. Could be relative (ie `/my-page`) or a full external URL (ie `https://docs.directus.io`)",
            "type": "string"
          },
          "post": {
            "nullable": true,
            "description": "The internal post to link to.",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPosts"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "children": {
            "nullable": true,
            "description": "Add child menu items within the group.",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsNavigationItems"
                }
              ]
            }
          }
        },
        "x-collection": "navigation_items",
        "required": [
          "id"
        ]
      },
      "ItemsPageBlocks": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "page": {
            "nullable": true,
            "description": "The id of the page that this block belongs to.",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPages"
              }
            ]
          },
          "item": {
            "nullable": true,
            "description": "The data for the block.",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/ItemsBlockPosts"
                },
                {
                  "$ref": "#/components/schemas/ItemsBlockHero"
                },
                {
                  "$ref": "#/components/schemas/ItemsBlockGallery"
                },
                {
                  "$ref": "#/components/schemas/ItemsBlockForm"
                },
                {
                  "$ref": "#/components/schemas/ItemsBlockPricing"
                },
                {
                  "$ref": "#/components/schemas/ItemsBlockRichtext"
                }
              ]
            }
          },
          "collection": {
            "nullable": true,
            "description": "The collection (type of block).",
            "type": "string"
          },
          "hide_block": {
            "nullable": true,
            "description": "Temporarily hide this block on the website without having to remove it from your page.",
            "type": "boolean"
          },
          "background": {
            "nullable": true,
            "description": "Background color for the block to create contrast. Does not control dark or light mode for the entire site.",
            "type": "string"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          }
        },
        "x-collection": "page_blocks",
        "required": [
          "id"
        ]
      },
      "ItemsBlockRichtext": {
        "type": "object",
        "properties": {
          "content": {
            "nullable": true,
            "description": "Rich text content for this block.",
            "type": "string"
          },
          "headline": {
            "nullable": true,
            "description": "Larger main headline for this page section.",
            "type": "string"
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "alignment": {
            "nullable": true,
            "description": "Controls how the content block is positioned on the page. Choose \"Left\" to align the block against the left margin or \"Center\" to position the block in the middle of the page. This setting affects the entire content block's placement, not the text alignment within it.",
            "type": "string"
          },
          "tagline": {
            "nullable": true,
            "description": "Smaller copy shown above the headline to label a section or add extra context.",
            "type": "string"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          }
        },
        "x-collection": "block_richtext",
        "required": [
          "id"
        ]
      },
      "ItemsForms": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "on_success": {
            "nullable": true,
            "description": "Action after successful submission.",
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "submit_label": {
            "nullable": true,
            "description": "Text shown on submit button.",
            "type": "string"
          },
          "success_message": {
            "nullable": true,
            "description": "Message shown after successful submission.",
            "type": "string"
          },
          "title": {
            "nullable": true,
            "description": "Form name (for internal reference).",
            "type": "string"
          },
          "success_redirect_url": {
            "nullable": true,
            "description": "Destination URL after successful submission.",
            "type": "string"
          },
          "is_active": {
            "nullable": true,
            "description": "Show or hide this form from the site.",
            "type": "boolean"
          },
          "emails": {
            "nullable": true,
            "description": "Setup email notifications when forms are submitted."
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "fields": {
            "nullable": true,
            "description": "Form structure and input fields",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsFormFields"
                }
              ]
            }
          },
          "submissions": {
            "nullable": true,
            "description": "Received form responses.",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsFormSubmissions"
                }
              ]
            }
          }
        },
        "x-collection": "forms",
        "required": [
          "id"
        ]
      },
      "ItemsNavigation": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "description": "Unique identifier for this menu. Can't be edited after creation.",
            "type": "string"
          },
          "title": {
            "nullable": true,
            "description": "What is the name of this menu? Only used internally.",
            "type": "string"
          },
          "is_active": {
            "nullable": true,
            "description": "Show or hide this menu from the site.",
            "type": "boolean"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "items": {
            "nullable": true,
            "description": "Links within the menu.",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsNavigationItems"
                }
              ]
            }
          }
        },
        "x-collection": "navigation",
        "required": [
          "id"
        ]
      },
      "ItemsRedirects": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "response_code": {
            "nullable": true,
            "type": "string"
          },
          "url_from": {
            "nullable": true,
            "description": "Old URL has to be relative to the site (ie `/blog` or `/news`). It cannot be a full url like (https://example.com/blog)",
            "type": "string"
          },
          "url_to": {
            "nullable": true,
            "description": "The URL you're redirecting to. This can be a relative url (/resources/matt-is-cool) or a full url (https://example.com/blog).",
            "type": "string"
          },
          "note": {
            "nullable": true,
            "description": "Short explanation of why the redirect was created.",
            "type": "string"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          }
        },
        "x-collection": "redirects",
        "required": [
          "id"
        ]
      },
      "ItemsPosts": {
        "type": "object",
        "properties": {
          "content": {
            "nullable": true,
            "description": "Rich text content of your blog post.",
            "type": "string"
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "image": {
            "nullable": true,
            "description": "Featured image for this post. Used in cards linking to the post and in the post detail page.",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "slug": {
            "nullable": true,
            "description": "Unique URL for this post (e.g., `yoursite.com/posts/{{your-slug}}`)",
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "nullable": false,
            "description": "Is this post published?",
            "type": "string"
          },
          "title": {
            "nullable": true,
            "description": "Title of the blog post (used in page title and meta tags)",
            "type": "string"
          },
          "description": {
            "nullable": true,
            "description": "Short summary of the blog post to entice readers.",
            "type": "string"
          },
          "author": {
            "nullable": true,
            "description": "Select the team member who wrote this post",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "published_at": {
            "nullable": true,
            "description": "Publish now or schedule for later.",
            "type": "string",
            "format": "timestamp"
          },
          "seo": {
            "nullable": true
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          }
        },
        "x-collection": "posts",
        "required": [
          "id"
        ]
      },
      "ItemsPages": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "title": {
            "nullable": true,
            "description": "The title of this page.",
            "type": "string"
          },
          "permalink": {
            "nullable": true,
            "description": "Unique URL for this page (start with `/`, can have multiple segments `/about/me`)).",
            "type": "string"
          },
          "status": {
            "nullable": false,
            "description": "Is this page published?",
            "type": "string"
          },
          "published_at": {
            "nullable": true,
            "description": "Publish now or schedule for later.",
            "type": "string",
            "format": "timestamp"
          },
          "seo": {
            "nullable": true
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "blocks": {
            "nullable": true,
            "description": "Create and arrange different content blocks (like text, images, or videos) to build your page.",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsPageBlocks"
                }
              ]
            }
          }
        },
        "x-collection": "pages",
        "required": [
          "id"
        ]
      },
      "ItemsRoles": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "name": {
            "nullable": true,
            "description": "Role name (e.g. 'Harold Hill', 'Director', 'Stage Manager')",
            "type": "string"
          },
          "type": {
            "nullable": true,
            "description": "Type of role",
            "type": "string"
          },
          "is_global": {
            "nullable": true,
            "description": "Is this a global role that can be used across multiple shows?",
            "type": "boolean"
          },
          "billing_order": {
            "nullable": true,
            "description": "Order in which this role appears in credits (1, 2, 3, etc.)",
            "type": "integer"
          },
          "show": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsShows"
              }
            ]
          }
        },
        "x-collection": "roles",
        "required": [
          "id"
        ]
      },
      "ItemsPeople": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "full_name": {
            "nullable": true,
            "description": "Full legal name",
            "type": "string"
          },
          "stage_name": {
            "nullable": true,
            "description": "How you'd like to be credited publicly",
            "type": "string"
          },
          "headshot": {
            "nullable": true,
            "description": "Professional headshot photo",
            "type": "string",
            "format": "uuid"
          },
          "default_bio": {
            "nullable": true,
            "description": "Default bio text used across productions (can be overridden per production)",
            "type": "string"
          },
          "website": {
            "nullable": true,
            "description": "Personal website URL",
            "type": "string"
          },
          "pronouns": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPronouns"
              }
            ]
          },
          "instagram": {
            "nullable": true,
            "description": "Instagram handle (without @)",
            "type": "string"
          },
          "twitter_x": {
            "nullable": true,
            "description": "X/Twitter handle (without @)",
            "type": "string"
          },
          "linkedin": {
            "nullable": true,
            "description": "LinkedIn profile URL or username",
            "type": "string"
          },
          "tiktok": {
            "nullable": true,
            "description": "TikTok handle (without @)",
            "type": "string"
          },
          "user": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/Users"
                }
              ]
            }
          },
          "programs": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsProgramsPeople"
                }
              ]
            }
          },
          "productions": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsProductionsPeople"
                }
              ]
            }
          },
          "songs": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsSongsPeople"
                }
              ]
            }
          },
          "shows": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsShowsPeople"
                }
              ]
            }
          }
        },
        "x-collection": "people",
        "required": [
          "id"
        ]
      },
      "ItemsShows": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "description": "Synopsis or description of the show",
            "type": "string"
          },
          "slug": {
            "nullable": true,
            "description": "URL-friendly version of title",
            "type": "string"
          },
          "roles": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsRoles"
                }
              ]
            }
          },
          "productions": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsProductionsShows"
                }
              ]
            }
          },
          "songs": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsShowsSongs"
                }
              ]
            }
          },
          "credits": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsShowsPeople"
                }
              ]
            }
          }
        },
        "x-collection": "shows",
        "required": [
          "id"
        ]
      },
      "ItemsPrograms": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": true,
            "description": "Program title",
            "type": "string"
          },
          "slug": {
            "nullable": true,
            "description": "URL-friendly version of title",
            "type": "string"
          },
          "published_date": {
            "nullable": true,
            "description": "When this program was published",
            "type": "string",
            "format": "date"
          },
          "production": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsProductions"
              }
            ]
          },
          "sections": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsProgramsSections"
                }
              ]
            }
          },
          "songs": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsProgramsSongs"
                }
              ]
            }
          },
          "events": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsProgramsEvents"
                }
              ]
            }
          },
          "festival": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsFestivalsPrograms"
                }
              ]
            }
          },
          "credits": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsProgramsPeople"
                }
              ]
            }
          },
          "sponsors": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsProgramsSponsors"
                }
              ]
            }
          }
        },
        "x-collection": "programs",
        "required": [
          "id"
        ]
      },
      "ItemsProductions": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": true,
            "description": "Production title (e.g. 'Hamlet - 2024 Revival')",
            "type": "string"
          },
          "slug": {
            "nullable": true,
            "description": "URL-friendly version of title",
            "type": "string"
          },
          "opening_date": {
            "nullable": true,
            "description": "Opening night date",
            "type": "string",
            "format": "date"
          },
          "closing_date": {
            "nullable": true,
            "description": "Closing night date",
            "type": "string",
            "format": "date"
          },
          "venue": {
            "nullable": true,
            "description": "Venue name where production is performed",
            "type": "string"
          },
          "description": {
            "nullable": true,
            "description": "Production-specific description or notes",
            "type": "string"
          },
          "festivals": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsFestivalsProductions"
                }
              ]
            }
          },
          "organizations": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsProductionsOrganizations"
                }
              ]
            }
          },
          "show": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsProductionsShows"
                }
              ]
            }
          },
          "programs": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsPrograms"
                }
              ]
            }
          },
          "credits": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsProductionsPeople"
                }
              ]
            }
          }
        },
        "x-collection": "productions",
        "required": [
          "id"
        ]
      },
      "ItemsCities": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "name": {
            "nullable": true,
            "description": "City name",
            "type": "string"
          },
          "province": {
            "nullable": true,
            "description": "Canadian province/territory",
            "type": "string"
          },
          "country": {
            "nullable": true,
            "description": "Country for this city",
            "type": "string"
          }
        },
        "x-collection": "cities",
        "required": [
          "id"
        ]
      },
      "ItemsOrganizations": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "name": {
            "nullable": true,
            "description": "Organization name",
            "type": "string"
          },
          "website": {
            "nullable": true,
            "description": "Organization website URL",
            "type": "string"
          },
          "charity_status": {
            "nullable": true,
            "description": "Organization's tax/charity status",
            "type": "string"
          },
          "logo": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "organization_notes": {
            "nullable": true,
            "type": "string"
          },
          "is_active": {
            "nullable": true,
            "type": "boolean"
          },
          "annual_revenue": {
            "nullable": true,
            "type": "string"
          },
          "number_of_employees": {
            "nullable": true,
            "type": "string"
          },
          "festivals": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsFestivalsOrganizations"
                }
              ]
            }
          },
          "productions": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsProductionsOrganizations"
                }
              ]
            }
          },
          "tags": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsOrganizationsTags"
                }
              ]
            }
          },
          "sponsoring": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsProgramsSponsors"
                }
              ]
            }
          }
        },
        "x-collection": "organizations",
        "required": [
          "id"
        ]
      },
      "ItemsPronouns": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "label": {
            "nullable": true,
            "description": "Display label (e.g., 'She/Her', 'They/Them', 'He/Him')",
            "type": "string"
          },
          "subject": {
            "nullable": true,
            "description": "Subject pronoun (e.g., 'she', 'they', 'he')",
            "type": "string"
          },
          "object": {
            "nullable": true,
            "description": "Object pronoun (e.g., 'her', 'them', 'him')",
            "type": "string"
          },
          "possessive": {
            "nullable": true,
            "description": "Possessive pronoun (e.g., 'her', 'their', 'his')",
            "type": "string"
          }
        },
        "x-collection": "pronouns",
        "required": [
          "id"
        ]
      },
      "ItemsProductionsOrganizations": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "productions_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsProductions"
              }
            ]
          },
          "organizations_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsOrganizations"
              }
            ]
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          }
        },
        "x-collection": "productions_organizations"
      },
      "ItemsShowsPeople": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "shows_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsShows"
              }
            ]
          },
          "people_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPeople"
              }
            ]
          },
          "role": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsRoles"
              }
            ]
          }
        },
        "x-collection": "shows_people"
      },
      "ItemsProductionsShows": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "productions_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsProductions"
              }
            ]
          },
          "shows_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsShows"
              }
            ]
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          }
        },
        "x-collection": "productions_shows"
      },
      "ItemsAddresses": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "street_address": {
            "nullable": true,
            "description": "Street number and name",
            "type": "string"
          },
          "postal_code": {
            "nullable": true,
            "description": "Canadian postal code (A1A 1A1)",
            "type": "string"
          },
          "city": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsCities"
              }
            ]
          },
          "line_2": {
            "nullable": true,
            "description": "Apartment, suite, unit, building, floor, etc. (optional)",
            "type": "string"
          },
          "country": {
            "nullable": true,
            "description": "Country for this address",
            "type": "string"
          }
        },
        "x-collection": "addresses",
        "required": [
          "id"
        ]
      },
      "ItemsSongs": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": true,
            "description": "Song title",
            "type": "string"
          },
          "subtitle": {
            "nullable": true,
            "description": "Subtitle or source (e.g., 'from The Music Man')",
            "type": "string"
          },
          "duration": {
            "nullable": true,
            "description": "Duration in seconds",
            "type": "integer"
          },
          "key_signature": {
            "nullable": true,
            "description": "Musical key (e.g., 'C Major', 'F# Minor')",
            "type": "string"
          },
          "tempo_marking": {
            "nullable": true,
            "description": "Tempo indication (e.g., 'Allegro', 'Andante')",
            "type": "string"
          },
          "lyrics": {
            "nullable": true,
            "description": "Song lyrics",
            "type": "string"
          },
          "translation": {
            "nullable": true,
            "description": "English translation of lyrics",
            "type": "string"
          },
          "program_notes": {
            "nullable": true,
            "description": "Program notes about the piece",
            "type": "string"
          },
          "composer_notes": {
            "nullable": true,
            "description": "Additional notes about composer/composition",
            "type": "string"
          },
          "genre": {
            "nullable": true,
            "description": "Musical genre",
            "type": "string"
          },
          "period": {
            "nullable": true,
            "description": "Musical period",
            "type": "string"
          },
          "opus_number": {
            "nullable": true,
            "description": "Opus number (e.g., 'Op. 27 No. 2')",
            "type": "string"
          },
          "movement_number": {
            "nullable": true,
            "description": "Movement number/name (e.g., 'I. Allegro')",
            "type": "string"
          },
          "instrumentation_notes": {
            "nullable": true,
            "description": "Instrumentation details",
            "type": "string"
          },
          "show_lyrics": {
            "nullable": true,
            "description": "Display lyrics in program",
            "type": "boolean"
          },
          "show_translation": {
            "nullable": true,
            "description": "Display translation in program",
            "type": "boolean"
          },
          "show_credits_only": {
            "nullable": true,
            "description": "Show only credits (no lyrics/details)",
            "type": "boolean"
          },
          "credits": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsSongsPeople"
                }
              ]
            }
          },
          "shows": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsShowsSongs"
                }
              ]
            }
          }
        },
        "x-collection": "songs",
        "required": [
          "id"
        ]
      },
      "ItemsFestivals": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "title": {
            "nullable": true,
            "description": "Festival name",
            "type": "string"
          },
          "slug": {
            "nullable": true,
            "description": "URL slug for festival",
            "type": "string"
          },
          "description": {
            "nullable": true,
            "description": "Festival description",
            "type": "string"
          },
          "tagline": {
            "nullable": true,
            "description": "Short tagline for festival",
            "type": "string"
          },
          "start_date": {
            "nullable": true,
            "description": "Festival start date",
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "nullable": true,
            "description": "Festival end date",
            "type": "string",
            "format": "date"
          },
          "year": {
            "nullable": true,
            "description": "Festival year",
            "type": "integer"
          },
          "website": {
            "nullable": true,
            "description": "Festival website URL",
            "type": "string"
          },
          "location": {
            "nullable": true,
            "description": "Festival location (city/region)",
            "type": "string"
          },
          "notes": {
            "nullable": true,
            "description": "Internal notes about the festival",
            "type": "string"
          },
          "productions": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsFestivalsProductions"
                }
              ]
            }
          },
          "organizations": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsFestivalsOrganizations"
                }
              ]
            }
          },
          "program": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsFestivalsPrograms"
                }
              ]
            }
          }
        },
        "x-collection": "festivals",
        "required": [
          "id"
        ]
      },
      "ItemsEvents": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "special_notes": {
            "nullable": true,
            "description": "Special notes for this event (e.g., fundraising gala, opening night, etc.)",
            "type": "string"
          },
          "understudy_notes": {
            "nullable": true,
            "description": "Notes about understudy/role changes for this specific event",
            "type": "string"
          },
          "title": {
            "nullable": true,
            "description": "Optional title for this event (e.g., 'Opening Night', 'Matinee Performance')",
            "type": "string"
          },
          "start": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "venue": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsEventsVenues"
                }
              ]
            }
          },
          "program": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsProgramsEvents"
                }
              ]
            }
          }
        },
        "x-collection": "events",
        "required": [
          "id"
        ]
      },
      "ItemsFestivalsProductions": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "festivals_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFestivals"
              }
            ]
          },
          "productions_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsProductions"
              }
            ]
          }
        },
        "x-collection": "festivals_productions"
      },
      "ItemsFestivalsOrganizations": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "festivals_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFestivals"
              }
            ]
          },
          "organizations_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsOrganizations"
              }
            ]
          }
        },
        "x-collection": "festivals_organizations"
      },
      "ItemsSongsPeople": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "songs_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsSongs"
              }
            ]
          },
          "people_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPeople"
              }
            ]
          },
          "roles": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsRoles"
              }
            ]
          }
        },
        "x-collection": "songs_people"
      },
      "ItemsShowsSongs": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "shows_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsShows"
              }
            ]
          },
          "songs_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsSongs"
              }
            ]
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          }
        },
        "x-collection": "shows_songs"
      },
      "ItemsFestivalsPrograms": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "festivals_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFestivals"
              }
            ]
          },
          "programs_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPrograms"
              }
            ]
          }
        },
        "x-collection": "festivals_programs"
      },
      "ItemsProgramsSongs": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "programs_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPrograms"
              }
            ]
          },
          "songs_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsSongs"
              }
            ]
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          }
        },
        "x-collection": "programs_songs"
      },
      "ItemsVenues": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "name": {
            "nullable": true,
            "description": "Venue name",
            "type": "string"
          },
          "capacity": {
            "nullable": true,
            "description": "Seating capacity",
            "type": "integer"
          },
          "venue_type": {
            "nullable": true,
            "description": "Type of venue",
            "type": "string"
          },
          "address": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsAddresses"
              }
            ]
          },
          "events": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsEventsVenues"
                }
              ]
            }
          }
        },
        "x-collection": "venues",
        "required": [
          "id"
        ]
      },
      "ItemsEventsVenues": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "events_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsEvents"
              }
            ]
          },
          "venues_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsVenues"
              }
            ]
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          }
        },
        "x-collection": "events_venues"
      },
      "ItemsProductionsPeople": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "role": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsRoles"
              }
            ]
          },
          "productions_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsProductions"
              }
            ]
          },
          "people_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPeople"
              }
            ]
          },
          "bio_override": {
            "nullable": true,
            "description": "Production-specific bio (overrides default bio)",
            "type": "string"
          },
          "display_in_program": {
            "nullable": true,
            "description": "Include this person in the program",
            "type": "boolean"
          }
        },
        "x-collection": "productions_people"
      },
      "ItemsProgramsEvents": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "programs_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPrograms"
              }
            ]
          },
          "events_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsEvents"
              }
            ]
          }
        },
        "x-collection": "programs_events"
      },
      "ItemsProgramsPeople": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "programs_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPrograms"
              }
            ]
          },
          "people_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPeople"
              }
            ]
          },
          "role": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsRoles"
              }
            ]
          },
          "bio_override": {
            "nullable": true,
            "description": "Program-specific bio (overrides default bio)",
            "type": "string"
          }
        },
        "x-collection": "programs_people"
      },
      "ItemsTags": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "tag_collections": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "color": {
            "nullable": true,
            "type": "string"
          },
          "organizations": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsOrganizationsTags"
                }
              ]
            }
          }
        },
        "x-collection": "tags",
        "required": [
          "id"
        ]
      },
      "ItemsProgramsSections": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "programs_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPrograms"
              }
            ]
          },
          "item": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/ItemsPrograms"
                },
                {
                  "$ref": "#/components/schemas/ItemsSectionNotes"
                },
                {
                  "$ref": "#/components/schemas/ItemsSectionCover"
                },
                {
                  "$ref": "#/components/schemas/ItemsSectionBIOS"
                },
                {
                  "$ref": "#/components/schemas/ItemsSectionCredits"
                }
              ]
            }
          },
          "collection": {
            "nullable": true,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          }
        },
        "x-collection": "programs_sections"
      },
      "ItemsOrganizationsTags": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "organizations_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsOrganizations"
              }
            ]
          },
          "tags_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsTags"
              }
            ]
          }
        },
        "x-collection": "organizations_tags"
      },
      "ItemsSectionNotes": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "blocks": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsSectionNotesBlocks"
                }
              ]
            }
          }
        },
        "x-collection": "section_notes",
        "required": [
          "id"
        ]
      },
      "ItemsSectionCover": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": true,
            "description": "Main title (e.g., show name)",
            "type": "string"
          },
          "subtitle": {
            "nullable": true,
            "description": "Subtitle (e.g., 'Book, Music & Lyrics by...')",
            "type": "string"
          },
          "image": {
            "nullable": true,
            "description": "Cover image",
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "section_cover",
        "required": [
          "id"
        ]
      },
      "ItemsProgramsSponsors": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "programs_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPrograms"
              }
            ]
          },
          "organizations_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsOrganizations"
              }
            ]
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "sponsor_level": {
            "nullable": true,
            "description": "Sponsorship tier/level",
            "type": "string"
          },
          "thank_you_message": {
            "nullable": true,
            "description": "Optional custom thank you message for this sponsor",
            "type": "string"
          }
        },
        "x-collection": "programs_sponsors"
      },
      "ItemsSectionBIOS": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": true,
            "description": "Section title (default: 'About the Artists')",
            "type": "string"
          },
          "display_mode": {
            "nullable": true,
            "description": "How to display the bios",
            "type": "string"
          },
          "include_headshots": {
            "nullable": true,
            "description": "Show headshot photos",
            "type": "boolean"
          }
        },
        "x-collection": "section_bios",
        "required": [
          "id"
        ]
      },
      "ItemsSectionPhotos": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": true,
            "description": "Section title (e.g., 'Production Photos')",
            "type": "string"
          },
          "layout": {
            "nullable": true,
            "description": "Gallery layout style",
            "type": "string"
          }
        },
        "x-collection": "section_photos",
        "required": [
          "id"
        ]
      },
      "ItemsBlockAd": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "blocks": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsBlockAdBlocks"
                }
              ]
            }
          }
        },
        "x-collection": "block_ad",
        "required": [
          "id"
        ]
      },
      "ItemsSectionSponsors": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": true,
            "description": "Section title (default: 'Our Sponsors')",
            "type": "string"
          },
          "intro_text": {
            "nullable": true,
            "description": "Introduction/thank you text",
            "type": "string"
          },
          "display_mode": {
            "nullable": true,
            "description": "How to display sponsors",
            "type": "string"
          },
          "show_levels": {
            "nullable": true,
            "description": "Show sponsor level names (e.g., 'Presenting Sponsor')",
            "type": "boolean"
          }
        },
        "x-collection": "section_sponsors",
        "required": [
          "id"
        ]
      },
      "ItemsBlockAdBlocks": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "block_ad_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsBlockAd"
              }
            ]
          },
          "item": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/ItemsBlockButton"
                },
                {
                  "$ref": "#/components/schemas/ItemsBlockPosts"
                },
                {
                  "$ref": "#/components/schemas/ItemsBlockButtonGroup"
                },
                {
                  "$ref": "#/components/schemas/ItemsBlockHero"
                },
                {
                  "$ref": "#/components/schemas/ItemsBlockGalleryItems"
                },
                {
                  "$ref": "#/components/schemas/ItemsBlockGallery"
                },
                {
                  "$ref": "#/components/schemas/ItemsBlockForm"
                },
                {
                  "$ref": "#/components/schemas/ItemsBlockPricing"
                },
                {
                  "$ref": "#/components/schemas/ItemsBlockPricingCards"
                },
                {
                  "$ref": "#/components/schemas/ItemsBlockRichtext"
                },
                {
                  "$ref": "#/components/schemas/ItemsBlockAd"
                }
              ]
            }
          },
          "collection": {
            "nullable": true,
            "type": "string"
          }
        },
        "x-collection": "block_ad_blocks"
      },
      "ItemsSectionStaff": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": true,
            "description": "Section title (default: 'Theatre Staff')",
            "type": "string"
          },
          "content": {
            "nullable": true,
            "description": "Staff listing content",
            "type": "string"
          },
          "display_mode": {
            "nullable": true,
            "description": "How to display staff",
            "type": "string"
          }
        },
        "x-collection": "section_staff",
        "required": [
          "id"
        ]
      },
      "ItemsSectionSongs": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": true,
            "description": "Section title (default: 'Musical Numbers')",
            "type": "string"
          },
          "display_mode": {
            "nullable": true,
            "description": "What information to show",
            "type": "string"
          },
          "show_intermission": {
            "nullable": true,
            "description": "Show intermission marker",
            "type": "boolean"
          },
          "intermission_after_position": {
            "nullable": true,
            "description": "Song position after which to show intermission",
            "type": "integer"
          }
        },
        "x-collection": "section_songs",
        "required": [
          "id"
        ]
      },
      "ItemsSectionNotesBlocks": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "section_notes_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsSectionNotes"
              }
            ]
          },
          "item": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/ItemsBlockGallery"
                },
                {
                  "$ref": "#/components/schemas/ItemsBlockRichtext"
                }
              ]
            }
          },
          "collection": {
            "nullable": true,
            "type": "string"
          }
        },
        "x-collection": "section_notes_blocks"
      },
      "ItemsSectionCredits": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": true,
            "description": "Section title (default: 'Cast & Creative Team')",
            "type": "string"
          },
          "display_mode": {
            "nullable": true,
            "description": "How to organize credits",
            "type": "string"
          },
          "columns": {
            "nullable": true,
            "description": "Number of columns",
            "type": "integer"
          },
          "show_understudies": {
            "nullable": true,
            "description": "Include understudy/swing information",
            "type": "boolean"
          },
          "show_production_team": {
            "nullable": true,
            "description": "Include production team credits",
            "type": "boolean"
          }
        },
        "x-collection": "section_credits",
        "required": [
          "id"
        ]
      },
      "ItemsSectionSpecialThanks": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": true,
            "description": "Section title (default: 'Special Thanks')",
            "type": "string"
          },
          "content": {
            "nullable": true,
            "description": "Thank you content (lists of names, paragraphs, etc.)",
            "type": "string"
          },
          "columns": {
            "nullable": true,
            "description": "Layout for thank you list",
            "type": "integer"
          }
        },
        "x-collection": "section_special_thanks",
        "required": [
          "id"
        ]
      },
      "ItemsSectionAds": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": true,
            "description": "Section title (usually blank for ads)",
            "type": "string"
          },
          "layout": {
            "nullable": true,
            "description": "Ad layout",
            "type": "string"
          }
        },
        "x-collection": "section_ads",
        "required": [
          "id"
        ]
      }
    },
    "parameters": {
      "Id": {
        "description": "Index",
        "name": "id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "UUId": {
        "description": "Unique identifier for the object.",
        "name": "id",
        "in": "path",
        "required": true,
        "schema": {
          "example": "8cbb43fe-4cdf-4991-8352-c461779cec02",
          "type": "string"
        }
      },
      "Collection": {
        "description": "Collection of which you want to retrieve the items from.",
        "name": "collection",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "Search": {
        "description": "Filter by items that contain the given search query in one of their fields.",
        "in": "query",
        "name": "search",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "Page": {
        "description": "Cursor for use in pagination. Often used in combination with limit.",
        "in": "query",
        "name": "page",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "Offset": {
        "description": "How many items to skip when fetching data.",
        "in": "query",
        "name": "offset",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "Sort": {
        "description": "How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.\n",
        "in": "query",
        "name": "sort",
        "required": false,
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "Meta": {
        "description": "What metadata to return in the response.",
        "in": "query",
        "name": "meta",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "Limit": {
        "description": "A limit on the number of objects that are returned.",
        "in": "query",
        "name": "limit",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "Filter": {
        "description": "Select items in collection by given conditions.",
        "in": "query",
        "name": "filter",
        "required": false,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "example": {
                "<field>": {
                  "<operator>": "<value>"
                }
              }
            }
          }
        }
      },
      "Fields": {
        "description": "Control what fields are being returned in the object.",
        "in": "query",
        "name": "fields",
        "required": false,
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "Export": {
        "name": "export",
        "description": "Saves the API response to a file. Accepts one of \"csv\", \"json\", \"xml\", \"yaml\".",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "csv",
            "json",
            "xml",
            "yaml"
          ]
        }
      },
      "Version": {
        "name": "version",
        "description": "Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "responses": {
      "NotFoundError": {
        "description": "Error: Not found.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "Error: Unauthorized request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "KeyAuth": {
        "type": "apiKey",
        "in": "query",
        "name": "access_token"
      },
      "Auth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    }
  }
}