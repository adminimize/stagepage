/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/assets/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get an Asset
         * @description Image typed files can be dynamically resized and transformed to fit any need.
         */
        readonly get: operations["getAsset"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/auth/login": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Retrieve a Temporary Access Token
         * @description Retrieve a Temporary Access Token
         */
        readonly post: operations["login"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/auth/refresh": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Refresh Token
         * @description Refresh a Temporary Access Token.
         */
        readonly post: operations["refresh"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/auth/logout": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Log Out
         * @description Log Out
         */
        readonly post: operations["logout"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/auth/password/request": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Request a Password Reset
         * @description Request a reset password email to be send.
         */
        readonly post: operations["passwordRequest"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/auth/password/reset": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Reset a Password
         * @description The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password.
         */
        readonly post: operations["passwordReset"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/auth/oauth": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List OAuth Providers
         * @description List configured OAuth providers.
         */
        readonly get: operations["oauth"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/auth/oauth/{provider}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Authenticated using an OAuth provider
         * @description Start OAuth flow using the specified provider
         */
        readonly get: operations["oauthProvider"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/schema/snapshot": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve Schema Snapshot
         * @description Retrieve the current schema. This endpoint is only available to admin users.
         */
        readonly get: operations["schemaSnapshot"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/schema/apply": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Apply Schema Difference
         * @description Update the instance's schema by passing the diff previously retrieved via `/schema/diff` endpoint in the JSON request body or a JSON/YAML file. This endpoint is only available to admin users.
         */
        readonly post: operations["schemaApply"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/schema/diff": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Retrieve Schema Difference
         * @description Compare the current instance's schema against the schema snapshot in JSON request body or a JSON/YAML file and retrieve the difference. This endpoint is only available to admin users.
         */
        readonly post: operations["schemaDiff"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/server/info": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * System Info
         * @description Perform a system status check and return the options.
         */
        readonly get: operations["serverInfo"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/server/ping": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Ping
         * @description Ping, pong. Ping.. pong.
         */
        readonly get: operations["ping"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/utils/hash/generate": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Hash a string
         * @description Generate a hash for a given string.
         */
        readonly post: operations["hash-generate"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/utils/hash/verify": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Hash a string
         * @description Generate a hash for a given string.
         */
        readonly post: operations["hash-verify"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/utils/sort/{collection}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Sort Items
         * @description Re-sort items in collection based on start and to value of item
         */
        readonly post: operations["sort"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/utils/import/{collection}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Import Items
         * @description Import multiple records from a JSON or CSV file into a collection.
         */
        readonly post: operations["import"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/utils/export/{collection}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Export Items
         * @description Export a larger data set to a file in the File Library
         */
        readonly post: operations["export"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/utils/cache/clear": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Clear Cache
         * @description Resets both the data and schema cache of Directus.
         */
        readonly post: operations["clear-cache"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/utils/random/string": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get a Random String
         * @description Returns a random string of given length.
         */
        readonly get: operations["random"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/activity": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Activity Actions
         * @description Returns a list of activity actions.
         */
        readonly get: operations["getActivities"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/activity/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Activity Action
         * @description Retrieves the details of an existing activity action. Provide the primary key of the activity action and Directus will return the corresponding information.
         */
        readonly get: operations["getActivity"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/permissions": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Permissions
         * @description List all permissions.
         */
        readonly get: operations["getPermissions"];
        readonly put?: never;
        /**
         * Create a Permission
         * @description Create a new permission.
         */
        readonly post: operations["createPermission"];
        /**
         * Delete Multiple Permissions
         * @description Delete multiple existing permissions.
         */
        readonly delete: operations["deletePermissions"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Permissions
         * @description Update multiple permissions at the same time.
         */
        readonly patch: operations["updatePermissions"];
        readonly trace?: never;
    };
    readonly "/permissions/me": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List My Permissions
         * @description List the permissions that apply to the current user.
         */
        readonly get: operations["getMyPermissions"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/permissions/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve a Permission
         * @description Retrieve a single permissions object by unique identifier.
         */
        readonly get: operations["getPermission"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete a Permission
         * @description Delete an existing permission
         */
        readonly delete: operations["deletePermission"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update a Permission
         * @description Update an existing permission
         */
        readonly patch: operations["updatePermission"];
        readonly trace?: never;
    };
    readonly "/fields": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List All Fields
         * @description Returns a list of the fields available in the project.
         */
        readonly get: operations["getFields"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/fields/{collection}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Fields in Collection
         * @description Returns a list of the fields available in the given collection.
         */
        readonly get: operations["getCollectionFields"];
        readonly put?: never;
        /**
         * Create Field in Collection
         * @description Create a new field in a given collection.
         */
        readonly post: operations["createField"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/fields/{collection}/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve a Field
         * @description Retrieves the details of a single field in a given collection.
         */
        readonly get: operations["getCollectionField"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete a Field
         * @description Delete an existing field.
         */
        readonly delete: operations["deleteField"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update a Field
         * @description Update an existing field.
         */
        readonly patch: operations["updateField"];
        readonly trace?: never;
    };
    readonly "/files": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Files
         * @description List the files.
         */
        readonly get: operations["getFiles"];
        readonly put?: never;
        /**
         * Create a File
         * @description Create a new file
         */
        readonly post: operations["createFile"];
        /**
         * Delete Multiple Files
         * @description Delete multiple existing files.
         */
        readonly delete: operations["deleteFiles"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Files
         * @description Update multiple files at the same time.
         */
        readonly patch: operations["updateFiles"];
        readonly trace?: never;
    };
    readonly "/files/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve a Files
         * @description Retrieve a single file by unique identifier.
         */
        readonly get: operations["getFile"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete a File
         * @description Delete an existing file.
         */
        readonly delete: operations["deleteFile"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update a File
         * @description Update an existing file, and/or replace it's file contents.
         */
        readonly patch: operations["updateFile"];
        readonly trace?: never;
    };
    readonly "/collections": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Collections
         * @description Returns a list of the collections available in the project.
         */
        readonly get: operations["getCollections"];
        readonly put?: never;
        /**
         * Create a Collection
         * @description Create a new collection in Directus.
         */
        readonly post: operations["createCollection"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/collections/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve a Collection
         * @description Retrieves the details of a single collection.
         */
        readonly get: operations["getCollection"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete a Collection
         * @description Delete an existing collection. Warning: This will delete the whole collection, including the items within. Proceed with caution.
         */
        readonly delete: operations["deleteCollection"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update a Collection
         * @description Update an existing collection.
         */
        readonly patch: operations["updateCollection"];
        readonly trace?: never;
    };
    readonly "/folders": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Folders
         * @description List the folders.
         */
        readonly get: operations["getFolders"];
        readonly put?: never;
        /**
         * Create a Folder
         * @description Create a new folder.
         */
        readonly post: operations["createFolder"];
        /**
         * Delete Multiple Folders
         * @description Delete multiple existing folders.
         */
        readonly delete: operations["deleteFolders"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Folders
         * @description Update multiple folders at the same time.
         */
        readonly patch: operations["updateFolders"];
        readonly trace?: never;
    };
    readonly "/folders/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve a Folder
         * @description Retrieve a single folder by unique identifier.
         */
        readonly get: operations["getFolder"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete a Folder
         * @description Delete an existing folder
         */
        readonly delete: operations["deleteFolder"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update a Folder
         * @description Update an existing folder
         */
        readonly patch: operations["updateFolder"];
        readonly trace?: never;
    };
    readonly "/users": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Users
         * @description List the users.
         */
        readonly get: operations["getUsers"];
        readonly put?: never;
        /**
         * Create a User
         * @description Create a new user.
         */
        readonly post: operations["createUser"];
        /**
         * Delete Multiple Users
         * @description Delete multiple existing users.
         */
        readonly delete: operations["deleteUsers"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Users
         * @description Update multiple users at the same time.
         */
        readonly patch: operations["updateUsers"];
        readonly trace?: never;
    };
    readonly "/users/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve a User
         * @description Retrieve a single user by unique identifier.
         */
        readonly get: operations["getUser"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete a User
         * @description Delete an existing user
         */
        readonly delete: operations["deleteUser"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update a User
         * @description Update an existing user
         */
        readonly patch: operations["updateUser"];
        readonly trace?: never;
    };
    readonly "/users/invite": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Invite User(s)
         * @description Invites one or more users to this project. It creates a user with an invited status, and then sends an email to the user with instructions on how to activate their account.
         */
        readonly post: operations["invite"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/users/invite/accept": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Accept User Invite
         * @description Accepts and enables an invited user using a JWT invitation token.
         */
        readonly post: operations["acceptInvite"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/users/me": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve Current User
         * @description Retrieve the currently authenticated user.
         */
        readonly get: operations["getMe"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Current User
         * @description Update the currently authenticated user.
         */
        readonly patch: operations["updateMe"];
        readonly trace?: never;
    };
    readonly "/users/me/track/page": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Last Page
         * @description Updates the last used page field of the currently authenticated user. This is used internally to be able to open the Directus admin app from the last page you used.
         */
        readonly patch: operations["updateLastUsedPageMe"];
        readonly trace?: never;
    };
    readonly "/users/me/tfa/enable": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Enable 2FA
         * @description Enables two-factor authentication for the currently authenticated user.
         */
        readonly post: operations["meTfaEnable"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/users/me/tfa/disable": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Disable 2FA
         * @description Disables two-factor authentication for the currently authenticated user.
         */
        readonly post: operations["meTfaDisable"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/roles": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Roles
         * @description List the roles.
         */
        readonly get: operations["getRoles"];
        readonly put?: never;
        /**
         * Create a Role
         * @description Create a new role.
         */
        readonly post: operations["createRole"];
        /**
         * Delete Multiple Roles
         * @description Delete multiple existing roles.
         */
        readonly delete: operations["deleteRoles"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Roles
         * @description Update multiple roles at the same time.
         */
        readonly patch: operations["updateRoles"];
        readonly trace?: never;
    };
    readonly "/roles/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve a Role
         * @description Retrieve a single role by unique identifier.
         */
        readonly get: operations["getRole"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete a Role
         * @description Delete an existing role
         */
        readonly delete: operations["deleteRole"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update a Role
         * @description Update an existing role
         */
        readonly patch: operations["updateRole"];
        readonly trace?: never;
    };
    readonly "/presets": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Presets
         * @description List the presets.
         */
        readonly get: operations["getPresets"];
        readonly put?: never;
        /**
         * Create a Preset
         * @description Create a new preset.
         */
        readonly post: operations["createPreset"];
        /**
         * Delete Multiple Presets
         * @description Delete multiple existing presets.
         */
        readonly delete: operations["deletePresets"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Presets
         * @description Update multiple presets at the same time.
         */
        readonly patch: operations["updatePresets"];
        readonly trace?: never;
    };
    readonly "/presets/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve a Preset
         * @description Retrieve a single preset by unique identifier.
         */
        readonly get: operations["getPreset"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete a Preset
         * @description Delete an existing preset.
         */
        readonly delete: operations["deletePreset"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update a Preset
         * @description Update an existing preset.
         */
        readonly patch: operations["updatePreset"];
        readonly trace?: never;
    };
    readonly "/revisions": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Revisions
         * @description List the revisions.
         */
        readonly get: operations["getRevisions"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/revisions/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve a Revision
         * @description Retrieve a single revision by unique identifier.
         */
        readonly get: operations["getRevision"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/relations": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Relations
         * @description List the relations.
         */
        readonly get: operations["getRelations"];
        readonly put?: never;
        /**
         * Create a Relation
         * @description Create a new relation.
         */
        readonly post: operations["createRelation"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/relations/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve a Relation
         * @description Retrieve a single relation by unique identifier.
         */
        readonly get: operations["getRelation"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete a Relation
         * @description Delete an existing relation.
         */
        readonly delete: operations["deleteRelation"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update a Relation
         * @description Update an existing relation
         */
        readonly patch: operations["updateRelation"];
        readonly trace?: never;
    };
    readonly "/flows": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Flows
         * @description Get all flows.
         */
        readonly get: operations["getFlows"];
        readonly put?: never;
        /**
         * Create a Flow
         * @description Create a new flow.
         */
        readonly post: operations["createFlow"];
        /**
         * Delete Multiple Flows
         * @description Delete multiple existing flows.
         */
        readonly delete: operations["deleteFlows"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Flows
         * @description Update multiple flows at the same time.
         */
        readonly patch: operations["updateFlows"];
        readonly trace?: never;
    };
    readonly "/flows/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve a Flow
         * @description Retrieve a single flow by unique identifier.
         */
        readonly get: operations["getFlow"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete a Flow
         * @description Delete an existing flow
         */
        readonly delete: operations["deleteFlow"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update a Flow
         * @description Update an existing flow
         */
        readonly patch: operations["updateFlow"];
        readonly trace?: never;
    };
    readonly "/operations": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Operations
         * @description Get all operations.
         */
        readonly get: operations["getOperations"];
        readonly put?: never;
        /**
         * Create an Operation
         * @description Create a new operation.
         */
        readonly post: operations["createOperation"];
        /**
         * Delete Multiple Operations
         * @description Delete multiple existing operations.
         */
        readonly delete: operations["deleteOperations"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Operations
         * @description Update multiple operations at the same time.
         */
        readonly patch: operations["updateOperations"];
        readonly trace?: never;
    };
    readonly "/operations/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Operation
         * @description Retrieve a single operation by unique identifier.
         */
        readonly get: operations["getOperation"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Operation
         * @description Delete an existing operation
         */
        readonly delete: operations["deleteOperation"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Operation
         * @description Update an existing operation
         */
        readonly patch: operations["updateOperation"];
        readonly trace?: never;
    };
    readonly "/webhooks": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Webhooks
         * @description Get all webhooks.
         */
        readonly get: operations["getWebhooks"];
        readonly put?: never;
        /**
         * Create a Webhook
         * @description Create a new webhook.
         */
        readonly post: operations["createWebhook"];
        /**
         * Delete Multiple Webhooks
         * @description Delete multiple existing webhooks.
         */
        readonly delete: operations["deleteWebhooks"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Webhooks
         * @description Update multiple webhooks at the same time.
         */
        readonly patch: operations["updateWebhooks"];
        readonly trace?: never;
    };
    readonly "/webhooks/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve a Webhook
         * @description Retrieve a single webhook by unique identifier.
         */
        readonly get: operations["getWebhook"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete a Webhook
         * @description Delete an existing webhook
         */
        readonly delete: operations["deleteWebhook"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update a Webhook
         * @description Update an existing webhook
         */
        readonly patch: operations["updateWebhook"];
        readonly trace?: never;
    };
    readonly "/extensions": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Extensions
         * @description List the installed extensions and their configuration in the project.
         */
        readonly get: operations["listExtensions"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/extensions/{name}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Extension
         * @description Update an existing extension.
         */
        readonly patch: operations["updateExtensions"];
        readonly trace?: never;
    };
    readonly "/extensions/{bundle}/{name}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Extension
         * @description Update an existing extension.
         */
        readonly patch: operations["updateExtensionBundle"];
        readonly trace?: never;
    };
    readonly "/settings": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve Settings
         * @description List the settings.
         */
        readonly get: operations["getSettings"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Settings
         * @description Update the settings
         */
        readonly patch: operations["updateSetting"];
        readonly trace?: never;
    };
    readonly "/versions": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Content Versions
         * @description Get all Content Versions.
         */
        readonly get: operations["getContentVersions"];
        readonly put?: never;
        /**
         * Create Multiple Content Versions
         * @description Create multiple new Content Versions.
         */
        readonly post: operations["createContentVersion"];
        /**
         * Delete Multiple Content Versions
         * @description Delete multiple existing Content Versions.
         */
        readonly delete: operations["deleteContentVersions"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Content Versions
         * @description Update multiple Content Versions at the same time.
         */
        readonly patch: operations["updateContentVersions"];
        readonly trace?: never;
    };
    readonly "/versions/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve a Content Version
         * @description Retrieve a single Content Version by unique identifier.
         */
        readonly get: operations["getContentVersion"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete a Content Version
         * @description Delete an existing Content Version.
         */
        readonly delete: operations["deleteContentVersion"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update a Content Version
         * @description Update an existing Content Version.
         */
        readonly patch: operations["updateContentVersion"];
        readonly trace?: never;
    };
    readonly "/versions/{id}/save": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Save to a Content Version
         * @description Save item changes to an existing Content Version.
         */
        readonly post: operations["saveContentVersion"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/versions/{id}/compare": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Compare a Content Version
         * @description Compare an existing Content Version with the main version of the item.
         */
        readonly get: operations["compareContentVersion"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/versions/{id}/promote": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Promote a Content Version
         * @description Pass the current hash of the main version of the item (obtained from the `compare` endpoint) along with an optional array of field names of which the values are to be promoted (by default, all fields are selected).
         */
        readonly post: operations["promoteContentVersion"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/comments": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Comments
         * @description List the comments.
         */
        readonly get: operations["getComments"];
        readonly put?: never;
        /**
         * Create a Comment
         * @description Create a new comment.
         */
        readonly post: operations["createComment"];
        /**
         * Delete Multiple Comments
         * @description Delete multiple existing comments.
         */
        readonly delete: operations["deleteComments"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Comments
         * @description Update multiple comments at the same time.
         */
        readonly patch: operations["updateComments"];
        readonly trace?: never;
    };
    readonly "/comments/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve a Comment
         * @description Retrieve a single comment by unique identifier.
         */
        readonly get: operations["getComment"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete a Comment
         * @description Delete an existing comment.
         */
        readonly delete: operations["deleteComment"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update a Comment
         * @description Update an existing comment.
         */
        readonly patch: operations["updateComment"];
        readonly trace?: never;
    };
    readonly "/items/block_button": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the block_button items.
         */
        readonly get: operations["readItemsBlockButton"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new block_button item.
         */
        readonly post: operations["createItemsBlockButton"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing block_button items.
         */
        readonly delete: operations["deleteItemsBlockButton"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple block_button items at the same time.
         */
        readonly patch: operations["updateItemsBlockButton"];
        readonly trace?: never;
    };
    readonly "/items/block_button/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single block_button item by unique identifier.
         */
        readonly get: operations["readSingleItemsBlockButton"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing block_button item.
         */
        readonly delete: operations["deleteSingleItemsBlockButton"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing block_button item.
         */
        readonly patch: operations["updateSingleItemsBlockButton"];
        readonly trace?: never;
    };
    readonly "/items/block_posts": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the block_posts items.
         */
        readonly get: operations["readItemsBlockPosts"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new block_posts item.
         */
        readonly post: operations["createItemsBlockPosts"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing block_posts items.
         */
        readonly delete: operations["deleteItemsBlockPosts"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple block_posts items at the same time.
         */
        readonly patch: operations["updateItemsBlockPosts"];
        readonly trace?: never;
    };
    readonly "/items/block_posts/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single block_posts item by unique identifier.
         */
        readonly get: operations["readSingleItemsBlockPosts"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing block_posts item.
         */
        readonly delete: operations["deleteSingleItemsBlockPosts"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing block_posts item.
         */
        readonly patch: operations["updateSingleItemsBlockPosts"];
        readonly trace?: never;
    };
    readonly "/items/block_button_group": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the block_button_group items.
         */
        readonly get: operations["readItemsBlockButtonGroup"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new block_button_group item.
         */
        readonly post: operations["createItemsBlockButtonGroup"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing block_button_group items.
         */
        readonly delete: operations["deleteItemsBlockButtonGroup"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple block_button_group items at the same time.
         */
        readonly patch: operations["updateItemsBlockButtonGroup"];
        readonly trace?: never;
    };
    readonly "/items/block_button_group/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single block_button_group item by unique identifier.
         */
        readonly get: operations["readSingleItemsBlockButtonGroup"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing block_button_group item.
         */
        readonly delete: operations["deleteSingleItemsBlockButtonGroup"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing block_button_group item.
         */
        readonly patch: operations["updateSingleItemsBlockButtonGroup"];
        readonly trace?: never;
    };
    readonly "/items/block_hero": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the block_hero items.
         */
        readonly get: operations["readItemsBlockHero"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new block_hero item.
         */
        readonly post: operations["createItemsBlockHero"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing block_hero items.
         */
        readonly delete: operations["deleteItemsBlockHero"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple block_hero items at the same time.
         */
        readonly patch: operations["updateItemsBlockHero"];
        readonly trace?: never;
    };
    readonly "/items/block_hero/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single block_hero item by unique identifier.
         */
        readonly get: operations["readSingleItemsBlockHero"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing block_hero item.
         */
        readonly delete: operations["deleteSingleItemsBlockHero"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing block_hero item.
         */
        readonly patch: operations["updateSingleItemsBlockHero"];
        readonly trace?: never;
    };
    readonly "/items/block_gallery_items": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the block_gallery_items items.
         */
        readonly get: operations["readItemsBlockGalleryItems"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new block_gallery_items item.
         */
        readonly post: operations["createItemsBlockGalleryItems"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing block_gallery_items items.
         */
        readonly delete: operations["deleteItemsBlockGalleryItems"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple block_gallery_items items at the same time.
         */
        readonly patch: operations["updateItemsBlockGalleryItems"];
        readonly trace?: never;
    };
    readonly "/items/block_gallery_items/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single block_gallery_items item by unique identifier.
         */
        readonly get: operations["readSingleItemsBlockGalleryItems"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing block_gallery_items item.
         */
        readonly delete: operations["deleteSingleItemsBlockGalleryItems"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing block_gallery_items item.
         */
        readonly patch: operations["updateSingleItemsBlockGalleryItems"];
        readonly trace?: never;
    };
    readonly "/items/block_gallery": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the block_gallery items.
         */
        readonly get: operations["readItemsBlockGallery"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new block_gallery item.
         */
        readonly post: operations["createItemsBlockGallery"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing block_gallery items.
         */
        readonly delete: operations["deleteItemsBlockGallery"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple block_gallery items at the same time.
         */
        readonly patch: operations["updateItemsBlockGallery"];
        readonly trace?: never;
    };
    readonly "/items/block_gallery/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single block_gallery item by unique identifier.
         */
        readonly get: operations["readSingleItemsBlockGallery"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing block_gallery item.
         */
        readonly delete: operations["deleteSingleItemsBlockGallery"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing block_gallery item.
         */
        readonly patch: operations["updateSingleItemsBlockGallery"];
        readonly trace?: never;
    };
    readonly "/items/block_form": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the block_form items.
         */
        readonly get: operations["readItemsBlockForm"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new block_form item.
         */
        readonly post: operations["createItemsBlockForm"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing block_form items.
         */
        readonly delete: operations["deleteItemsBlockForm"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple block_form items at the same time.
         */
        readonly patch: operations["updateItemsBlockForm"];
        readonly trace?: never;
    };
    readonly "/items/block_form/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single block_form item by unique identifier.
         */
        readonly get: operations["readSingleItemsBlockForm"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing block_form item.
         */
        readonly delete: operations["deleteSingleItemsBlockForm"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing block_form item.
         */
        readonly patch: operations["updateSingleItemsBlockForm"];
        readonly trace?: never;
    };
    readonly "/items/globals": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the globals items.
         */
        readonly get: operations["readItemsGlobals"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new globals item.
         */
        readonly post: operations["createItemsGlobals"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing globals items.
         */
        readonly delete: operations["deleteItemsGlobals"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple globals items at the same time.
         */
        readonly patch: operations["updateItemsGlobals"];
        readonly trace?: never;
    };
    readonly "/items/globals/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single globals item by unique identifier.
         */
        readonly get: operations["readSingleItemsGlobals"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing globals item.
         */
        readonly delete: operations["deleteSingleItemsGlobals"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing globals item.
         */
        readonly patch: operations["updateSingleItemsGlobals"];
        readonly trace?: never;
    };
    readonly "/items/block_pricing": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the block_pricing items.
         */
        readonly get: operations["readItemsBlockPricing"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new block_pricing item.
         */
        readonly post: operations["createItemsBlockPricing"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing block_pricing items.
         */
        readonly delete: operations["deleteItemsBlockPricing"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple block_pricing items at the same time.
         */
        readonly patch: operations["updateItemsBlockPricing"];
        readonly trace?: never;
    };
    readonly "/items/block_pricing/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single block_pricing item by unique identifier.
         */
        readonly get: operations["readSingleItemsBlockPricing"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing block_pricing item.
         */
        readonly delete: operations["deleteSingleItemsBlockPricing"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing block_pricing item.
         */
        readonly patch: operations["updateSingleItemsBlockPricing"];
        readonly trace?: never;
    };
    readonly "/items/form_submission_values": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the form_submission_values items.
         */
        readonly get: operations["readItemsFormSubmissionValues"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new form_submission_values item.
         */
        readonly post: operations["createItemsFormSubmissionValues"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing form_submission_values items.
         */
        readonly delete: operations["deleteItemsFormSubmissionValues"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple form_submission_values items at the same time.
         */
        readonly patch: operations["updateItemsFormSubmissionValues"];
        readonly trace?: never;
    };
    readonly "/items/form_submission_values/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single form_submission_values item by unique identifier.
         */
        readonly get: operations["readSingleItemsFormSubmissionValues"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing form_submission_values item.
         */
        readonly delete: operations["deleteSingleItemsFormSubmissionValues"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing form_submission_values item.
         */
        readonly patch: operations["updateSingleItemsFormSubmissionValues"];
        readonly trace?: never;
    };
    readonly "/items/block_pricing_cards": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the block_pricing_cards items.
         */
        readonly get: operations["readItemsBlockPricingCards"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new block_pricing_cards item.
         */
        readonly post: operations["createItemsBlockPricingCards"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing block_pricing_cards items.
         */
        readonly delete: operations["deleteItemsBlockPricingCards"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple block_pricing_cards items at the same time.
         */
        readonly patch: operations["updateItemsBlockPricingCards"];
        readonly trace?: never;
    };
    readonly "/items/block_pricing_cards/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single block_pricing_cards item by unique identifier.
         */
        readonly get: operations["readSingleItemsBlockPricingCards"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing block_pricing_cards item.
         */
        readonly delete: operations["deleteSingleItemsBlockPricingCards"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing block_pricing_cards item.
         */
        readonly patch: operations["updateSingleItemsBlockPricingCards"];
        readonly trace?: never;
    };
    readonly "/items/form_submissions": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the form_submissions items.
         */
        readonly get: operations["readItemsFormSubmissions"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new form_submissions item.
         */
        readonly post: operations["createItemsFormSubmissions"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing form_submissions items.
         */
        readonly delete: operations["deleteItemsFormSubmissions"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple form_submissions items at the same time.
         */
        readonly patch: operations["updateItemsFormSubmissions"];
        readonly trace?: never;
    };
    readonly "/items/form_submissions/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single form_submissions item by unique identifier.
         */
        readonly get: operations["readSingleItemsFormSubmissions"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing form_submissions item.
         */
        readonly delete: operations["deleteSingleItemsFormSubmissions"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing form_submissions item.
         */
        readonly patch: operations["updateSingleItemsFormSubmissions"];
        readonly trace?: never;
    };
    readonly "/items/form_fields": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the form_fields items.
         */
        readonly get: operations["readItemsFormFields"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new form_fields item.
         */
        readonly post: operations["createItemsFormFields"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing form_fields items.
         */
        readonly delete: operations["deleteItemsFormFields"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple form_fields items at the same time.
         */
        readonly patch: operations["updateItemsFormFields"];
        readonly trace?: never;
    };
    readonly "/items/form_fields/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single form_fields item by unique identifier.
         */
        readonly get: operations["readSingleItemsFormFields"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing form_fields item.
         */
        readonly delete: operations["deleteSingleItemsFormFields"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing form_fields item.
         */
        readonly patch: operations["updateSingleItemsFormFields"];
        readonly trace?: never;
    };
    readonly "/items/navigation_items": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the navigation_items items.
         */
        readonly get: operations["readItemsNavigationItems"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new navigation_items item.
         */
        readonly post: operations["createItemsNavigationItems"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing navigation_items items.
         */
        readonly delete: operations["deleteItemsNavigationItems"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple navigation_items items at the same time.
         */
        readonly patch: operations["updateItemsNavigationItems"];
        readonly trace?: never;
    };
    readonly "/items/navigation_items/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single navigation_items item by unique identifier.
         */
        readonly get: operations["readSingleItemsNavigationItems"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing navigation_items item.
         */
        readonly delete: operations["deleteSingleItemsNavigationItems"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing navigation_items item.
         */
        readonly patch: operations["updateSingleItemsNavigationItems"];
        readonly trace?: never;
    };
    readonly "/items/page_blocks": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the page_blocks items.
         */
        readonly get: operations["readItemsPageBlocks"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new page_blocks item.
         */
        readonly post: operations["createItemsPageBlocks"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing page_blocks items.
         */
        readonly delete: operations["deleteItemsPageBlocks"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple page_blocks items at the same time.
         */
        readonly patch: operations["updateItemsPageBlocks"];
        readonly trace?: never;
    };
    readonly "/items/page_blocks/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single page_blocks item by unique identifier.
         */
        readonly get: operations["readSingleItemsPageBlocks"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing page_blocks item.
         */
        readonly delete: operations["deleteSingleItemsPageBlocks"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing page_blocks item.
         */
        readonly patch: operations["updateSingleItemsPageBlocks"];
        readonly trace?: never;
    };
    readonly "/items/block_richtext": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the block_richtext items.
         */
        readonly get: operations["readItemsBlockRichtext"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new block_richtext item.
         */
        readonly post: operations["createItemsBlockRichtext"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing block_richtext items.
         */
        readonly delete: operations["deleteItemsBlockRichtext"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple block_richtext items at the same time.
         */
        readonly patch: operations["updateItemsBlockRichtext"];
        readonly trace?: never;
    };
    readonly "/items/block_richtext/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single block_richtext item by unique identifier.
         */
        readonly get: operations["readSingleItemsBlockRichtext"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing block_richtext item.
         */
        readonly delete: operations["deleteSingleItemsBlockRichtext"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing block_richtext item.
         */
        readonly patch: operations["updateSingleItemsBlockRichtext"];
        readonly trace?: never;
    };
    readonly "/items/forms": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the forms items.
         */
        readonly get: operations["readItemsForms"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new forms item.
         */
        readonly post: operations["createItemsForms"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing forms items.
         */
        readonly delete: operations["deleteItemsForms"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple forms items at the same time.
         */
        readonly patch: operations["updateItemsForms"];
        readonly trace?: never;
    };
    readonly "/items/forms/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single forms item by unique identifier.
         */
        readonly get: operations["readSingleItemsForms"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing forms item.
         */
        readonly delete: operations["deleteSingleItemsForms"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing forms item.
         */
        readonly patch: operations["updateSingleItemsForms"];
        readonly trace?: never;
    };
    readonly "/items/navigation": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the navigation items.
         */
        readonly get: operations["readItemsNavigation"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new navigation item.
         */
        readonly post: operations["createItemsNavigation"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing navigation items.
         */
        readonly delete: operations["deleteItemsNavigation"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple navigation items at the same time.
         */
        readonly patch: operations["updateItemsNavigation"];
        readonly trace?: never;
    };
    readonly "/items/navigation/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single navigation item by unique identifier.
         */
        readonly get: operations["readSingleItemsNavigation"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing navigation item.
         */
        readonly delete: operations["deleteSingleItemsNavigation"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing navigation item.
         */
        readonly patch: operations["updateSingleItemsNavigation"];
        readonly trace?: never;
    };
    readonly "/items/redirects": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the redirects items.
         */
        readonly get: operations["readItemsRedirects"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new redirects item.
         */
        readonly post: operations["createItemsRedirects"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing redirects items.
         */
        readonly delete: operations["deleteItemsRedirects"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple redirects items at the same time.
         */
        readonly patch: operations["updateItemsRedirects"];
        readonly trace?: never;
    };
    readonly "/items/redirects/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single redirects item by unique identifier.
         */
        readonly get: operations["readSingleItemsRedirects"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing redirects item.
         */
        readonly delete: operations["deleteSingleItemsRedirects"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing redirects item.
         */
        readonly patch: operations["updateSingleItemsRedirects"];
        readonly trace?: never;
    };
    readonly "/items/posts": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the posts items.
         */
        readonly get: operations["readItemsPosts"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new posts item.
         */
        readonly post: operations["createItemsPosts"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing posts items.
         */
        readonly delete: operations["deleteItemsPosts"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple posts items at the same time.
         */
        readonly patch: operations["updateItemsPosts"];
        readonly trace?: never;
    };
    readonly "/items/posts/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single posts item by unique identifier.
         */
        readonly get: operations["readSingleItemsPosts"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing posts item.
         */
        readonly delete: operations["deleteSingleItemsPosts"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing posts item.
         */
        readonly patch: operations["updateSingleItemsPosts"];
        readonly trace?: never;
    };
    readonly "/items/pages": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the pages items.
         */
        readonly get: operations["readItemsPages"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new pages item.
         */
        readonly post: operations["createItemsPages"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing pages items.
         */
        readonly delete: operations["deleteItemsPages"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple pages items at the same time.
         */
        readonly patch: operations["updateItemsPages"];
        readonly trace?: never;
    };
    readonly "/items/pages/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single pages item by unique identifier.
         */
        readonly get: operations["readSingleItemsPages"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing pages item.
         */
        readonly delete: operations["deleteSingleItemsPages"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing pages item.
         */
        readonly patch: operations["updateSingleItemsPages"];
        readonly trace?: never;
    };
    readonly "/items/roles": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the roles items.
         */
        readonly get: operations["readItemsRoles"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new roles item.
         */
        readonly post: operations["createItemsRoles"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing roles items.
         */
        readonly delete: operations["deleteItemsRoles"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple roles items at the same time.
         */
        readonly patch: operations["updateItemsRoles"];
        readonly trace?: never;
    };
    readonly "/items/roles/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single roles item by unique identifier.
         */
        readonly get: operations["readSingleItemsRoles"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing roles item.
         */
        readonly delete: operations["deleteSingleItemsRoles"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing roles item.
         */
        readonly patch: operations["updateSingleItemsRoles"];
        readonly trace?: never;
    };
    readonly "/items/people": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the people items.
         */
        readonly get: operations["readItemsPeople"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new people item.
         */
        readonly post: operations["createItemsPeople"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing people items.
         */
        readonly delete: operations["deleteItemsPeople"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple people items at the same time.
         */
        readonly patch: operations["updateItemsPeople"];
        readonly trace?: never;
    };
    readonly "/items/people/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single people item by unique identifier.
         */
        readonly get: operations["readSingleItemsPeople"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing people item.
         */
        readonly delete: operations["deleteSingleItemsPeople"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing people item.
         */
        readonly patch: operations["updateSingleItemsPeople"];
        readonly trace?: never;
    };
    readonly "/items/shows": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the shows items.
         */
        readonly get: operations["readItemsShows"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new shows item.
         */
        readonly post: operations["createItemsShows"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing shows items.
         */
        readonly delete: operations["deleteItemsShows"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple shows items at the same time.
         */
        readonly patch: operations["updateItemsShows"];
        readonly trace?: never;
    };
    readonly "/items/shows/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single shows item by unique identifier.
         */
        readonly get: operations["readSingleItemsShows"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing shows item.
         */
        readonly delete: operations["deleteSingleItemsShows"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing shows item.
         */
        readonly patch: operations["updateSingleItemsShows"];
        readonly trace?: never;
    };
    readonly "/items/programs": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the programs items.
         */
        readonly get: operations["readItemsPrograms"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new programs item.
         */
        readonly post: operations["createItemsPrograms"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing programs items.
         */
        readonly delete: operations["deleteItemsPrograms"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple programs items at the same time.
         */
        readonly patch: operations["updateItemsPrograms"];
        readonly trace?: never;
    };
    readonly "/items/programs/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single programs item by unique identifier.
         */
        readonly get: operations["readSingleItemsPrograms"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing programs item.
         */
        readonly delete: operations["deleteSingleItemsPrograms"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing programs item.
         */
        readonly patch: operations["updateSingleItemsPrograms"];
        readonly trace?: never;
    };
    readonly "/items/productions": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the productions items.
         */
        readonly get: operations["readItemsProductions"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new productions item.
         */
        readonly post: operations["createItemsProductions"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing productions items.
         */
        readonly delete: operations["deleteItemsProductions"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple productions items at the same time.
         */
        readonly patch: operations["updateItemsProductions"];
        readonly trace?: never;
    };
    readonly "/items/productions/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single productions item by unique identifier.
         */
        readonly get: operations["readSingleItemsProductions"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing productions item.
         */
        readonly delete: operations["deleteSingleItemsProductions"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing productions item.
         */
        readonly patch: operations["updateSingleItemsProductions"];
        readonly trace?: never;
    };
    readonly "/items/cities": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the cities items.
         */
        readonly get: operations["readItemsCities"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new cities item.
         */
        readonly post: operations["createItemsCities"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing cities items.
         */
        readonly delete: operations["deleteItemsCities"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple cities items at the same time.
         */
        readonly patch: operations["updateItemsCities"];
        readonly trace?: never;
    };
    readonly "/items/cities/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single cities item by unique identifier.
         */
        readonly get: operations["readSingleItemsCities"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing cities item.
         */
        readonly delete: operations["deleteSingleItemsCities"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing cities item.
         */
        readonly patch: operations["updateSingleItemsCities"];
        readonly trace?: never;
    };
    readonly "/items/organizations": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the organizations items.
         */
        readonly get: operations["readItemsOrganizations"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new organizations item.
         */
        readonly post: operations["createItemsOrganizations"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing organizations items.
         */
        readonly delete: operations["deleteItemsOrganizations"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple organizations items at the same time.
         */
        readonly patch: operations["updateItemsOrganizations"];
        readonly trace?: never;
    };
    readonly "/items/organizations/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single organizations item by unique identifier.
         */
        readonly get: operations["readSingleItemsOrganizations"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing organizations item.
         */
        readonly delete: operations["deleteSingleItemsOrganizations"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing organizations item.
         */
        readonly patch: operations["updateSingleItemsOrganizations"];
        readonly trace?: never;
    };
    readonly "/items/pronouns": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the pronouns items.
         */
        readonly get: operations["readItemsPronouns"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new pronouns item.
         */
        readonly post: operations["createItemsPronouns"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing pronouns items.
         */
        readonly delete: operations["deleteItemsPronouns"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple pronouns items at the same time.
         */
        readonly patch: operations["updateItemsPronouns"];
        readonly trace?: never;
    };
    readonly "/items/pronouns/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single pronouns item by unique identifier.
         */
        readonly get: operations["readSingleItemsPronouns"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing pronouns item.
         */
        readonly delete: operations["deleteSingleItemsPronouns"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing pronouns item.
         */
        readonly patch: operations["updateSingleItemsPronouns"];
        readonly trace?: never;
    };
    readonly "/items/productions_organizations": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the productions_organizations items.
         */
        readonly get: operations["readItemsProductionsOrganizations"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new productions_organizations item.
         */
        readonly post: operations["createItemsProductionsOrganizations"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing productions_organizations items.
         */
        readonly delete: operations["deleteItemsProductionsOrganizations"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple productions_organizations items at the same time.
         */
        readonly patch: operations["updateItemsProductionsOrganizations"];
        readonly trace?: never;
    };
    readonly "/items/productions_organizations/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single productions_organizations item by unique identifier.
         */
        readonly get: operations["readSingleItemsProductionsOrganizations"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing productions_organizations item.
         */
        readonly delete: operations["deleteSingleItemsProductionsOrganizations"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing productions_organizations item.
         */
        readonly patch: operations["updateSingleItemsProductionsOrganizations"];
        readonly trace?: never;
    };
    readonly "/items/shows_people": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the shows_people items.
         */
        readonly get: operations["readItemsShowsPeople"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new shows_people item.
         */
        readonly post: operations["createItemsShowsPeople"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing shows_people items.
         */
        readonly delete: operations["deleteItemsShowsPeople"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple shows_people items at the same time.
         */
        readonly patch: operations["updateItemsShowsPeople"];
        readonly trace?: never;
    };
    readonly "/items/shows_people/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single shows_people item by unique identifier.
         */
        readonly get: operations["readSingleItemsShowsPeople"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing shows_people item.
         */
        readonly delete: operations["deleteSingleItemsShowsPeople"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing shows_people item.
         */
        readonly patch: operations["updateSingleItemsShowsPeople"];
        readonly trace?: never;
    };
    readonly "/items/productions_shows": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the productions_shows items.
         */
        readonly get: operations["readItemsProductionsShows"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new productions_shows item.
         */
        readonly post: operations["createItemsProductionsShows"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing productions_shows items.
         */
        readonly delete: operations["deleteItemsProductionsShows"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple productions_shows items at the same time.
         */
        readonly patch: operations["updateItemsProductionsShows"];
        readonly trace?: never;
    };
    readonly "/items/productions_shows/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single productions_shows item by unique identifier.
         */
        readonly get: operations["readSingleItemsProductionsShows"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing productions_shows item.
         */
        readonly delete: operations["deleteSingleItemsProductionsShows"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing productions_shows item.
         */
        readonly patch: operations["updateSingleItemsProductionsShows"];
        readonly trace?: never;
    };
    readonly "/items/addresses": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the addresses items.
         */
        readonly get: operations["readItemsAddresses"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new addresses item.
         */
        readonly post: operations["createItemsAddresses"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing addresses items.
         */
        readonly delete: operations["deleteItemsAddresses"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple addresses items at the same time.
         */
        readonly patch: operations["updateItemsAddresses"];
        readonly trace?: never;
    };
    readonly "/items/addresses/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single addresses item by unique identifier.
         */
        readonly get: operations["readSingleItemsAddresses"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing addresses item.
         */
        readonly delete: operations["deleteSingleItemsAddresses"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing addresses item.
         */
        readonly patch: operations["updateSingleItemsAddresses"];
        readonly trace?: never;
    };
    readonly "/items/songs": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the songs items.
         */
        readonly get: operations["readItemsSongs"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new songs item.
         */
        readonly post: operations["createItemsSongs"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing songs items.
         */
        readonly delete: operations["deleteItemsSongs"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple songs items at the same time.
         */
        readonly patch: operations["updateItemsSongs"];
        readonly trace?: never;
    };
    readonly "/items/songs/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single songs item by unique identifier.
         */
        readonly get: operations["readSingleItemsSongs"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing songs item.
         */
        readonly delete: operations["deleteSingleItemsSongs"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing songs item.
         */
        readonly patch: operations["updateSingleItemsSongs"];
        readonly trace?: never;
    };
    readonly "/items/festivals": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the festivals items.
         */
        readonly get: operations["readItemsFestivals"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new festivals item.
         */
        readonly post: operations["createItemsFestivals"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing festivals items.
         */
        readonly delete: operations["deleteItemsFestivals"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple festivals items at the same time.
         */
        readonly patch: operations["updateItemsFestivals"];
        readonly trace?: never;
    };
    readonly "/items/festivals/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single festivals item by unique identifier.
         */
        readonly get: operations["readSingleItemsFestivals"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing festivals item.
         */
        readonly delete: operations["deleteSingleItemsFestivals"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing festivals item.
         */
        readonly patch: operations["updateSingleItemsFestivals"];
        readonly trace?: never;
    };
    readonly "/items/events": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the events items.
         */
        readonly get: operations["readItemsEvents"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new events item.
         */
        readonly post: operations["createItemsEvents"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing events items.
         */
        readonly delete: operations["deleteItemsEvents"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple events items at the same time.
         */
        readonly patch: operations["updateItemsEvents"];
        readonly trace?: never;
    };
    readonly "/items/events/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single events item by unique identifier.
         */
        readonly get: operations["readSingleItemsEvents"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing events item.
         */
        readonly delete: operations["deleteSingleItemsEvents"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing events item.
         */
        readonly patch: operations["updateSingleItemsEvents"];
        readonly trace?: never;
    };
    readonly "/items/festivals_productions": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the festivals_productions items.
         */
        readonly get: operations["readItemsFestivalsProductions"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new festivals_productions item.
         */
        readonly post: operations["createItemsFestivalsProductions"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing festivals_productions items.
         */
        readonly delete: operations["deleteItemsFestivalsProductions"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple festivals_productions items at the same time.
         */
        readonly patch: operations["updateItemsFestivalsProductions"];
        readonly trace?: never;
    };
    readonly "/items/festivals_productions/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single festivals_productions item by unique identifier.
         */
        readonly get: operations["readSingleItemsFestivalsProductions"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing festivals_productions item.
         */
        readonly delete: operations["deleteSingleItemsFestivalsProductions"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing festivals_productions item.
         */
        readonly patch: operations["updateSingleItemsFestivalsProductions"];
        readonly trace?: never;
    };
    readonly "/items/festivals_organizations": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the festivals_organizations items.
         */
        readonly get: operations["readItemsFestivalsOrganizations"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new festivals_organizations item.
         */
        readonly post: operations["createItemsFestivalsOrganizations"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing festivals_organizations items.
         */
        readonly delete: operations["deleteItemsFestivalsOrganizations"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple festivals_organizations items at the same time.
         */
        readonly patch: operations["updateItemsFestivalsOrganizations"];
        readonly trace?: never;
    };
    readonly "/items/festivals_organizations/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single festivals_organizations item by unique identifier.
         */
        readonly get: operations["readSingleItemsFestivalsOrganizations"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing festivals_organizations item.
         */
        readonly delete: operations["deleteSingleItemsFestivalsOrganizations"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing festivals_organizations item.
         */
        readonly patch: operations["updateSingleItemsFestivalsOrganizations"];
        readonly trace?: never;
    };
    readonly "/items/songs_people": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the songs_people items.
         */
        readonly get: operations["readItemsSongsPeople"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new songs_people item.
         */
        readonly post: operations["createItemsSongsPeople"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing songs_people items.
         */
        readonly delete: operations["deleteItemsSongsPeople"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple songs_people items at the same time.
         */
        readonly patch: operations["updateItemsSongsPeople"];
        readonly trace?: never;
    };
    readonly "/items/songs_people/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single songs_people item by unique identifier.
         */
        readonly get: operations["readSingleItemsSongsPeople"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing songs_people item.
         */
        readonly delete: operations["deleteSingleItemsSongsPeople"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing songs_people item.
         */
        readonly patch: operations["updateSingleItemsSongsPeople"];
        readonly trace?: never;
    };
    readonly "/items/shows_songs": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the shows_songs items.
         */
        readonly get: operations["readItemsShowsSongs"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new shows_songs item.
         */
        readonly post: operations["createItemsShowsSongs"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing shows_songs items.
         */
        readonly delete: operations["deleteItemsShowsSongs"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple shows_songs items at the same time.
         */
        readonly patch: operations["updateItemsShowsSongs"];
        readonly trace?: never;
    };
    readonly "/items/shows_songs/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single shows_songs item by unique identifier.
         */
        readonly get: operations["readSingleItemsShowsSongs"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing shows_songs item.
         */
        readonly delete: operations["deleteSingleItemsShowsSongs"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing shows_songs item.
         */
        readonly patch: operations["updateSingleItemsShowsSongs"];
        readonly trace?: never;
    };
    readonly "/items/festivals_programs": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the festivals_programs items.
         */
        readonly get: operations["readItemsFestivalsPrograms"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new festivals_programs item.
         */
        readonly post: operations["createItemsFestivalsPrograms"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing festivals_programs items.
         */
        readonly delete: operations["deleteItemsFestivalsPrograms"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple festivals_programs items at the same time.
         */
        readonly patch: operations["updateItemsFestivalsPrograms"];
        readonly trace?: never;
    };
    readonly "/items/festivals_programs/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single festivals_programs item by unique identifier.
         */
        readonly get: operations["readSingleItemsFestivalsPrograms"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing festivals_programs item.
         */
        readonly delete: operations["deleteSingleItemsFestivalsPrograms"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing festivals_programs item.
         */
        readonly patch: operations["updateSingleItemsFestivalsPrograms"];
        readonly trace?: never;
    };
    readonly "/items/programs_songs": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the programs_songs items.
         */
        readonly get: operations["readItemsProgramsSongs"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new programs_songs item.
         */
        readonly post: operations["createItemsProgramsSongs"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing programs_songs items.
         */
        readonly delete: operations["deleteItemsProgramsSongs"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple programs_songs items at the same time.
         */
        readonly patch: operations["updateItemsProgramsSongs"];
        readonly trace?: never;
    };
    readonly "/items/programs_songs/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single programs_songs item by unique identifier.
         */
        readonly get: operations["readSingleItemsProgramsSongs"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing programs_songs item.
         */
        readonly delete: operations["deleteSingleItemsProgramsSongs"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing programs_songs item.
         */
        readonly patch: operations["updateSingleItemsProgramsSongs"];
        readonly trace?: never;
    };
    readonly "/items/venues": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the venues items.
         */
        readonly get: operations["readItemsVenues"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new venues item.
         */
        readonly post: operations["createItemsVenues"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing venues items.
         */
        readonly delete: operations["deleteItemsVenues"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple venues items at the same time.
         */
        readonly patch: operations["updateItemsVenues"];
        readonly trace?: never;
    };
    readonly "/items/venues/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single venues item by unique identifier.
         */
        readonly get: operations["readSingleItemsVenues"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing venues item.
         */
        readonly delete: operations["deleteSingleItemsVenues"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing venues item.
         */
        readonly patch: operations["updateSingleItemsVenues"];
        readonly trace?: never;
    };
    readonly "/items/events_venues": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the events_venues items.
         */
        readonly get: operations["readItemsEventsVenues"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new events_venues item.
         */
        readonly post: operations["createItemsEventsVenues"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing events_venues items.
         */
        readonly delete: operations["deleteItemsEventsVenues"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple events_venues items at the same time.
         */
        readonly patch: operations["updateItemsEventsVenues"];
        readonly trace?: never;
    };
    readonly "/items/events_venues/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single events_venues item by unique identifier.
         */
        readonly get: operations["readSingleItemsEventsVenues"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing events_venues item.
         */
        readonly delete: operations["deleteSingleItemsEventsVenues"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing events_venues item.
         */
        readonly patch: operations["updateSingleItemsEventsVenues"];
        readonly trace?: never;
    };
    readonly "/items/productions_people": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the productions_people items.
         */
        readonly get: operations["readItemsProductionsPeople"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new productions_people item.
         */
        readonly post: operations["createItemsProductionsPeople"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing productions_people items.
         */
        readonly delete: operations["deleteItemsProductionsPeople"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple productions_people items at the same time.
         */
        readonly patch: operations["updateItemsProductionsPeople"];
        readonly trace?: never;
    };
    readonly "/items/productions_people/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single productions_people item by unique identifier.
         */
        readonly get: operations["readSingleItemsProductionsPeople"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing productions_people item.
         */
        readonly delete: operations["deleteSingleItemsProductionsPeople"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing productions_people item.
         */
        readonly patch: operations["updateSingleItemsProductionsPeople"];
        readonly trace?: never;
    };
    readonly "/items/programs_events": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the programs_events items.
         */
        readonly get: operations["readItemsProgramsEvents"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new programs_events item.
         */
        readonly post: operations["createItemsProgramsEvents"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing programs_events items.
         */
        readonly delete: operations["deleteItemsProgramsEvents"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple programs_events items at the same time.
         */
        readonly patch: operations["updateItemsProgramsEvents"];
        readonly trace?: never;
    };
    readonly "/items/programs_events/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single programs_events item by unique identifier.
         */
        readonly get: operations["readSingleItemsProgramsEvents"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing programs_events item.
         */
        readonly delete: operations["deleteSingleItemsProgramsEvents"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing programs_events item.
         */
        readonly patch: operations["updateSingleItemsProgramsEvents"];
        readonly trace?: never;
    };
    readonly "/items/programs_people": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the programs_people items.
         */
        readonly get: operations["readItemsProgramsPeople"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new programs_people item.
         */
        readonly post: operations["createItemsProgramsPeople"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing programs_people items.
         */
        readonly delete: operations["deleteItemsProgramsPeople"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple programs_people items at the same time.
         */
        readonly patch: operations["updateItemsProgramsPeople"];
        readonly trace?: never;
    };
    readonly "/items/programs_people/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single programs_people item by unique identifier.
         */
        readonly get: operations["readSingleItemsProgramsPeople"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing programs_people item.
         */
        readonly delete: operations["deleteSingleItemsProgramsPeople"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing programs_people item.
         */
        readonly patch: operations["updateSingleItemsProgramsPeople"];
        readonly trace?: never;
    };
    readonly "/items/tags": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the tags items.
         */
        readonly get: operations["readItemsTags"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new tags item.
         */
        readonly post: operations["createItemsTags"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing tags items.
         */
        readonly delete: operations["deleteItemsTags"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple tags items at the same time.
         */
        readonly patch: operations["updateItemsTags"];
        readonly trace?: never;
    };
    readonly "/items/tags/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single tags item by unique identifier.
         */
        readonly get: operations["readSingleItemsTags"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing tags item.
         */
        readonly delete: operations["deleteSingleItemsTags"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing tags item.
         */
        readonly patch: operations["updateSingleItemsTags"];
        readonly trace?: never;
    };
    readonly "/items/programs_sections": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the programs_sections items.
         */
        readonly get: operations["readItemsProgramsSections"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new programs_sections item.
         */
        readonly post: operations["createItemsProgramsSections"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing programs_sections items.
         */
        readonly delete: operations["deleteItemsProgramsSections"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple programs_sections items at the same time.
         */
        readonly patch: operations["updateItemsProgramsSections"];
        readonly trace?: never;
    };
    readonly "/items/programs_sections/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single programs_sections item by unique identifier.
         */
        readonly get: operations["readSingleItemsProgramsSections"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing programs_sections item.
         */
        readonly delete: operations["deleteSingleItemsProgramsSections"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing programs_sections item.
         */
        readonly patch: operations["updateSingleItemsProgramsSections"];
        readonly trace?: never;
    };
    readonly "/items/organizations_tags": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the organizations_tags items.
         */
        readonly get: operations["readItemsOrganizationsTags"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new organizations_tags item.
         */
        readonly post: operations["createItemsOrganizationsTags"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing organizations_tags items.
         */
        readonly delete: operations["deleteItemsOrganizationsTags"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple organizations_tags items at the same time.
         */
        readonly patch: operations["updateItemsOrganizationsTags"];
        readonly trace?: never;
    };
    readonly "/items/organizations_tags/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single organizations_tags item by unique identifier.
         */
        readonly get: operations["readSingleItemsOrganizationsTags"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing organizations_tags item.
         */
        readonly delete: operations["deleteSingleItemsOrganizationsTags"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing organizations_tags item.
         */
        readonly patch: operations["updateSingleItemsOrganizationsTags"];
        readonly trace?: never;
    };
    readonly "/items/section_notes": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the section_notes items.
         */
        readonly get: operations["readItemsSectionNotes"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new section_notes item.
         */
        readonly post: operations["createItemsSectionNotes"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing section_notes items.
         */
        readonly delete: operations["deleteItemsSectionNotes"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple section_notes items at the same time.
         */
        readonly patch: operations["updateItemsSectionNotes"];
        readonly trace?: never;
    };
    readonly "/items/section_notes/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single section_notes item by unique identifier.
         */
        readonly get: operations["readSingleItemsSectionNotes"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing section_notes item.
         */
        readonly delete: operations["deleteSingleItemsSectionNotes"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing section_notes item.
         */
        readonly patch: operations["updateSingleItemsSectionNotes"];
        readonly trace?: never;
    };
    readonly "/items/section_cover": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the section_cover items.
         */
        readonly get: operations["readItemsSectionCover"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new section_cover item.
         */
        readonly post: operations["createItemsSectionCover"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing section_cover items.
         */
        readonly delete: operations["deleteItemsSectionCover"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple section_cover items at the same time.
         */
        readonly patch: operations["updateItemsSectionCover"];
        readonly trace?: never;
    };
    readonly "/items/section_cover/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single section_cover item by unique identifier.
         */
        readonly get: operations["readSingleItemsSectionCover"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing section_cover item.
         */
        readonly delete: operations["deleteSingleItemsSectionCover"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing section_cover item.
         */
        readonly patch: operations["updateSingleItemsSectionCover"];
        readonly trace?: never;
    };
    readonly "/items/programs_sponsors": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the programs_sponsors items.
         */
        readonly get: operations["readItemsProgramsSponsors"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new programs_sponsors item.
         */
        readonly post: operations["createItemsProgramsSponsors"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing programs_sponsors items.
         */
        readonly delete: operations["deleteItemsProgramsSponsors"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple programs_sponsors items at the same time.
         */
        readonly patch: operations["updateItemsProgramsSponsors"];
        readonly trace?: never;
    };
    readonly "/items/programs_sponsors/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single programs_sponsors item by unique identifier.
         */
        readonly get: operations["readSingleItemsProgramsSponsors"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing programs_sponsors item.
         */
        readonly delete: operations["deleteSingleItemsProgramsSponsors"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing programs_sponsors item.
         */
        readonly patch: operations["updateSingleItemsProgramsSponsors"];
        readonly trace?: never;
    };
    readonly "/items/section_bios": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the section_bios items.
         */
        readonly get: operations["readItemsSectionBIOS"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new section_bios item.
         */
        readonly post: operations["createItemsSectionBIOS"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing section_bios items.
         */
        readonly delete: operations["deleteItemsSectionBIOS"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple section_bios items at the same time.
         */
        readonly patch: operations["updateItemsSectionBIOS"];
        readonly trace?: never;
    };
    readonly "/items/section_bios/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single section_bios item by unique identifier.
         */
        readonly get: operations["readSingleItemsSectionBIOS"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing section_bios item.
         */
        readonly delete: operations["deleteSingleItemsSectionBIOS"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing section_bios item.
         */
        readonly patch: operations["updateSingleItemsSectionBIOS"];
        readonly trace?: never;
    };
    readonly "/items/section_photos": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the section_photos items.
         */
        readonly get: operations["readItemsSectionPhotos"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new section_photos item.
         */
        readonly post: operations["createItemsSectionPhotos"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing section_photos items.
         */
        readonly delete: operations["deleteItemsSectionPhotos"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple section_photos items at the same time.
         */
        readonly patch: operations["updateItemsSectionPhotos"];
        readonly trace?: never;
    };
    readonly "/items/section_photos/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single section_photos item by unique identifier.
         */
        readonly get: operations["readSingleItemsSectionPhotos"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing section_photos item.
         */
        readonly delete: operations["deleteSingleItemsSectionPhotos"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing section_photos item.
         */
        readonly patch: operations["updateSingleItemsSectionPhotos"];
        readonly trace?: never;
    };
    readonly "/items/block_ad": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the block_ad items.
         */
        readonly get: operations["readItemsBlockAd"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new block_ad item.
         */
        readonly post: operations["createItemsBlockAd"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing block_ad items.
         */
        readonly delete: operations["deleteItemsBlockAd"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple block_ad items at the same time.
         */
        readonly patch: operations["updateItemsBlockAd"];
        readonly trace?: never;
    };
    readonly "/items/block_ad/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single block_ad item by unique identifier.
         */
        readonly get: operations["readSingleItemsBlockAd"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing block_ad item.
         */
        readonly delete: operations["deleteSingleItemsBlockAd"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing block_ad item.
         */
        readonly patch: operations["updateSingleItemsBlockAd"];
        readonly trace?: never;
    };
    readonly "/items/section_sponsors": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the section_sponsors items.
         */
        readonly get: operations["readItemsSectionSponsors"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new section_sponsors item.
         */
        readonly post: operations["createItemsSectionSponsors"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing section_sponsors items.
         */
        readonly delete: operations["deleteItemsSectionSponsors"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple section_sponsors items at the same time.
         */
        readonly patch: operations["updateItemsSectionSponsors"];
        readonly trace?: never;
    };
    readonly "/items/section_sponsors/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single section_sponsors item by unique identifier.
         */
        readonly get: operations["readSingleItemsSectionSponsors"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing section_sponsors item.
         */
        readonly delete: operations["deleteSingleItemsSectionSponsors"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing section_sponsors item.
         */
        readonly patch: operations["updateSingleItemsSectionSponsors"];
        readonly trace?: never;
    };
    readonly "/items/block_ad_blocks": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the block_ad_blocks items.
         */
        readonly get: operations["readItemsBlockAdBlocks"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new block_ad_blocks item.
         */
        readonly post: operations["createItemsBlockAdBlocks"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing block_ad_blocks items.
         */
        readonly delete: operations["deleteItemsBlockAdBlocks"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple block_ad_blocks items at the same time.
         */
        readonly patch: operations["updateItemsBlockAdBlocks"];
        readonly trace?: never;
    };
    readonly "/items/block_ad_blocks/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single block_ad_blocks item by unique identifier.
         */
        readonly get: operations["readSingleItemsBlockAdBlocks"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing block_ad_blocks item.
         */
        readonly delete: operations["deleteSingleItemsBlockAdBlocks"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing block_ad_blocks item.
         */
        readonly patch: operations["updateSingleItemsBlockAdBlocks"];
        readonly trace?: never;
    };
    readonly "/items/section_staff": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the section_staff items.
         */
        readonly get: operations["readItemsSectionStaff"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new section_staff item.
         */
        readonly post: operations["createItemsSectionStaff"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing section_staff items.
         */
        readonly delete: operations["deleteItemsSectionStaff"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple section_staff items at the same time.
         */
        readonly patch: operations["updateItemsSectionStaff"];
        readonly trace?: never;
    };
    readonly "/items/section_staff/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single section_staff item by unique identifier.
         */
        readonly get: operations["readSingleItemsSectionStaff"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing section_staff item.
         */
        readonly delete: operations["deleteSingleItemsSectionStaff"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing section_staff item.
         */
        readonly patch: operations["updateSingleItemsSectionStaff"];
        readonly trace?: never;
    };
    readonly "/items/section_songs": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the section_songs items.
         */
        readonly get: operations["readItemsSectionSongs"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new section_songs item.
         */
        readonly post: operations["createItemsSectionSongs"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing section_songs items.
         */
        readonly delete: operations["deleteItemsSectionSongs"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple section_songs items at the same time.
         */
        readonly patch: operations["updateItemsSectionSongs"];
        readonly trace?: never;
    };
    readonly "/items/section_songs/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single section_songs item by unique identifier.
         */
        readonly get: operations["readSingleItemsSectionSongs"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing section_songs item.
         */
        readonly delete: operations["deleteSingleItemsSectionSongs"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing section_songs item.
         */
        readonly patch: operations["updateSingleItemsSectionSongs"];
        readonly trace?: never;
    };
    readonly "/items/section_notes_blocks": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the section_notes_blocks items.
         */
        readonly get: operations["readItemsSectionNotesBlocks"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new section_notes_blocks item.
         */
        readonly post: operations["createItemsSectionNotesBlocks"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing section_notes_blocks items.
         */
        readonly delete: operations["deleteItemsSectionNotesBlocks"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple section_notes_blocks items at the same time.
         */
        readonly patch: operations["updateItemsSectionNotesBlocks"];
        readonly trace?: never;
    };
    readonly "/items/section_notes_blocks/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single section_notes_blocks item by unique identifier.
         */
        readonly get: operations["readSingleItemsSectionNotesBlocks"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing section_notes_blocks item.
         */
        readonly delete: operations["deleteSingleItemsSectionNotesBlocks"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing section_notes_blocks item.
         */
        readonly patch: operations["updateSingleItemsSectionNotesBlocks"];
        readonly trace?: never;
    };
    readonly "/items/section_credits": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the section_credits items.
         */
        readonly get: operations["readItemsSectionCredits"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new section_credits item.
         */
        readonly post: operations["createItemsSectionCredits"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing section_credits items.
         */
        readonly delete: operations["deleteItemsSectionCredits"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple section_credits items at the same time.
         */
        readonly patch: operations["updateItemsSectionCredits"];
        readonly trace?: never;
    };
    readonly "/items/section_credits/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single section_credits item by unique identifier.
         */
        readonly get: operations["readSingleItemsSectionCredits"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing section_credits item.
         */
        readonly delete: operations["deleteSingleItemsSectionCredits"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing section_credits item.
         */
        readonly patch: operations["updateSingleItemsSectionCredits"];
        readonly trace?: never;
    };
    readonly "/items/section_special_thanks": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the section_special_thanks items.
         */
        readonly get: operations["readItemsSectionSpecialThanks"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new section_special_thanks item.
         */
        readonly post: operations["createItemsSectionSpecialThanks"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing section_special_thanks items.
         */
        readonly delete: operations["deleteItemsSectionSpecialThanks"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple section_special_thanks items at the same time.
         */
        readonly patch: operations["updateItemsSectionSpecialThanks"];
        readonly trace?: never;
    };
    readonly "/items/section_special_thanks/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single section_special_thanks item by unique identifier.
         */
        readonly get: operations["readSingleItemsSectionSpecialThanks"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing section_special_thanks item.
         */
        readonly delete: operations["deleteSingleItemsSectionSpecialThanks"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing section_special_thanks item.
         */
        readonly patch: operations["updateSingleItemsSectionSpecialThanks"];
        readonly trace?: never;
    };
    readonly "/items/section_ads": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List Items
         * @description List the section_ads items.
         */
        readonly get: operations["readItemsSectionAds"];
        readonly put?: never;
        /**
         * Create an Item
         * @description Create a new section_ads item.
         */
        readonly post: operations["createItemsSectionAds"];
        /**
         * Delete Multiple Items
         * @description Delete multiple existing section_ads items.
         */
        readonly delete: operations["deleteItemsSectionAds"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update Multiple Items
         * @description Update multiple section_ads items at the same time.
         */
        readonly patch: operations["updateItemsSectionAds"];
        readonly trace?: never;
    };
    readonly "/items/section_ads/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve an Item
         * @description Retrieve a single section_ads item by unique identifier.
         */
        readonly get: operations["readSingleItemsSectionAds"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete an Item
         * @description Delete an existing section_ads item.
         */
        readonly delete: operations["deleteSingleItemsSectionAds"];
        readonly options?: never;
        readonly head?: never;
        /**
         * Update an Item
         * @description Update an existing section_ads item.
         */
        readonly patch: operations["updateSingleItemsSectionAds"];
        readonly trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        readonly Diff: {
            readonly hash?: string;
            readonly diff?: {
                readonly collections?: readonly {
                    readonly collection?: string;
                    readonly diff?: readonly Record<string, never>[];
                }[];
                readonly fields?: readonly {
                    readonly collection?: string;
                    readonly field?: string;
                    readonly diff?: readonly Record<string, never>[];
                }[];
                readonly relations?: readonly {
                    readonly collection?: string;
                    readonly field?: string;
                    readonly related_collection?: string;
                    readonly diff?: readonly Record<string, never>[];
                }[];
            };
        };
        readonly Files: {
            /**
             * @description Unique identifier for the file.
             * @example 8cbb43fe-4cdf-4991-8352-c461779cec02
             */
            readonly id?: string;
            /**
             * @description Where the file is stored. Either `local` for the local filesystem or the name of the storage adapter (for example `s3`).
             * @example local
             */
            readonly storage?: string;
            /**
             * @description Name of the file on disk. By default, Directus uses a random hash for the filename.
             * @example a88c3b72-ac58-5436-a4ec-b2858531333a.jpg
             */
            readonly filename_disk?: string;
            /**
             * @description How you want to the file to be named when it's being downloaded.
             * @example avatar.jpg
             */
            readonly filename_download?: string;
            /**
             * @description Title for the file. Is extracted from the filename on upload, but can be edited by the user.
             * @example User Avatar
             */
            readonly title?: string;
            /**
             * @description MIME type of the file.
             * @example image/jpeg
             */
            readonly type?: string;
            /** @description Virtual folder where this file resides in. */
            readonly folder?: string | null;
            /**
             * @description Who uploaded the file.
             * @example 63716273-0f29-4648-8a2a-2af2948f6f78
             */
            readonly uploaded_by?: string | components["schemas"]["Users"];
            /**
             * Format: date-time
             * @description When the file was created.
             * @example 2019-12-03T00:10:15+00:00
             */
            readonly created_on?: string;
            readonly modified_by?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly modified_on?: string;
            /**
             * @description Character set of the file.
             * @example binary
             */
            readonly charset?: string | null;
            /**
             * @description Size of the file in bytes.
             * @example 137862
             */
            readonly filesize?: number;
            /**
             * @description Width of the file in pixels. Only applies to images.
             * @example 800
             */
            readonly width?: number | null;
            /**
             * @description Height of the file in pixels. Only applies to images.
             * @example 838
             */
            readonly height?: number | null;
            /**
             * @description Duration of the file in seconds. Only applies to audio and video.
             * @example 0
             */
            readonly duration?: number | null;
            /**
             * @description Where the file was embedded from.
             * @example null
             */
            readonly embed?: string | null;
            /** @description Description for the file. */
            readonly description?: string | null;
            /** @description Where the file was created. Is automatically populated based on Exif data for images. */
            readonly location?: string | null;
            /** @description Tags for the file. Is automatically populated based on Exif data for images. */
            readonly tags?: readonly string[] | null;
            /** @description IPTC, Exif, and ICC metadata extracted from file */
            readonly metadata?: Record<string, never> | null;
            readonly focal_point_x?: number | null;
            readonly focal_point_y?: number | null;
            readonly tus_id?: string | null;
            readonly tus_data?: unknown;
            /**
             * Format: date-time
             * @description When the file was last uploaded/replaced.
             * @example 2019-12-03T00:10:15+00:00
             */
            readonly uploaded_on?: string;
        };
        readonly Folders: {
            /**
             * @description Unique identifier for the folder.
             * @example 0cf0e03d-4364-45df-b77b-ca61f61869d2
             */
            readonly id?: string;
            /**
             * @description Name of the folder.
             * @example New York
             */
            readonly name?: string;
            /**
             * @description Unique identifier of the parent folder. This allows for nested folders.
             * @example null
             */
            readonly parent?: (string | components["schemas"]["Folders"]) | null;
        };
        readonly Roles: {
            /**
             * @description Unique identifier for the role.
             * @example 2f24211d-d928-469a-aea3-3c8f53d4e426
             */
            readonly id?: string;
            /**
             * @description Name of the role.
             * @example Administrator
             */
            readonly name?: string;
            /**
             * @description The role's icon.
             * @example verified_user
             */
            readonly icon?: string;
            /**
             * @description Description of the role.
             * @example Admins have access to all managed data within the system by default
             */
            readonly description?: string | null;
            /** @description $t:field_options.directus_roles.parent_note */
            readonly parent?: (string | components["schemas"]["Roles"]) | null;
            /** @description $t:field_options.directus_roles.children_note */
            readonly children?: readonly (string | components["schemas"]["Roles"])[] | null;
            readonly policies?: unknown;
            readonly users?: readonly (string | components["schemas"]["Users"])[] | null;
        };
        readonly Schema: {
            /** @example 1 */
            readonly version?: number;
            readonly directus?: string;
            readonly vendor?: string;
            readonly collections?: readonly components["schemas"]["Collections"][];
            readonly fields?: readonly components["schemas"]["Fields"][];
            readonly relations?: readonly components["schemas"]["Relations"][];
        };
        readonly Users: {
            /**
             * @description Unique identifier for the user.
             * @example 63716273-0f29-4648-8a2a-2af2948f6f78
             */
            readonly id?: string;
            /**
             * @description First name of the user.
             * @example Admin
             */
            readonly first_name?: string;
            /**
             * @description Last name of the user.
             * @example User
             */
            readonly last_name?: string;
            /**
             * Format: email
             * @description Unique email address for the user.
             * @example admin@example.com
             */
            readonly email?: string;
            /** @description Password of the user. */
            readonly password?: string;
            /**
             * @description The user's location.
             * @example null
             */
            readonly location?: string | null;
            /**
             * @description The user's title.
             * @example null
             */
            readonly title?: string | null;
            /**
             * @description The user's description.
             * @example null
             */
            readonly description?: string | null;
            /**
             * @description The user's tags.
             * @example null
             */
            readonly tags?: readonly string[] | null;
            /**
             * @description The user's avatar.
             * @example null
             */
            readonly avatar?: (string | components["schemas"]["Files"]) | null;
            /**
             * @description The user's language used in Directus.
             * @example en-US
             */
            readonly language?: string;
            /**
             * @description The 2FA secret string that's used to generate one time passwords.
             * @example null
             */
            readonly tfa_secret?: string | null;
            /**
             * @description Status of the user.
             * @example active
             * @enum {string}
             */
            readonly status?: "active" | "invited" | "draft" | "suspended" | "deleted";
            /**
             * @description Unique identifier of the role of this user.
             * @example 2f24211d-d928-469a-aea3-3c8f53d4e426
             */
            readonly role?: string | components["schemas"]["Roles"];
            /** @description Static token for the user. */
            readonly token?: string | null;
            /**
             * Format: date-time
             * @description When this user used the API last.
             * @example 2020-05-31T14:32:37Z
             */
            readonly last_access?: string | null;
            /**
             * @description Last page that the user was on.
             * @example /my-project/settings/collections/a
             */
            readonly last_page?: string | null;
            readonly provider?: string;
            readonly external_identifier?: string | null;
            readonly auth_data?: unknown;
            readonly email_notifications?: boolean | null;
            readonly appearance?: string | null;
            readonly theme_dark?: string | null;
            readonly theme_light?: string | null;
            readonly theme_light_overrides?: unknown;
            readonly theme_dark_overrides?: unknown;
            readonly person?: (string | components["schemas"]["ItemsPeople"]) | null;
            /** @description Blog posts this user has authored. */
            readonly posts?: readonly (string | components["schemas"]["ItemsPosts"])[] | null;
            readonly policies?: unknown;
        };
        readonly Query: {
            /**
             * @description Control what fields are being returned in the object.
             * @example [
             *       "*",
             *       "*.*"
             *     ]
             */
            readonly fields?: readonly string[];
            /** @example {
             *       "<field>": {
             *         "<operator>": "<value>"
             *       }
             *     } */
            readonly filter?: Record<string, never>;
            /** @description Filter by items that contain the given search query in one of their fields. */
            readonly search?: string;
            /**
             * @description How to sort the returned items.
             * @example [
             *       "-date_created"
             *     ]
             */
            readonly sort?: readonly string[];
            /** @description Set the maximum number of items that will be returned */
            readonly limit?: number;
            /** @description How many items to skip when fetching data. */
            readonly offset?: number;
            /** @description Cursor for use in pagination. Often used in combination with limit. */
            readonly page?: number;
            /**
             * @description Deep allows you to set any of the other query parameters on a nested relational dataset.
             * @example {
             *       "related_articles": {
             *         "_limit": 3
             *       }
             *     }
             */
            readonly deep?: Record<string, never>;
        };
        readonly "x-metadata": {
            /** @description Returns the total item count of the collection you're querying. */
            readonly total_count?: number;
            /** @description Returns the item count of the collection you're querying, taking the current filter/search parameters into account. */
            readonly filter_count?: number;
        };
        readonly Activity: {
            /**
             * @description Unique identifier for the object.
             * @example 2
             */
            readonly id?: number;
            /**
             * @description Action that was performed.
             * @example update
             * @enum {string}
             */
            readonly action?: "create" | "update" | "delete" | "login";
            /** @description The user who performed this action. */
            readonly user?: (string | components["schemas"]["Users"]) | null;
            /**
             * Format: date-time
             * @description When the action happened.
             * @example 2019-12-05T22:52:09Z
             */
            readonly timestamp?: string;
            /**
             * @description The IP address of the user at the time the action took place.
             * @example 127.0.0.1
             */
            readonly ip?: string;
            /**
             * @description User agent string of the browser the user used when the action took place.
             * @example Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_1) AppleWebKit/537.36 (KHTML,like Gecko) Chrome/78.0.3904.108 Safari/537.36
             */
            readonly user_agent?: string;
            /** @description Collection identifier in which the item resides. */
            readonly collection?: string | components["schemas"]["Collections"];
            /**
             * @description Unique identifier for the item the action applied to. This is always a string, even for integer primary keys.
             * @example 328
             */
            readonly item?: string;
            /**
             * @description Origin of the request when the action took place.
             * @example https://directus.io
             */
            readonly origin?: string;
            readonly revisions?: readonly (number | components["schemas"]["Revisions"])[] | null;
        };
        readonly Permissions: {
            /**
             * @description Unique identifier for the permission.
             * @example 1
             */
            readonly id?: number;
            /**
             * @description What collection this permission applies to.
             * @example customers
             */
            readonly collection?: string;
            /**
             * @description What action this permission applies to.
             * @example create
             * @enum {string}
             */
            readonly action?: "create" | "read" | "update" | "delete";
            /** @description JSON structure containing the permissions checks for this permission. */
            readonly permissions?: Record<string, never> | null;
            /** @description JSON structure containing the validation checks for this permission. */
            readonly validation?: Record<string, never> | null;
            /** @description JSON structure containing the preset value for created/updated items. */
            readonly presets?: Record<string, never> | null;
            /** @description CSV of fields that the user is allowed to interact with. */
            readonly fields?: readonly string[] | null;
            readonly policy?: unknown;
        };
        readonly Fields: {
            readonly id?: number;
            /**
             * @description Unique name of the collection this field is in.
             * @example about_us
             */
            readonly collection?: string;
            /**
             * @description Unique name of the field. Field name is unique within the collection.
             * @example id
             */
            readonly field?: string;
            readonly special?: readonly string[] | null;
            readonly interface?: string | null;
            readonly options?: unknown;
            readonly display?: string | null;
            readonly display_options?: unknown;
            readonly readonly?: boolean;
            readonly hidden?: boolean;
            readonly sort?: number | null;
            readonly width?: string | null;
            readonly translations?: unknown;
            readonly note?: string | null;
            readonly conditions?: unknown;
            readonly required?: boolean | null;
            readonly group?: (number | components["schemas"]["Fields"]) | null;
            readonly validation?: unknown;
            readonly validation_message?: string | null;
        };
        readonly Collections: {
            /**
             * @description The collection key.
             * @example customers
             */
            readonly collection?: string;
            readonly icon?: string | null;
            readonly note?: string | null;
            readonly display_template?: string | null;
            readonly hidden?: boolean;
            readonly singleton?: boolean;
            readonly translations?: unknown;
            readonly archive_field?: string | null;
            readonly archive_app_filter?: boolean;
            readonly archive_value?: string | null;
            readonly unarchive_value?: string | null;
            readonly sort_field?: string | null;
            readonly accountability?: string | null;
            readonly color?: string | null;
            readonly item_duplication_fields?: unknown;
            readonly sort?: number | null;
            readonly group?: (string | components["schemas"]["Collections"]) | null;
            readonly collapse?: string;
            readonly preview_url?: string | null;
            readonly versioning?: boolean;
        };
        readonly Presets: {
            /**
             * @description Unique identifier for this single collection preset.
             * @example 155
             */
            readonly id?: number;
            /** @description Name for the bookmark. If this is set, the preset will be considered a bookmark. */
            readonly bookmark?: string | null;
            /**
             * @description The unique identifier of the user to whom this collection preset applies.
             * @example 63716273-0f29-4648-8a2a-2af2948f6f78
             */
            readonly user?: (string | components["schemas"]["Users"]) | null;
            /**
             * @description The unique identifier of a role in the platform. If `user` is null, this will be used to apply the collection preset or bookmark for all users in the role.
             * @example 50419801-0f30-8644-2b3c-9bc2d980d0a0
             */
            readonly role?: (string | components["schemas"]["Roles"]) | null;
            /**
             * @description What collection this collection preset is used for.
             * @example articles
             */
            readonly collection?: string | components["schemas"]["Collections"];
            /** @description Search query. */
            readonly search?: string | null;
            /**
             * @description Key of the layout that is used.
             * @example null
             */
            readonly layout?: string;
            /**
             * @description Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters.
             * @example {
             *       "cards": {
             *         "sort": "-published_on"
             *       }
             *     }
             */
            readonly layout_query?: unknown;
            /**
             * @description Options of the views. The properties in here are controlled by the layout.
             * @example {
             *       "cards": {
             *         "icon": "account_circle",
             *         "title": "{{ first_name }} {{ last_name }}",
             *         "subtitle": "{{ title }}",
             *         "size": 3
             *       }
             *     }
             */
            readonly layout_options?: unknown;
            readonly refresh_interval?: number | null;
            readonly filter?: unknown;
            readonly icon?: string | null;
            readonly color?: string | null;
        };
        readonly Revisions: {
            /**
             * @description Unique identifier for the revision.
             * @example 1
             */
            readonly id?: number;
            /**
             * @description Unique identifier for the activity record.
             * @example 2
             */
            readonly activity?: number | components["schemas"]["Activity"];
            /**
             * @description Collection of the updated item.
             * @example articles
             */
            readonly collection?: string | components["schemas"]["Collections"];
            /**
             * @description Primary key of updated item.
             * @example 168
             */
            readonly item?: string;
            /**
             * @description Copy of item state at time of update.
             * @example {
             *       "author": 1,
             *       "body": "This is my first post",
             *       "featured_image": 15,
             *       "id": "168",
             *       "title": "Hello, World!"
             *     }
             */
            readonly data?: Record<string, never> | null;
            /**
             * @description Changes between the previous and the current revision.
             * @example {
             *       "title": "Hello, World!"
             *     }
             */
            readonly delta?: Record<string, never>;
            /**
             * @description If the current item was updated relationally, this is the id of the parent revision record
             * @example null
             */
            readonly parent?: number | null;
            /**
             * @description Associated version of this revision.
             * @example draft
             */
            readonly version?: string | components["schemas"]["Versions"];
        };
        readonly Relations: {
            /**
             * @description Unique identifier for the relation.
             * @example 1
             */
            readonly id?: number;
            /**
             * @description Collection that has the field that holds the foreign key.
             * @example directus_activity
             */
            readonly many_collection?: string;
            /**
             * @description Foreign key. Field that holds the primary key of the related collection.
             * @example user
             */
            readonly many_field?: string;
            /**
             * @description Collection on the _one_ side of the relationship.
             * @example directus_users
             */
            readonly one_collection?: string;
            /**
             * @description Alias column that serves as the _one_ side of the relationship.
             * @example null
             */
            readonly one_field?: string | null;
            readonly one_collection_field?: string | null;
            readonly one_allowed_collections?: readonly string[] | null;
            /**
             * @description Field on the junction table that holds the many field of the related relation.
             * @example null
             */
            readonly junction_field?: string | null;
            readonly sort_field?: string | null;
            readonly one_deselect_action?: string;
        };
        readonly Flows: {
            /**
             * @description Unique identifier for the flow.
             * @example 2f24211d-d928-469a-aea3-3c8f53d4e426
             */
            readonly id?: string;
            /**
             * @description The name of the flow.
             * @example Update Articles Flow
             */
            readonly name?: string;
            /**
             * @description Icon displayed in the Admin App for the flow.
             * @example bolt
             */
            readonly icon?: string;
            /**
             * @description Color of the icon displayed in the Admin App for the flow.
             * @example #112233
             */
            readonly color?: string | null;
            readonly description?: string | null;
            /**
             * @description Current status of the flow.
             * @default active
             * @example active
             * @enum {string}
             */
            readonly status: "active" | "inactive";
            /**
             * @description Type of trigger for the flow. One of `hook`, `webhook`, `operation`, `schedule`, `manual`.
             * @example manual
             */
            readonly trigger?: string;
            /**
             * @description The permission used during the flow. One of `$public`, `$trigger`, `$full`, or UUID of a role.
             * @example $trigger
             */
            readonly accountability?: string;
            /**
             * @description Options of the selected trigger for the flow.
             * @example null
             */
            readonly options?: Record<string, never> | null;
            /**
             * @description UUID of the operation connected to the trigger in the flow.
             * @example 92e82998-e421-412f-a513-13701e83e4ce
             */
            readonly operation?: string | components["schemas"]["Operations"];
            /**
             * Format: date-time
             * @description Timestamp in ISO8601 when the flow was created.
             * @example 2022-05-11T13:14:52Z
             */
            readonly date_created?: string | null;
            /**
             * @description The user who created the flow.
             * @example 63716273-0f29-4648-8a2a-2af2948f6f78
             */
            readonly user_created?: string | components["schemas"]["Users"];
            readonly operations?: readonly (string | components["schemas"]["Operations"])[] | null;
        };
        readonly Operations: {
            /**
             * @description Unique identifier for the operation.
             * @example 2f24211d-d928-469a-aea3-3c8f53d4e426
             */
            readonly id?: string;
            /**
             * @description The name of the operation.
             * @example Log to Console
             */
            readonly name?: string;
            /**
             * @description Key for the operation. Must be unique within a given flow.
             * @example log_console
             */
            readonly key?: string;
            /**
             * @description Type of operation. One of `log`, `mail`, `notification`, `create`, `read`, `request`, `sleep`, `transform`, `trigger`, `condition`, or any type of custom operation extensions.
             * @example log
             */
            readonly type?: string;
            /**
             * @description Position of the operation on the X axis within the flow workspace.
             * @example 12
             */
            readonly position_x?: number;
            /**
             * @description Position of the operation on the Y axis within the flow workspace.
             * @example 12
             */
            readonly position_y?: number;
            /**
             * @description Options depending on the type of the operation.
             * @example null
             */
            readonly options?: Record<string, never> | null;
            /**
             * @description The operation triggered when the current operation succeeds (or `then` logic of a condition operation).
             * @example 63716273-0f29-4648-8a2a-2af2948f6f78
             */
            readonly resolve?: string | components["schemas"]["Operations"];
            /**
             * @description The operation triggered when the current operation fails (or `otherwise` logic of a condition operation).
             * @example 63716273-0f29-4648-8a2a-2af2948f6f78
             */
            readonly reject?: string | components["schemas"]["Operations"];
            readonly flow?: string | components["schemas"]["Flows"];
            /**
             * Format: date-time
             * @description Timestamp in ISO8601 when the operation was created.
             * @example 2022-05-11T13:14:52Z
             */
            readonly date_created?: string | null;
            /**
             * @description The user who created the operation.
             * @example 63716273-0f29-4648-8a2a-2af2948f6f78
             */
            readonly user_created?: string | components["schemas"]["Users"];
        };
        readonly Webhooks: {
            /**
             * @description The index of the webhook.
             * @example 1
             */
            readonly id?: number;
            /**
             * @description The name of the webhook.
             * @example create articles
             */
            readonly name?: string;
            /**
             * @description Method used in the webhook.
             * @example POST
             */
            readonly method?: string;
            /**
             * @description The url of the webhook.
             * @example null
             */
            readonly url?: string | null;
            /**
             * @description The status of the webhook.
             * @example inactive
             */
            readonly status?: string;
            /**
             * @description If yes, send the content of what was done
             * @example true
             */
            readonly data?: boolean;
            /**
             * @description The actions that triggers this webhook.
             * @example null
             */
            readonly actions?: readonly string[] | null;
            readonly collections?: readonly string[];
            readonly headers?: unknown;
            readonly was_active_before_deprecation?: boolean;
            readonly migrated_flow?: (string | components["schemas"]["Flows"]) | null;
        };
        readonly Extensions: {
            readonly enabled?: boolean;
            /** Format: uuid */
            readonly id?: string;
            readonly folder?: string;
            readonly source?: string;
            /**
             * @description Name of the bundle the extension is in.
             * @example directus-extension-my-bundle
             */
            readonly bundle?: string | null;
        };
        readonly Settings: {
            /**
             * @description Unique identifier for the setting.
             * @example 1
             */
            readonly id?: number;
            /**
             * @description The name of the project.
             * @example Directus
             */
            readonly project_name?: string;
            /**
             * @description The url of the project.
             * @example null
             */
            readonly project_url?: string | null;
            /**
             * @description The brand color of the project.
             * @example null
             */
            readonly project_color?: string | null;
            /**
             * @description The logo of the project.
             * @example null
             */
            readonly project_logo?: string | null;
            /**
             * @description The foreground of the project.
             * @example null
             */
            readonly public_foreground?: string | null;
            /**
             * @description The background of the project.
             * @example null
             */
            readonly public_background?: {
                readonly id?: string;
                readonly type?: string;
            } | null;
            /**
             * @description Note rendered on the public pages of the app.
             * @example null
             */
            readonly public_note?: string | null;
            /**
             * @description Allowed authentication login attempts before the user's status is set to blocked.
             * @example 25
             */
            readonly auth_login_attempts?: number;
            /** @description Authentication password policy. */
            readonly auth_password_policy?: string | null;
            /**
             * @description What transformations are allowed in the assets endpoint.
             * @example all
             * @enum {string|null}
             */
            readonly storage_asset_transform?: "all" | "none" | "presets" | null;
            /**
             * @description Array of allowed
             * @example null
             */
            readonly storage_asset_presets?: readonly {
                /** @description Key for the asset. Used in the assets endpoint. */
                readonly key?: string;
                /**
                 * @description Whether to crop the thumbnail to match the size, or maintain the aspect ratio.
                 * @enum {string}
                 */
                readonly fit?: "cover" | "contain" | "inside" | "outside";
                /** @description Width of the thumbnail. */
                readonly width?: number;
                /** @description Height of the thumbnail. */
                readonly height?: number;
                /** @description No image upscale */
                readonly withoutEnlargement?: boolean;
                /** @description Quality of the compression used. */
                readonly quality?: number;
                /**
                 * @description Reformat output image
                 * @enum {string}
                 */
                readonly format?: "" | "jpeg" | "png" | "webp" | "tiff" | "avif";
                /** @description Additional transformations to apply */
                readonly transforms?: readonly {
                    /** @description The Sharp method name */
                    readonly method?: string;
                    /** @description A list of arguments to pass to the Sharp method */
                    readonly arguments?: readonly {
                        /** @description A JSON representation of the argument value */
                        readonly argument?: string;
                    }[] | null;
                }[] | null;
            }[] | null;
            readonly custom_css?: string | null;
            /**
             * Format: uuid
             * @description Default folder to place files
             */
            readonly storage_default_folder?: string;
            readonly basemaps?: unknown;
            readonly mapbox_key?: string | null;
            readonly module_bar?: unknown;
            readonly project_descriptor?: string | null;
            readonly default_language?: string;
            readonly custom_aspect_ratios?: unknown;
            /** @description $t:field_options.directus_settings.project_favicon_note */
            readonly public_favicon?: (string | components["schemas"]["Files"]) | null;
            readonly default_appearance?: string;
            readonly default_theme_light?: string | null;
            readonly theme_light_overrides?: unknown;
            readonly default_theme_dark?: string | null;
            readonly theme_dark_overrides?: unknown;
            readonly report_error_url?: string | null;
            readonly report_bug_url?: string | null;
            readonly report_feature_url?: string | null;
            /** @description $t:fields.directus_settings.public_registration_note */
            readonly public_registration?: boolean;
            /** @description $t:fields.directus_settings.public_registration_verify_email_note */
            readonly public_registration_verify_email?: boolean;
            /** @description $t:fields.directus_settings.public_registration_role_note */
            readonly public_registration_role?: (string | components["schemas"]["Roles"]) | null;
            /** @description $t:fields.directus_settings.public_registration_email_filter_note */
            readonly public_registration_email_filter?: unknown;
            readonly visual_editor_urls?: unknown;
            readonly accepted_terms?: boolean | null;
            /** Format: uuid */
            readonly project_id?: string | null;
            /** @description Settings for the Command Palette Module. */
            readonly command_palette_settings?: unknown;
        };
        readonly Versions: {
            /**
             * @description Primary key of the Content Version.
             * @example 63716273-0f29-4648-8a2a-2af2948f6f78
             */
            readonly id?: string;
            /**
             * @description Key of the Content Version, used as the value for the "version" query parameter.
             * @example draft
             */
            readonly key?: string;
            /**
             * @description Descriptive name of the Content Version.
             * @example My Draft
             */
            readonly name?: string;
            /**
             * @description Name of the collection the Content Version is created on.
             * @example articles
             */
            readonly collection?: string | components["schemas"]["Collections"];
            /**
             * @description The item the Content Version is created on.
             * @example 168
             */
            readonly item?: string;
            readonly hash?: string | null;
            /**
             * Format: date-time
             * @description When the Content Version was created.
             * @example 2022-05-11T13:14:52Z
             */
            readonly date_created?: string | null;
            /**
             * Format: date-time
             * @description When the Content Version was last updated.
             * @example 2022-05-11T13:14:53Z
             */
            readonly date_updated?: string | null;
            /**
             * @description User that created the Content Version.
             * @example 63716273-0f29-4648-8a2a-2af2948f6f78
             */
            readonly user_created?: string | components["schemas"]["Users"];
            /**
             * @description User that last updated the Content Version.
             * @example 63716273-0f29-4648-8a2a-2af2948f6f78
             */
            readonly user_updated?: string | components["schemas"]["Users"];
            /**
             * @description The current changes compared to the main version of the item.
             * @example {
             *       "my_field": "Updated Value"
             *     }
             */
            readonly delta?: Record<string, never>;
        };
        readonly Comments: {
            /**
             * @description Unique identifier for this single collection preset.
             * @example 81dfa7e0-56d2-471f-b96a-1cf8a62bdf28
             */
            readonly id?: string;
            /**
             * @description The collection of the item the Comment is created for.
             * @example articles
             */
            readonly collection?: string | components["schemas"]["Collections"];
            /**
             * @description The item the Comment is created for.
             * @example 123
             */
            readonly item?: string;
            /**
             * @description User comment. This will store the comments that show up in the right sidebar of the item edit page in the admin app.
             * @example This is a comment
             */
            readonly comment?: string;
            /**
             * Format: date-time
             * @description When the Comment was created.
             * @example 2024-01-23T12:34:56Z
             */
            readonly date_created?: string | null;
            /**
             * Format: date-time
             * @description When the Comment was updated.
             * @example 2024-01-23T12:34:56Z
             */
            readonly date_updated?: string | null;
            /**
             * @description User that created the Comment.
             * @example 81dfa7e0-56d2-471f-b96a-1cf8a62bdf28
             */
            readonly user_created?: string | components["schemas"]["Users"];
            /**
             * @description User that updated the Comment.
             * @example 81dfa7e0-56d2-471f-b96a-1cf8a62bdf28
             */
            readonly user_updated?: string | components["schemas"]["Users"];
        };
        readonly ItemsBlockButton: {
            /** Format: uuid */
            readonly id: string;
            readonly sort?: number | null;
            /** @description What type of link is this? Page and Post allow you to link to internal content. URL is for external content. Group can contain other menu items. */
            readonly type?: string | null;
            /** @description The internal page to link to. */
            readonly page?: (string | components["schemas"]["ItemsPages"]) | null;
            /** @description The internal post to link to. */
            readonly post?: (string | components["schemas"]["ItemsPosts"]) | null;
            /** @description Text to include on the button. */
            readonly label?: string | null;
            /** @description What type of button */
            readonly variant?: string | null;
            /** @description The id of the Button Group this button belongs to. */
            readonly button_group?: (string | components["schemas"]["ItemsBlockButtonGroup"]) | null;
            /** @description The URL to link to. Could be relative (ie `/my-page`) or a full external URL (ie `https://docs.directus.io`) */
            readonly url?: string | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
        };
        readonly ItemsBlockPosts: {
            /** Format: uuid */
            readonly id: string;
            /** @description Larger main headline for this page section. */
            readonly headline?: string | null;
            /** @description The collection of content to fetch and display on the page within this block. */
            readonly collection?: string | null;
            /** @description Smaller copy shown above the headline to label a section or add extra context. */
            readonly tagline?: string | null;
            readonly limit?: number | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
        };
        readonly ItemsBlockButtonGroup: {
            /** Format: uuid */
            readonly id: string;
            readonly sort?: number | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** @description Add individual buttons to the button group. */
            readonly buttons?: readonly (string | components["schemas"]["ItemsBlockButton"])[] | null;
        };
        readonly ItemsBlockHero: {
            /** @description Larger main headline for this page section. */
            readonly headline?: string | null;
            /** Format: uuid */
            readonly id: string;
            /** @description Featured image in the hero. */
            readonly image?: (string | components["schemas"]["Files"]) | null;
            /** @description Action buttons that show below headline and description. */
            readonly button_group?: (string | components["schemas"]["ItemsBlockButtonGroup"]) | null;
            /** @description Supporting copy that shows below the headline. */
            readonly description?: string | null;
            /** @description Smaller copy shown above the headline to label a section or add extra context. */
            readonly tagline?: string | null;
            /** @description The layout for the component. You can set the image to display left, right, or in the center of page.. */
            readonly layout?: string | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
        };
        readonly ItemsBlockGalleryItems: {
            /** Format: uuid */
            readonly id: string;
            /** @description The id of the gallery block this item belongs to. */
            readonly block_gallery?: (string | components["schemas"]["ItemsBlockGallery"]) | null;
            /** @description The id of the file included in the gallery. */
            readonly directus_file?: (string | components["schemas"]["Files"]) | null;
            readonly sort?: number | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
        };
        readonly ItemsBlockGallery: {
            /** @description Larger main headline for this page section. */
            readonly headline?: string | null;
            /** Format: uuid */
            readonly id: string;
            /** @description Smaller copy shown above the headline to label a section or add extra context. */
            readonly tagline?: string | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** @description Images to include in the image gallery. */
            readonly items?: readonly (string | components["schemas"]["ItemsBlockGalleryItems"])[] | null;
        };
        readonly ItemsBlockForm: {
            /** Format: uuid */
            readonly id: string;
            /** @description Form to show within block */
            readonly form?: (string | components["schemas"]["ItemsForms"]) | null;
            /** @description Larger main headline for this page section. */
            readonly headline?: string | null;
            /** @description Smaller copy shown above the headline to label a section or add extra context. */
            readonly tagline?: string | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
        };
        readonly ItemsGlobals: {
            /** @description Site summary for search results. */
            readonly description?: string | null;
            /** Format: uuid */
            readonly id: string;
            /** @description Social media profile URLs */
            readonly social_links?: unknown;
            /** @description Short phrase describing the site. */
            readonly tagline?: string | null;
            /** @description Main site title */
            readonly title?: string | null;
            /** @description Public URL for the website */
            readonly url?: string | null;
            /** @description Small icon for browser tabs. 1:1 ratio. No larger than 512px × 512px. */
            readonly favicon?: (string | components["schemas"]["Files"]) | null;
            /** @description Main logo shown on the site (for light mode). */
            readonly logo?: (string | components["schemas"]["Files"]) | null;
            /** @description Secret OpenAI API key. Don't share with anyone outside your team. */
            readonly openai_api_key?: string | null;
            /** @description The public URL for this Directus instance. Used in Flows. */
            readonly directus_url?: string | null;
            /** @description Main logo shown on the site (for dark mode). */
            readonly logo_dark_mode?: (string | components["schemas"]["Files"]) | null;
            /** @description Accent color for the website (used on buttons, links, etc). */
            readonly accent_color?: string | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
        };
        readonly ItemsBlockPricing: {
            /** Format: uuid */
            readonly id: string;
            /** @description Larger main headline for this page section. */
            readonly headline?: string | null;
            /** @description Smaller copy shown above the headline to label a section or add extra context. */
            readonly tagline?: string | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** @description The individual pricing cards to display. */
            readonly pricing_cards?: readonly (string | components["schemas"]["ItemsBlockPricingCards"])[] | null;
        };
        readonly ItemsFormSubmissionValues: {
            /** Format: uuid */
            readonly id: string;
            /** @description Parent form submission for this value. */
            readonly form_submission?: (string | components["schemas"]["ItemsFormSubmissions"]) | null;
            readonly field?: (string | components["schemas"]["ItemsFormFields"]) | null;
            /** @description The data entered by the user for this specific field in the form submission. */
            readonly value?: string | null;
            readonly sort?: number | null;
            readonly file?: (string | components["schemas"]["Files"]) | null;
            /**
             * Format: timestamp
             * @description Form submission date and time.
             */
            readonly timestamp?: string | null;
        };
        readonly ItemsBlockPricingCards: {
            /** Format: uuid */
            readonly id: string;
            /** @description Name of the pricing plan. Shown at the top of the card. */
            readonly title?: string | null;
            /** @description Short, one sentence description of the pricing plan and who it is for. */
            readonly description?: string | null;
            /** @description Price and term for the pricing plan. (ie `$199/mo`) */
            readonly price?: string | null;
            /** @description Badge that displays at the top of the pricing plan card to add helpful context. */
            readonly badge?: string | null;
            /** @description Short list of features included in this plan. Press `Enter` to add another item to the list. */
            readonly features?: unknown;
            /** @description The action button / link shown at the bottom of the pricing card. */
            readonly button?: (string | components["schemas"]["ItemsBlockButton"]) | null;
            /** @description The id of the pricing block this card belongs to. */
            readonly pricing?: (string | components["schemas"]["ItemsBlockPricing"]) | null;
            /** @description Add highlighted border around the pricing plan to make it stand out. */
            readonly is_highlighted?: boolean | null;
            readonly sort?: number | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
        };
        readonly ItemsFormSubmissions: {
            /**
             * Format: uuid
             * @description Unique ID for this specific form submission
             */
            readonly id: string;
            /**
             * Format: timestamp
             * @description Form submission date and time.
             */
            readonly timestamp?: string | null;
            /** @description Associated form for this submission. */
            readonly form?: (string | components["schemas"]["ItemsForms"]) | null;
            /** @description Submitted field responses */
            readonly values?: readonly (string | components["schemas"]["ItemsFormSubmissionValues"])[] | null;
        };
        readonly ItemsFormFields: {
            /** Format: uuid */
            readonly id: string;
            /** @description Unique field identifier, not shown to users (lowercase, hyphenated) */
            readonly name?: string | null;
            /** @description Input type for the field */
            readonly type?: string | null;
            /** @description Text label shown to form users. */
            readonly label?: string | null;
            /** @description Default text shown in empty input. */
            readonly placeholder?: string | null;
            /** @description Additional instructions shown below the input */
            readonly help?: string | null;
            /** @description Available rules: `email`, `url`, `min:5`, `max:20`, `length:10`. Combine with pipes example: `email|max:255` */
            readonly validation?: string | null;
            /** @description Field width on the form */
            readonly width?: string | null;
            /** @description Options for radio or select inputs */
            readonly choices?: unknown;
            /** @description Parent form this field belongs to. */
            readonly form?: (string | components["schemas"]["ItemsForms"]) | null;
            readonly sort?: number | null;
            /** @description Make this field mandatory to complete. */
            readonly required?: boolean | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
        };
        readonly ItemsNavigationItems: {
            /** Format: uuid */
            readonly id: string;
            /** @description Navigation menu that the individual links belong to. */
            readonly navigation?: (string | components["schemas"]["ItemsNavigation"]) | null;
            /** @description The internal page to link to. */
            readonly page?: (string | components["schemas"]["ItemsPages"]) | null;
            /** @description The parent navigation item. */
            readonly parent?: (string | components["schemas"]["ItemsNavigationItems"]) | null;
            readonly sort?: number | null;
            /** @description Label shown to the user for the menu item. */
            readonly title?: string | null;
            /** @description What type of link is this? Page and Post allow you to link to internal content. URL is for external content. Group can contain other menu items. */
            readonly type?: string | null;
            /** @description The URL to link to. Could be relative (ie `/my-page`) or a full external URL (ie `https://docs.directus.io`) */
            readonly url?: string | null;
            /** @description The internal post to link to. */
            readonly post?: (string | components["schemas"]["ItemsPosts"]) | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** @description Add child menu items within the group. */
            readonly children?: readonly (string | components["schemas"]["ItemsNavigationItems"])[] | null;
        };
        readonly ItemsPageBlocks: {
            /** Format: uuid */
            readonly id: string;
            readonly sort?: number | null;
            /** @description The id of the page that this block belongs to. */
            readonly page?: (string | components["schemas"]["ItemsPages"]) | null;
            /** @description The data for the block. */
            readonly item?: readonly (string | components["schemas"]["ItemsBlockPosts"] | components["schemas"]["ItemsBlockHero"] | components["schemas"]["ItemsBlockGallery"] | components["schemas"]["ItemsBlockForm"] | components["schemas"]["ItemsBlockPricing"] | components["schemas"]["ItemsBlockRichtext"])[] | null;
            /** @description The collection (type of block). */
            readonly collection?: string | null;
            /** @description Temporarily hide this block on the website without having to remove it from your page. */
            readonly hide_block?: boolean | null;
            /** @description Background color for the block to create contrast. Does not control dark or light mode for the entire site. */
            readonly background?: string | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
        };
        readonly ItemsBlockRichtext: {
            /** @description Rich text content for this block. */
            readonly content?: string | null;
            /** @description Larger main headline for this page section. */
            readonly headline?: string | null;
            /** Format: uuid */
            readonly id: string;
            /** @description Controls how the content block is positioned on the page. Choose "Left" to align the block against the left margin or "Center" to position the block in the middle of the page. This setting affects the entire content block's placement, not the text alignment within it. */
            readonly alignment?: string | null;
            /** @description Smaller copy shown above the headline to label a section or add extra context. */
            readonly tagline?: string | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
        };
        readonly ItemsForms: {
            /** Format: uuid */
            readonly id: string;
            /** @description Action after successful submission. */
            readonly on_success?: string | null;
            readonly sort?: number | null;
            /** @description Text shown on submit button. */
            readonly submit_label?: string | null;
            /** @description Message shown after successful submission. */
            readonly success_message?: string | null;
            /** @description Form name (for internal reference). */
            readonly title?: string | null;
            /** @description Destination URL after successful submission. */
            readonly success_redirect_url?: string | null;
            /** @description Show or hide this form from the site. */
            readonly is_active?: boolean | null;
            /** @description Setup email notifications when forms are submitted. */
            readonly emails?: unknown;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** @description Form structure and input fields */
            readonly fields?: readonly (string | components["schemas"]["ItemsFormFields"])[] | null;
            /** @description Received form responses. */
            readonly submissions?: readonly (string | components["schemas"]["ItemsFormSubmissions"])[] | null;
        };
        readonly ItemsNavigation: {
            /** @description Unique identifier for this menu. Can't be edited after creation. */
            readonly id: string;
            /** @description What is the name of this menu? Only used internally. */
            readonly title?: string | null;
            /** @description Show or hide this menu from the site. */
            readonly is_active?: boolean | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** @description Links within the menu. */
            readonly items?: readonly (string | components["schemas"]["ItemsNavigationItems"])[] | null;
        };
        readonly ItemsRedirects: {
            /** Format: uuid */
            readonly id: string;
            readonly response_code?: string | null;
            /** @description Old URL has to be relative to the site (ie `/blog` or `/news`). It cannot be a full url like (https://example.com/blog) */
            readonly url_from?: string | null;
            /** @description The URL you're redirecting to. This can be a relative url (/resources/matt-is-cool) or a full url (https://example.com/blog). */
            readonly url_to?: string | null;
            /** @description Short explanation of why the redirect was created. */
            readonly note?: string | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
        };
        readonly ItemsPosts: {
            /** @description Rich text content of your blog post. */
            readonly content?: string | null;
            /** Format: uuid */
            readonly id: string;
            /** @description Featured image for this post. Used in cards linking to the post and in the post detail page. */
            readonly image?: (string | components["schemas"]["Files"]) | null;
            /** @description Unique URL for this post (e.g., `yoursite.com/posts/{{your-slug}}`) */
            readonly slug?: string | null;
            readonly sort?: number | null;
            /** @description Is this post published? */
            readonly status?: string;
            /** @description Title of the blog post (used in page title and meta tags) */
            readonly title?: string | null;
            /** @description Short summary of the blog post to entice readers. */
            readonly description?: string | null;
            /** @description Select the team member who wrote this post */
            readonly author?: (string | components["schemas"]["Users"]) | null;
            /**
             * Format: timestamp
             * @description Publish now or schedule for later.
             */
            readonly published_at?: string | null;
            readonly seo?: unknown;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
        };
        readonly ItemsPages: {
            /** Format: uuid */
            readonly id: string;
            readonly sort?: number | null;
            /** @description The title of this page. */
            readonly title?: string | null;
            /** @description Unique URL for this page (start with `/`, can have multiple segments `/about/me`)). */
            readonly permalink?: string | null;
            /** @description Is this page published? */
            readonly status?: string;
            /**
             * Format: timestamp
             * @description Publish now or schedule for later.
             */
            readonly published_at?: string | null;
            readonly seo?: unknown;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** @description Create and arrange different content blocks (like text, images, or videos) to build your page. */
            readonly blocks?: readonly (string | components["schemas"]["ItemsPageBlocks"])[] | null;
        };
        readonly ItemsRoles: {
            /** Format: uuid */
            readonly id: string;
            readonly status?: string;
            readonly sort?: number | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            /** @description Role name (e.g. 'Harold Hill', 'Director', 'Stage Manager') */
            readonly name?: string | null;
            /** @description Type of role */
            readonly type?: string | null;
            /** @description Is this a global role that can be used across multiple shows? */
            readonly is_global?: boolean | null;
            /** @description Order in which this role appears in credits (1, 2, 3, etc.) */
            readonly billing_order?: number | null;
            readonly show?: (string | components["schemas"]["ItemsShows"]) | null;
        };
        readonly ItemsPeople: {
            /** Format: uuid */
            readonly id: string;
            readonly sort?: number | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            /** @description Full legal name */
            readonly full_name?: string | null;
            /** @description How you'd like to be credited publicly */
            readonly stage_name?: string | null;
            /**
             * Format: uuid
             * @description Professional headshot photo
             */
            readonly headshot?: string | null;
            /** @description Default bio text used across productions (can be overridden per production) */
            readonly default_bio?: string | null;
            /** @description Personal website URL */
            readonly website?: string | null;
            readonly pronouns?: (string | components["schemas"]["ItemsPronouns"]) | null;
            /** @description Instagram handle (without @) */
            readonly instagram?: string | null;
            /** @description X/Twitter handle (without @) */
            readonly twitter_x?: string | null;
            /** @description LinkedIn profile URL or username */
            readonly linkedin?: string | null;
            /** @description TikTok handle (without @) */
            readonly tiktok?: string | null;
            readonly user?: readonly (string | components["schemas"]["Users"])[] | null;
            readonly programs?: readonly (number | components["schemas"]["ItemsProgramsPeople"])[] | null;
            readonly productions?: readonly (number | components["schemas"]["ItemsProductionsPeople"])[] | null;
            readonly songs?: readonly (number | components["schemas"]["ItemsSongsPeople"])[] | null;
            readonly shows?: readonly (number | components["schemas"]["ItemsShowsPeople"])[] | null;
        };
        readonly ItemsShows: {
            /** Format: uuid */
            readonly id: string;
            readonly status?: string;
            readonly sort?: number | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            readonly title?: string | null;
            /** @description Synopsis or description of the show */
            readonly description?: string | null;
            /** @description URL-friendly version of title */
            readonly slug?: string | null;
            readonly roles?: readonly (string | components["schemas"]["ItemsRoles"])[] | null;
            readonly productions?: readonly (number | components["schemas"]["ItemsProductionsShows"])[] | null;
            readonly songs?: readonly (number | components["schemas"]["ItemsShowsSongs"])[] | null;
            readonly credits?: readonly (number | components["schemas"]["ItemsShowsPeople"])[] | null;
        };
        readonly ItemsPrograms: {
            /** Format: uuid */
            readonly id: string;
            readonly status?: string;
            readonly sort?: number | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            /** @description Program title */
            readonly title?: string | null;
            /** @description URL-friendly version of title */
            readonly slug?: string | null;
            /**
             * Format: date
             * @description When this program was published
             */
            readonly published_date?: string | null;
            readonly production?: (string | components["schemas"]["ItemsProductions"]) | null;
            readonly sections?: readonly (number | components["schemas"]["ItemsProgramsSections"])[] | null;
            readonly songs?: readonly (number | components["schemas"]["ItemsProgramsSongs"])[] | null;
            readonly events?: readonly (number | components["schemas"]["ItemsProgramsEvents"])[] | null;
            readonly festival?: readonly (number | components["schemas"]["ItemsFestivalsPrograms"])[] | null;
            readonly credits?: readonly (number | components["schemas"]["ItemsProgramsPeople"])[] | null;
            readonly sponsors?: readonly (number | components["schemas"]["ItemsProgramsSponsors"])[] | null;
        };
        readonly ItemsProductions: {
            /** Format: uuid */
            readonly id: string;
            readonly status?: string;
            readonly sort?: number | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            /** @description Production title (e.g. 'Hamlet - 2024 Revival') */
            readonly title?: string | null;
            /** @description URL-friendly version of title */
            readonly slug?: string | null;
            /**
             * Format: date
             * @description Opening night date
             */
            readonly opening_date?: string | null;
            /**
             * Format: date
             * @description Closing night date
             */
            readonly closing_date?: string | null;
            /** @description Venue name where production is performed */
            readonly venue?: string | null;
            /** @description Production-specific description or notes */
            readonly description?: string | null;
            readonly festivals?: readonly (number | components["schemas"]["ItemsFestivalsProductions"])[] | null;
            readonly organizations?: readonly (number | components["schemas"]["ItemsProductionsOrganizations"])[] | null;
            readonly show?: readonly (number | components["schemas"]["ItemsProductionsShows"])[] | null;
            readonly programs?: readonly (string | components["schemas"]["ItemsPrograms"])[] | null;
            readonly credits?: readonly (number | components["schemas"]["ItemsProductionsPeople"])[] | null;
        };
        readonly ItemsCities: {
            /** Format: uuid */
            readonly id: string;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            /** @description City name */
            readonly name?: string | null;
            /** @description Canadian province/territory */
            readonly province?: string | null;
            /** @description Country for this city */
            readonly country?: string | null;
        };
        readonly ItemsOrganizations: {
            /** Format: uuid */
            readonly id: string;
            readonly status?: string;
            readonly sort?: number | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            /** @description Organization name */
            readonly name?: string | null;
            /** @description Organization website URL */
            readonly website?: string | null;
            /** @description Organization's tax/charity status */
            readonly charity_status?: string | null;
            readonly logo?: (string | components["schemas"]["Files"]) | null;
            readonly organization_notes?: string | null;
            readonly is_active?: boolean | null;
            readonly annual_revenue?: string | null;
            readonly number_of_employees?: string | null;
            readonly festivals?: readonly (number | components["schemas"]["ItemsFestivalsOrganizations"])[] | null;
            readonly productions?: readonly (number | components["schemas"]["ItemsProductionsOrganizations"])[] | null;
            readonly tags?: readonly (number | components["schemas"]["ItemsOrganizationsTags"])[] | null;
            readonly sponsoring?: readonly (number | components["schemas"]["ItemsProgramsSponsors"])[] | null;
        };
        readonly ItemsPronouns: {
            /** Format: uuid */
            readonly id: string;
            readonly sort?: number | null;
            /** @description Display label (e.g., 'She/Her', 'They/Them', 'He/Him') */
            readonly label?: string | null;
            /** @description Subject pronoun (e.g., 'she', 'they', 'he') */
            readonly subject?: string | null;
            /** @description Object pronoun (e.g., 'her', 'them', 'him') */
            readonly object?: string | null;
            /** @description Possessive pronoun (e.g., 'her', 'their', 'his') */
            readonly possessive?: string | null;
        };
        readonly ItemsProductionsOrganizations: {
            readonly id?: number;
            readonly productions_id?: (string | components["schemas"]["ItemsProductions"]) | null;
            readonly organizations_id?: (string | components["schemas"]["ItemsOrganizations"]) | null;
            readonly sort?: number | null;
        };
        readonly ItemsShowsPeople: {
            readonly id?: number;
            readonly sort?: number | null;
            readonly shows_id?: (string | components["schemas"]["ItemsShows"]) | null;
            readonly people_id?: (string | components["schemas"]["ItemsPeople"]) | null;
            readonly role?: (string | components["schemas"]["ItemsRoles"]) | null;
        };
        readonly ItemsProductionsShows: {
            readonly id?: number;
            readonly productions_id?: (string | components["schemas"]["ItemsProductions"]) | null;
            readonly shows_id?: (string | components["schemas"]["ItemsShows"]) | null;
            readonly sort?: number | null;
        };
        readonly ItemsAddresses: {
            /** Format: uuid */
            readonly id: string;
            readonly sort?: number | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            /** @description Street number and name */
            readonly street_address?: string | null;
            /** @description Canadian postal code (A1A 1A1) */
            readonly postal_code?: string | null;
            readonly city?: (string | components["schemas"]["ItemsCities"]) | null;
            /** @description Apartment, suite, unit, building, floor, etc. (optional) */
            readonly line_2?: string | null;
            /** @description Country for this address */
            readonly country?: string | null;
        };
        readonly ItemsSongs: {
            /** Format: uuid */
            readonly id: string;
            readonly status?: string;
            readonly sort?: number | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            /** @description Song title */
            readonly title?: string | null;
            /** @description Subtitle or source (e.g., 'from The Music Man') */
            readonly subtitle?: string | null;
            /** @description Duration in seconds */
            readonly duration?: number | null;
            /** @description Musical key (e.g., 'C Major', 'F# Minor') */
            readonly key_signature?: string | null;
            /** @description Tempo indication (e.g., 'Allegro', 'Andante') */
            readonly tempo_marking?: string | null;
            /** @description Song lyrics */
            readonly lyrics?: string | null;
            /** @description English translation of lyrics */
            readonly translation?: string | null;
            /** @description Program notes about the piece */
            readonly program_notes?: string | null;
            /** @description Additional notes about composer/composition */
            readonly composer_notes?: string | null;
            /** @description Musical genre */
            readonly genre?: string | null;
            /** @description Musical period */
            readonly period?: string | null;
            /** @description Opus number (e.g., 'Op. 27 No. 2') */
            readonly opus_number?: string | null;
            /** @description Movement number/name (e.g., 'I. Allegro') */
            readonly movement_number?: string | null;
            /** @description Instrumentation details */
            readonly instrumentation_notes?: string | null;
            /** @description Display lyrics in program */
            readonly show_lyrics?: boolean | null;
            /** @description Display translation in program */
            readonly show_translation?: boolean | null;
            /** @description Show only credits (no lyrics/details) */
            readonly show_credits_only?: boolean | null;
            readonly credits?: readonly (number | components["schemas"]["ItemsSongsPeople"])[] | null;
            readonly shows?: readonly (number | components["schemas"]["ItemsShowsSongs"])[] | null;
        };
        readonly ItemsFestivals: {
            /** Format: uuid */
            readonly id: string;
            readonly status?: string;
            readonly sort?: number | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            readonly name?: string | null;
            /** @description Festival name */
            readonly title?: string | null;
            /** @description URL slug for festival */
            readonly slug?: string | null;
            /** @description Festival description */
            readonly description?: string | null;
            /** @description Short tagline for festival */
            readonly tagline?: string | null;
            /**
             * Format: date
             * @description Festival start date
             */
            readonly start_date?: string | null;
            /**
             * Format: date
             * @description Festival end date
             */
            readonly end_date?: string | null;
            /** @description Festival year */
            readonly year?: number | null;
            /** @description Festival website URL */
            readonly website?: string | null;
            /** @description Festival location (city/region) */
            readonly location?: string | null;
            /** @description Internal notes about the festival */
            readonly notes?: string | null;
            readonly productions?: readonly (number | components["schemas"]["ItemsFestivalsProductions"])[] | null;
            readonly organizations?: readonly (number | components["schemas"]["ItemsFestivalsOrganizations"])[] | null;
            readonly program?: readonly (number | components["schemas"]["ItemsFestivalsPrograms"])[] | null;
        };
        readonly ItemsEvents: {
            /** Format: uuid */
            readonly id: string;
            readonly status?: string;
            readonly sort?: number | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            /** @description Special notes for this event (e.g., fundraising gala, opening night, etc.) */
            readonly special_notes?: string | null;
            /** @description Notes about understudy/role changes for this specific event */
            readonly understudy_notes?: string | null;
            /** @description Optional title for this event (e.g., 'Opening Night', 'Matinee Performance') */
            readonly title?: string | null;
            /** Format: date-time */
            readonly start?: string | null;
            /** Format: date-time */
            readonly end?: string | null;
            readonly venue?: readonly (number | components["schemas"]["ItemsEventsVenues"])[] | null;
            readonly program?: readonly (number | components["schemas"]["ItemsProgramsEvents"])[] | null;
        };
        readonly ItemsFestivalsProductions: {
            readonly id?: number;
            readonly festivals_id?: (string | components["schemas"]["ItemsFestivals"]) | null;
            readonly productions_id?: (string | components["schemas"]["ItemsProductions"]) | null;
        };
        readonly ItemsFestivalsOrganizations: {
            readonly id?: number;
            readonly festivals_id?: (string | components["schemas"]["ItemsFestivals"]) | null;
            readonly organizations_id?: (string | components["schemas"]["ItemsOrganizations"]) | null;
        };
        readonly ItemsSongsPeople: {
            readonly id?: number;
            readonly songs_id?: (string | components["schemas"]["ItemsSongs"]) | null;
            readonly people_id?: (string | components["schemas"]["ItemsPeople"]) | null;
            readonly roles?: (string | components["schemas"]["ItemsRoles"]) | null;
        };
        readonly ItemsShowsSongs: {
            readonly id?: number;
            readonly shows_id?: (string | components["schemas"]["ItemsShows"]) | null;
            readonly songs_id?: (string | components["schemas"]["ItemsSongs"]) | null;
            readonly sort?: number | null;
        };
        readonly ItemsFestivalsPrograms: {
            readonly id?: number;
            readonly festivals_id?: (string | components["schemas"]["ItemsFestivals"]) | null;
            readonly programs_id?: (string | components["schemas"]["ItemsPrograms"]) | null;
        };
        readonly ItemsProgramsSongs: {
            readonly id?: number;
            readonly programs_id?: (string | components["schemas"]["ItemsPrograms"]) | null;
            readonly songs_id?: (string | components["schemas"]["ItemsSongs"]) | null;
            readonly sort?: number | null;
        };
        readonly ItemsVenues: {
            /** Format: uuid */
            readonly id: string;
            readonly sort?: number | null;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            /** @description Venue name */
            readonly name?: string | null;
            /** @description Seating capacity */
            readonly capacity?: number | null;
            /** @description Type of venue */
            readonly venue_type?: string | null;
            readonly address?: (string | components["schemas"]["ItemsAddresses"]) | null;
            readonly events?: readonly (number | components["schemas"]["ItemsEventsVenues"])[] | null;
        };
        readonly ItemsEventsVenues: {
            readonly id?: number;
            readonly events_id?: (string | components["schemas"]["ItemsEvents"]) | null;
            readonly venues_id?: (string | components["schemas"]["ItemsVenues"]) | null;
            readonly sort?: number | null;
        };
        readonly ItemsProductionsPeople: {
            readonly id?: number;
            readonly sort?: number | null;
            readonly role?: (string | components["schemas"]["ItemsRoles"]) | null;
            readonly productions_id?: (string | components["schemas"]["ItemsProductions"]) | null;
            readonly people_id?: (string | components["schemas"]["ItemsPeople"]) | null;
            /** @description Production-specific bio (overrides default bio) */
            readonly bio_override?: string | null;
            /** @description Include this person in the program */
            readonly display_in_program?: boolean | null;
        };
        readonly ItemsProgramsEvents: {
            readonly id?: number;
            readonly programs_id?: (string | components["schemas"]["ItemsPrograms"]) | null;
            readonly events_id?: (string | components["schemas"]["ItemsEvents"]) | null;
        };
        readonly ItemsProgramsPeople: {
            readonly id?: number;
            readonly programs_id?: (string | components["schemas"]["ItemsPrograms"]) | null;
            readonly people_id?: (string | components["schemas"]["ItemsPeople"]) | null;
            readonly role?: (string | components["schemas"]["ItemsRoles"]) | null;
            /** @description Program-specific bio (overrides default bio) */
            readonly bio_override?: string | null;
        };
        readonly ItemsTags: {
            /** Format: uuid */
            readonly id: string;
            readonly name?: string | null;
            readonly tag_collections?: readonly string[] | null;
            readonly color?: string | null;
            readonly organizations?: readonly (number | components["schemas"]["ItemsOrganizationsTags"])[] | null;
        };
        readonly ItemsProgramsSections: {
            readonly id?: number;
            readonly programs_id?: (string | components["schemas"]["ItemsPrograms"]) | null;
            readonly item?: readonly (string | components["schemas"]["ItemsPrograms"] | components["schemas"]["ItemsSectionNotes"] | components["schemas"]["ItemsSectionCover"] | components["schemas"]["ItemsSectionBIOS"] | components["schemas"]["ItemsSectionCredits"])[] | null;
            readonly collection?: string | null;
            readonly sort?: number | null;
        };
        readonly ItemsOrganizationsTags: {
            readonly id?: number;
            readonly organizations_id?: (string | components["schemas"]["ItemsOrganizations"]) | null;
            readonly tags_id?: (string | components["schemas"]["ItemsTags"]) | null;
        };
        readonly ItemsSectionNotes: {
            /** Format: uuid */
            readonly id: string;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            readonly blocks?: readonly (number | components["schemas"]["ItemsSectionNotesBlocks"])[] | null;
        };
        readonly ItemsSectionCover: {
            /** Format: uuid */
            readonly id: string;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            /** @description Main title (e.g., show name) */
            readonly title?: string | null;
            /** @description Subtitle (e.g., 'Book, Music & Lyrics by...') */
            readonly subtitle?: string | null;
            /**
             * Format: uuid
             * @description Cover image
             */
            readonly image?: string | null;
        };
        readonly ItemsProgramsSponsors: {
            readonly id?: number;
            readonly programs_id?: (string | components["schemas"]["ItemsPrograms"]) | null;
            readonly organizations_id?: (string | components["schemas"]["ItemsOrganizations"]) | null;
            readonly sort?: number | null;
            /** @description Sponsorship tier/level */
            readonly sponsor_level?: string | null;
            /** @description Optional custom thank you message for this sponsor */
            readonly thank_you_message?: string | null;
        };
        readonly ItemsSectionBIOS: {
            /** Format: uuid */
            readonly id: string;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            /** @description Section title (default: 'About the Artists') */
            readonly title?: string | null;
            /** @description How to display the bios */
            readonly display_mode?: string | null;
            /** @description Show headshot photos */
            readonly include_headshots?: boolean | null;
        };
        readonly ItemsSectionPhotos: {
            /** Format: uuid */
            readonly id: string;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            /** @description Section title (e.g., 'Production Photos') */
            readonly title?: string | null;
            /** @description Gallery layout style */
            readonly layout?: string | null;
        };
        readonly ItemsBlockAd: {
            /** Format: uuid */
            readonly id: string;
            readonly status?: string;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            readonly blocks?: readonly (number | components["schemas"]["ItemsBlockAdBlocks"])[] | null;
        };
        readonly ItemsSectionSponsors: {
            /** Format: uuid */
            readonly id: string;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            /** @description Section title (default: 'Our Sponsors') */
            readonly title?: string | null;
            /** @description Introduction/thank you text */
            readonly intro_text?: string | null;
            /** @description How to display sponsors */
            readonly display_mode?: string | null;
            /** @description Show sponsor level names (e.g., 'Presenting Sponsor') */
            readonly show_levels?: boolean | null;
        };
        readonly ItemsBlockAdBlocks: {
            readonly id?: number;
            readonly block_ad_id?: (string | components["schemas"]["ItemsBlockAd"]) | null;
            readonly item?: readonly (string | components["schemas"]["ItemsBlockButton"] | components["schemas"]["ItemsBlockPosts"] | components["schemas"]["ItemsBlockButtonGroup"] | components["schemas"]["ItemsBlockHero"] | components["schemas"]["ItemsBlockGalleryItems"] | components["schemas"]["ItemsBlockGallery"] | components["schemas"]["ItemsBlockForm"] | components["schemas"]["ItemsBlockPricing"] | components["schemas"]["ItemsBlockPricingCards"] | components["schemas"]["ItemsBlockRichtext"] | components["schemas"]["ItemsBlockAd"])[] | null;
            readonly collection?: string | null;
        };
        readonly ItemsSectionStaff: {
            /** Format: uuid */
            readonly id: string;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            /** @description Section title (default: 'Theatre Staff') */
            readonly title?: string | null;
            /** @description Staff listing content */
            readonly content?: string | null;
            /** @description How to display staff */
            readonly display_mode?: string | null;
        };
        readonly ItemsSectionSongs: {
            /** Format: uuid */
            readonly id: string;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            /** @description Section title (default: 'Musical Numbers') */
            readonly title?: string | null;
            /** @description What information to show */
            readonly display_mode?: string | null;
            /** @description Show intermission marker */
            readonly show_intermission?: boolean | null;
            /** @description Song position after which to show intermission */
            readonly intermission_after_position?: number | null;
        };
        readonly ItemsSectionNotesBlocks: {
            readonly id?: number;
            readonly section_notes_id?: (string | components["schemas"]["ItemsSectionNotes"]) | null;
            readonly item?: readonly (string | components["schemas"]["ItemsBlockGallery"] | components["schemas"]["ItemsBlockRichtext"])[] | null;
            readonly collection?: string | null;
        };
        readonly ItemsSectionCredits: {
            /** Format: uuid */
            readonly id: string;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            /** @description Section title (default: 'Cast & Creative Team') */
            readonly title?: string | null;
            /** @description How to organize credits */
            readonly display_mode?: string | null;
            /** @description Number of columns */
            readonly columns?: number | null;
            /** @description Include understudy/swing information */
            readonly show_understudies?: boolean | null;
            /** @description Include production team credits */
            readonly show_production_team?: boolean | null;
        };
        readonly ItemsSectionSpecialThanks: {
            /** Format: uuid */
            readonly id: string;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            /** @description Section title (default: 'Special Thanks') */
            readonly title?: string | null;
            /** @description Thank you content (lists of names, paragraphs, etc.) */
            readonly content?: string | null;
            /** @description Layout for thank you list */
            readonly columns?: number | null;
        };
        readonly ItemsSectionAds: {
            /** Format: uuid */
            readonly id: string;
            readonly user_created?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_created?: string | null;
            readonly user_updated?: (string | components["schemas"]["Users"]) | null;
            /** Format: timestamp */
            readonly date_updated?: string | null;
            /** @description Section title (usually blank for ads) */
            readonly title?: string | null;
            /** @description Ad layout */
            readonly layout?: string | null;
        };
    };
    responses: {
        /** @description Error: Not found. */
        readonly NotFoundError: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly error?: {
                        /** Format: int64 */
                        readonly code?: number;
                        readonly message?: string;
                    };
                };
            };
        };
        /** @description Error: Unauthorized request */
        readonly UnauthorizedError: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly error?: {
                        /** Format: int64 */
                        readonly code?: number;
                        readonly message?: string;
                    };
                };
            };
        };
    };
    parameters: {
        /** @description Index */
        readonly Id: number;
        /** @description Unique identifier for the object. */
        readonly UUId: string;
        /** @description Collection of which you want to retrieve the items from. */
        readonly Collection: string;
        /** @description Filter by items that contain the given search query in one of their fields. */
        readonly Search: string;
        /** @description Cursor for use in pagination. Often used in combination with limit. */
        readonly Page: number;
        /** @description How many items to skip when fetching data. */
        readonly Offset: number;
        /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
         *      */
        readonly Sort: readonly string[];
        /** @description What metadata to return in the response. */
        readonly Meta: string;
        /** @description A limit on the number of objects that are returned. */
        readonly Limit: number;
        /** @description Select items in collection by given conditions. */
        readonly Filter: string;
        /** @description Control what fields are being returned in the object. */
        readonly Fields: readonly string[];
        /** @description Saves the API response to a file. Accepts one of "csv", "json", "xml", "yaml". */
        readonly Export: "csv" | "json" | "xml" | "yaml";
        /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
         *      */
        readonly Version: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly getAsset: {
        readonly parameters: {
            readonly query?: {
                /** @description The key of the asset size configured in settings. */
                readonly key?: string;
                /** @description A JSON array of image transformations */
                readonly transforms?: string;
                /** @description Download the asset to your computer */
                readonly download?: boolean;
            };
            readonly header?: never;
            readonly path: {
                /** @description The id of the file. */
                readonly id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "text/plain": string;
                };
            };
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly login: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description Email address of the user you're retrieving the access token for.
                     * @example admin@example.com
                     */
                    readonly email: string;
                    /**
                     * Format: password
                     * @description Password of the user.
                     * @example password
                     */
                    readonly password: string;
                    /**
                     * @description Whether to retrieve the refresh token in the JSON response, or in a httpOnly cookie.
                     * @default json
                     * @enum {string}
                     */
                    readonly mode?: "json" | "cookie" | "session";
                    /** @description The user's one-time-password (if MFA is enabled). */
                    readonly otp?: string;
                };
            };
        };
        readonly responses: {
            /** @description Successful authentification */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: {
                            /** @example eyJhbGciOiJI... */
                            readonly access_token?: string;
                            /** @example 900 */
                            readonly expires?: number;
                            /** @example yuOJkjdPXMd... */
                            readonly refresh_token?: string;
                        };
                    };
                };
            };
        };
    };
    readonly refresh: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description JWT access token you want to refresh. This token can't be expired.
                     * @example eyJ0eXAiOiJKV...
                     */
                    readonly refresh_token?: string;
                    /**
                     * @description Whether to submit and retrieve the refresh token in the JSON response, or in a httpOnly cookie.
                     * @default json
                     * @enum {string}
                     */
                    readonly mode?: "json" | "cookie" | "session";
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: {
                            /** @example eyJhbGciOiJI... */
                            readonly access_token?: string;
                            /** @example 900 */
                            readonly expires?: number;
                            /** @example Gy-caJMpmGTA... */
                            readonly refresh_token?: string;
                        };
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly logout: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description The refresh token to invalidate. If you have the refresh token in a cookie through /auth/login, you don't have to submit it here.
                     * @example eyJ0eXAiOiJKV...
                     */
                    readonly refresh_token?: string;
                    /**
                     * @description Whether the refresh token is submitted in the JSON response, or in a httpOnly cookie.
                     * @enum {string}
                     */
                    readonly mode?: "json" | "cookie" | "session";
                };
            };
        };
        readonly responses: {
            /** @description Request successful */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly passwordRequest: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description Email address of the user you're requesting a reset for.
                     * @example admin@example.com
                     */
                    readonly email: string;
                };
            };
        };
        readonly responses: {
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly passwordReset: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description One-time use JWT token that is used to verify the user.
                     * @example eyJ0eXAiOiJKV1Qi...
                     */
                    readonly token: string;
                    /**
                     * Format: password
                     * @description New password for the user.
                     * @example password
                     */
                    readonly password: string;
                };
            };
        };
        readonly responses: {
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly oauth: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly public?: boolean;
                        /** @example [
                         *       "github",
                         *       "facebook"
                         *     ] */
                        readonly data?: readonly string[];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly oauthProvider: {
        readonly parameters: {
            readonly query?: {
                /** @description Where to redirect on successful login.<br/>If set the authentication details are set inside cookies otherwise a JSON is returned. */
                readonly redirect?: string;
            };
            readonly header?: never;
            readonly path: {
                /** @description Key of the activated OAuth provider. */
                readonly provider: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly public?: boolean;
                        readonly data?: {
                            readonly token?: string;
                        };
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly schemaSnapshot: {
        readonly parameters: {
            readonly query?: {
                /** @description Saves the API response to a file. Accepts one of "csv", "json", "xml", "yaml". */
                readonly export?: components["parameters"]["Export"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Schema"];
                    };
                    readonly "text/yaml": string;
                };
            };
            readonly 403: components["responses"]["UnauthorizedError"];
        };
    };
    readonly schemaApply: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["Diff"];
                };
                readonly "multipart/form-data": {
                    /** Format: binary */
                    readonly file?: string;
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 403: components["responses"]["UnauthorizedError"];
        };
    };
    readonly schemaDiff: {
        readonly parameters: {
            readonly query?: {
                /** @description Bypass version and database vendor restrictions. */
                readonly force?: boolean;
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["Schema"];
                };
                readonly "multipart/form-data": {
                    /** Format: binary */
                    readonly file?: string;
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Diff"];
                    };
                };
            };
            /** @description No schema difference. */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 403: components["responses"]["UnauthorizedError"];
        };
    };
    readonly serverInfo: {
        readonly parameters: {
            readonly query: {
                /** @description The first time you create a project, the provided token will be saved and required for subsequent project installs. It can also be found and configured in `/config/__api.json` on your server. */
                readonly super_admin_token: number;
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: Record<string, never>;
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly ping: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/text": string;
                };
            };
        };
    };
    readonly "hash-generate": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /** @description String to hash. */
                    readonly string: string;
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @example $argon2i$v=19$m=4096,t=3,p=1$pOyIa/zmRAjCVLb2f7kOyg$DasoO6LzMM+6iKfzCDq6JbsYsZWLSm33p7i9NxL9mDc */
                        readonly data?: string;
                    };
                };
            };
        };
    };
    readonly "hash-verify": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /** @description String to hash. */
                    readonly string: string;
                    /** @description Hash you want to verify against. */
                    readonly hash: string;
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @example true */
                        readonly data?: boolean;
                    };
                };
            };
        };
    };
    readonly sort: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Collection identifier */
                readonly collection: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /** @description Primary key of item to move */
                    readonly item?: number;
                    /** @description Primary key of item where to move the current item to */
                    readonly to?: number;
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly import: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Collection identifier */
                readonly collection: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "multipart/form-data": {
                    /** Format: binary */
                    readonly file?: string;
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly export: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Collection identifier */
                readonly collection: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description What file format to save the export to. One of csv, xml, json
                     * @enum {string}
                     */
                    readonly format: "csv" | "xml" | "json";
                    readonly query: components["schemas"]["Query"];
                    readonly file: components["schemas"]["Files"];
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly "clear-cache": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly random: {
        readonly parameters: {
            readonly query?: {
                /** @description Length of the random string. */
                readonly length?: number;
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @example 1>M3+4oh.S */
                        readonly data?: string;
                    };
                };
            };
        };
    };
    readonly getActivities: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Activity"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly getActivity: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index */
                readonly id: components["parameters"]["Id"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Activity"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly getPermissions: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
                /** @description Cursor for use in pagination. Often used in combination with limit. */
                readonly page?: components["parameters"]["Page"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Permissions"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly createPermission: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description What collection this permission applies to.
                     * @example customers
                     */
                    readonly collection?: string;
                    /**
                     * @description If the user can post comments.
                     * @enum {string}
                     */
                    readonly comment?: "none" | "create" | "update" | "full";
                    /**
                     * @description If the user can create items.
                     * @enum {string}
                     */
                    readonly create?: "none" | "full";
                    /**
                     * @description If the user can update items.
                     * @enum {string}
                     */
                    readonly delete?: "none" | "mine" | "role" | "full";
                    /**
                     * @description If the user is required to leave a comment explaining what was changed.
                     * @enum {string}
                     */
                    readonly explain?: "none" | "create" | "update" | "always";
                    /**
                     * @description If the user can read items.
                     * @enum {string}
                     */
                    readonly read?: "none" | "mine" | "role" | "full";
                    /**
                     * @description Unique identifier of the role this permission applies to.
                     * @example 3
                     */
                    readonly role?: number;
                    /**
                     * @description Explicitly denies read access for specific fields.
                     * @example [
                     *       "featured_image"
                     *     ]
                     */
                    readonly read_field_blacklist?: readonly string[];
                    /** @description What status this permission applies to. */
                    readonly status?: string;
                    /** @description Explicitly denies specific statuses to be used. */
                    readonly status_blacklist?: readonly string[];
                    /**
                     * @description If the user can update items.
                     * @enum {string}
                     */
                    readonly update?: "none" | "mine" | "role" | "full";
                    /** @description Explicitly denies write access for specific fields. */
                    readonly write_field_blacklist?: readonly string[];
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Permissions"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deletePermissions: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updatePermissions: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    readonly keys?: readonly string[];
                    readonly data?: {
                        /**
                         * @description What collection this permission applies to.
                         * @example customers
                         */
                        readonly collection?: string;
                        /**
                         * @description If the user can post comments.
                         * @enum {string}
                         */
                        readonly comment?: "none" | "create" | "update" | "full";
                        /**
                         * @description If the user can create items.
                         * @enum {string}
                         */
                        readonly create?: "none" | "full";
                        /**
                         * @description If the user can update items.
                         * @enum {string}
                         */
                        readonly delete?: "none" | "mine" | "role" | "full";
                        /**
                         * @description If the user is required to leave a comment explaining what was changed.
                         * @enum {string}
                         */
                        readonly explain?: "none" | "create" | "update" | "always";
                        /**
                         * @description If the user can read items.
                         * @enum {string}
                         */
                        readonly read?: "none" | "mine" | "role" | "full";
                        /**
                         * @description Unique identifier of the role this permission applies to.
                         * @example 3
                         */
                        readonly role?: number;
                        /**
                         * @description Explicitly denies read access for specific fields.
                         * @example [
                         *       "featured_image"
                         *     ]
                         */
                        readonly read_field_blacklist?: readonly string[];
                        /** @description What status this permission applies to. */
                        readonly status?: string;
                        /** @description Explicitly denies specific statuses to be used. */
                        readonly status_blacklist?: readonly string[];
                        /**
                         * @description If the user can update items.
                         * @enum {string}
                         */
                        readonly update?: "none" | "mine" | "role" | "full";
                        /** @description Explicitly denies write access for specific fields. */
                        readonly write_field_blacklist?: readonly string[];
                    };
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Permissions"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly getMyPermissions: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Permissions"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly getPermission: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index */
                readonly id: components["parameters"]["Id"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Permissions"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deletePermission: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index */
                readonly id: components["parameters"]["Id"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updatePermission: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index */
                readonly id: components["parameters"]["Id"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /** @description What collection this permission applies to. */
                    readonly collection?: Record<string, never>;
                    /**
                     * @description If the user can post comments. `full`.
                     * @enum {string}
                     */
                    readonly comment?: "none" | "create" | "update";
                    /**
                     * @description If the user can create items.
                     * @enum {string}
                     */
                    readonly create?: "none" | "full";
                    /**
                     * @description If the user can update items.
                     * @enum {string}
                     */
                    readonly delete?: "none" | "mine" | "role" | "full";
                    /**
                     * @description If the user is required to leave a comment explaining what was changed.
                     * @enum {string}
                     */
                    readonly explain?: "none" | "create" | "update" | "always";
                    /**
                     * @description If the user can read items.
                     * @enum {string}
                     */
                    readonly read?: "none" | "mine" | "role" | "full";
                    /** @description Explicitly denies read access for specific fields. */
                    readonly read_field_blacklist?: Record<string, never>;
                    /** @description Unique identifier of the role this permission applies to. */
                    readonly role?: Record<string, never>;
                    /** @description What status this permission applies to. */
                    readonly status?: Record<string, never>;
                    /** @description Explicitly denies specific statuses to be used. */
                    readonly status_blacklist?: Record<string, never>;
                    /**
                     * @description If the user can update items.
                     * @enum {string}
                     */
                    readonly update?: "none" | "mine" | "role" | "full";
                    /** @description Explicitly denies write access for specific fields. */
                    readonly write_field_blacklist?: Record<string, never>;
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Permissions"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly getFields: {
        readonly parameters: {
            readonly query?: {
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Fields"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly getCollectionFields: {
        readonly parameters: {
            readonly query?: {
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier of the collection the item resides in. */
                readonly collection: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Fields"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly createField: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier of the collection the item resides in. */
                readonly collection: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description Unique name of the field. Field name is unique within the collection.
                     * @example id
                     */
                    readonly field: string;
                    /**
                     * @description Directus specific data type. Used to cast values in the API.
                     * @example integer
                     */
                    readonly type: string;
                    /** @description The schema info. */
                    readonly schema?: {
                        /**
                         * @description The name of the field.
                         * @example title
                         */
                        readonly name?: string;
                        /**
                         * @description The collection of the field.
                         * @example posts
                         */
                        readonly table?: string;
                        /**
                         * @description The type of the field.
                         * @example string
                         */
                        readonly type?: string;
                        /**
                         * @description The default value of the field.
                         * @example null
                         */
                        readonly default_value?: string | null;
                        /**
                         * @description The max length of the field.
                         * @example null
                         */
                        readonly max_length?: number | null;
                        /**
                         * @description If the field is nullable.
                         * @example false
                         */
                        readonly is_nullable?: boolean;
                        /**
                         * @description If the field is primary key.
                         * @example false
                         */
                        readonly is_primary_key?: boolean;
                        /**
                         * @description If the field has auto increment.
                         * @example false
                         */
                        readonly has_auto_increment?: boolean;
                        /**
                         * @description Related column from the foreign key constraint.
                         * @example null
                         */
                        readonly foreign_key_column?: string | null;
                        /**
                         * @description Related table from the foreign key constraint.
                         * @example null
                         */
                        readonly foreign_key_table?: string | null;
                        /**
                         * @description Comment as saved in the database.
                         * @example null
                         */
                        readonly comment?: string | null;
                        /**
                         * @description Database schema (pg only).
                         * @example public
                         */
                        readonly schema?: string;
                        /**
                         * @description Related schema from the foreign key constraint (pg only).
                         * @example null
                         */
                        readonly foreign_key_schema?: string | null;
                    };
                    /** @description The meta info. */
                    readonly meta?: {
                        /**
                         * @description Unique identifier for the field in the `directus_fields` collection.
                         * @example 3
                         */
                        readonly id?: number;
                        /**
                         * @description Unique name of the collection this field is in.
                         * @example posts
                         */
                        readonly collection?: string;
                        /**
                         * @description Unique name of the field. Field name is unique within the collection.
                         * @example title
                         */
                        readonly field?: string;
                        /**
                         * @description Transformation flag for field
                         * @example null
                         */
                        readonly special?: readonly string[] | null;
                        /**
                         * @description What interface is used in the admin app to edit the value for this field.
                         * @example primary-key
                         */
                        readonly "system-interface"?: string | null;
                        /**
                         * @description Options for the interface that's used. This format is based on the individual interface.
                         * @example null
                         */
                        readonly options?: Record<string, never> | null;
                        /**
                         * @description What display is used in the admin app to display the value for this field.
                         * @example null
                         */
                        readonly display?: string | null;
                        /**
                         * @description Options for the display that's used. This format is based on the individual display.
                         * @example null
                         */
                        readonly display_options?: Record<string, never> | null;
                        /**
                         * @description If the field can be altered by the end user. Directus system fields have this value set to `true`.
                         * @example true
                         */
                        readonly locked?: boolean;
                        /**
                         * @description Prevents the user from editing the value in the field.
                         * @example false
                         */
                        readonly readonly?: boolean;
                        /**
                         * @description If this field should be hidden.
                         * @example true
                         */
                        readonly hidden?: boolean;
                        /**
                         * @description Sort order of this field on the edit page of the admin app.
                         * @example 1
                         */
                        readonly sort?: number | null;
                        /**
                         * @description Width of the field on the edit form.
                         * @example null
                         * @enum {string|null}
                         */
                        readonly width?: "half" | "half-left" | "half-right" | "full" | "fill" | null;
                        /**
                         * @description What field group this field is part of.
                         * @example null
                         */
                        readonly group?: number | null;
                        /**
                         * @description Key value pair of `<language>: <translation>` that allows the user to change the displayed name of the field in the admin app.
                         * @example null
                         */
                        readonly translation?: Record<string, never> | null;
                        /**
                         * @description A user provided note for the field. Will be rendered alongside the interface on the edit page.
                         * @example
                         */
                        readonly note?: string | null;
                    } | null;
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Fields"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly getCollectionField: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier of the collection the item resides in. */
                readonly collection: string;
                /** @description Unique identifier of the field. */
                readonly id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Fields"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteField: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier of the collection the item resides in. */
                readonly collection: string;
                /** @description Unique identifier of the field. */
                readonly id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateField: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier of the collection the item resides in. */
                readonly collection: string;
                /** @description Unique identifier of the field. */
                readonly id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description Unique name of the field. Field name is unique within the collection.
                     * @example id
                     */
                    readonly field?: string;
                    /**
                     * @description Directus specific data type. Used to cast values in the API.
                     * @example integer
                     */
                    readonly type?: string;
                    /** @description The schema info. */
                    readonly schema?: {
                        /**
                         * @description The name of the field.
                         * @example title
                         */
                        readonly name?: string;
                        /**
                         * @description The collection of the field.
                         * @example posts
                         */
                        readonly table?: string;
                        /**
                         * @description The type of the field.
                         * @example string
                         */
                        readonly type?: string;
                        /**
                         * @description The default value of the field.
                         * @example null
                         */
                        readonly default_value?: string | null;
                        /**
                         * @description The max length of the field.
                         * @example null
                         */
                        readonly max_length?: number | null;
                        /**
                         * @description If the field is nullable.
                         * @example false
                         */
                        readonly is_nullable?: boolean;
                        /**
                         * @description If the field is primary key.
                         * @example false
                         */
                        readonly is_primary_key?: boolean;
                        /**
                         * @description If the field has auto increment.
                         * @example false
                         */
                        readonly has_auto_increment?: boolean;
                        /**
                         * @description Related column from the foreign key constraint.
                         * @example null
                         */
                        readonly foreign_key_column?: string | null;
                        /**
                         * @description Related table from the foreign key constraint.
                         * @example null
                         */
                        readonly foreign_key_table?: string | null;
                        /**
                         * @description Comment as saved in the database.
                         * @example null
                         */
                        readonly comment?: string | null;
                        /**
                         * @description Database schema (pg only).
                         * @example public
                         */
                        readonly schema?: string;
                        /**
                         * @description Related schema from the foreign key constraint (pg only).
                         * @example null
                         */
                        readonly foreign_key_schema?: string | null;
                    };
                    /** @description The meta info. */
                    readonly meta?: {
                        /**
                         * @description Unique identifier for the field in the `directus_fields` collection.
                         * @example 3
                         */
                        readonly id?: number;
                        /**
                         * @description Unique name of the collection this field is in.
                         * @example posts
                         */
                        readonly collection?: string;
                        /**
                         * @description Unique name of the field. Field name is unique within the collection.
                         * @example title
                         */
                        readonly field?: string;
                        /**
                         * @description Transformation flag for field
                         * @example null
                         */
                        readonly special?: readonly string[] | null;
                        /**
                         * @description What interface is used in the admin app to edit the value for this field.
                         * @example primary-key
                         */
                        readonly "system-interface"?: string | null;
                        /**
                         * @description Options for the interface that's used. This format is based on the individual interface.
                         * @example null
                         */
                        readonly options?: Record<string, never> | null;
                        /**
                         * @description What display is used in the admin app to display the value for this field.
                         * @example null
                         */
                        readonly display?: string | null;
                        /**
                         * @description Options for the display that's used. This format is based on the individual display.
                         * @example null
                         */
                        readonly display_options?: Record<string, never> | null;
                        /**
                         * @description If the field can be altered by the end user. Directus system fields have this value set to `true`.
                         * @example true
                         */
                        readonly locked?: boolean;
                        /**
                         * @description Prevents the user from editing the value in the field.
                         * @example false
                         */
                        readonly readonly?: boolean;
                        /**
                         * @description If this field should be hidden.
                         * @example true
                         */
                        readonly hidden?: boolean;
                        /**
                         * @description Sort order of this field on the edit page of the admin app.
                         * @example 1
                         */
                        readonly sort?: number | null;
                        /**
                         * @description Width of the field on the edit form.
                         * @example null
                         * @enum {string|null}
                         */
                        readonly width?: "half" | "half-left" | "half-right" | "full" | "fill" | null;
                        /**
                         * @description What field group this field is part of.
                         * @example null
                         */
                        readonly group?: number | null;
                        /**
                         * @description Key value pair of `<language>: <translation>` that allows the user to change the displayed name of the field in the admin app.
                         * @example null
                         */
                        readonly translation?: Record<string, never> | null;
                        /**
                         * @description A user provided note for the field. Will be rendered alongside the interface on the edit page.
                         * @example
                         */
                        readonly note?: string | null;
                    } | null;
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Fields"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly getFiles: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Files"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createFile: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: string;
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Files"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteFiles: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateFiles: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: {
                        readonly data?: string;
                    };
                    readonly keys?: readonly string[];
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Files"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly getFile: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier for the object. */
                readonly id: components["parameters"]["UUId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Files"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteFile: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier for the object. */
                readonly id: components["parameters"]["UUId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateFile: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier for the object. */
                readonly id: components["parameters"]["UUId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "multipart/data": {
                    /**
                     * @description Title for the file. Is extracted from the filename on upload, but can be edited by the user.
                     * @example User Avatar
                     */
                    readonly title?: string;
                    /** @description Preferred filename when file is downloaded. */
                    readonly filename_download?: string;
                    /** @description Description for the file. */
                    readonly description?: string | null;
                    /**
                     * @description Virtual folder where this file resides in.
                     * @example null
                     */
                    readonly folder?: (string | components["schemas"]["Folders"]) | null;
                    /** @description Tags for the file. Is automatically populated based on Exif data for images. */
                    readonly tags?: readonly string[] | null;
                    /**
                     * Format: binary
                     * @description File contents.
                     */
                    readonly file: unknown;
                };
                readonly "application/json": {
                    /**
                     * @description Title for the file. Is extracted from the filename on upload, but can be edited by the user.
                     * @example User Avatar
                     */
                    readonly title?: string;
                    /** @description Preferred filename when file is downloaded. */
                    readonly filename_download?: string;
                    /** @description Description for the file. */
                    readonly description?: string | null;
                    /**
                     * @description Virtual folder where this file resides in.
                     * @example null
                     */
                    readonly folder?: (string | components["schemas"]["Folders"]) | null;
                    /** @description Tags for the file. Is automatically populated based on Exif data for images. */
                    readonly tags?: readonly string[] | null;
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Files"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly getCollections: {
        readonly parameters: {
            readonly query?: {
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Collections"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly createCollection: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description Unique name of the collection.
                     * @example my_collection
                     */
                    readonly collection: string;
                    /** @description The fields contained in this collection. See the fields reference for more information. Each individual field requires field, type, and interface to be provided. */
                    readonly fields: readonly Record<string, never>[];
                    /**
                     * @description Name of a Google Material Design Icon that's assigned to this collection.
                     * @example people
                     */
                    readonly icon?: string | null;
                    /**
                     * @description A note describing the collection.
                     * @example null
                     */
                    readonly note?: string | null;
                    /**
                     * @description Text representation of how items from this collection are shown across the system.
                     * @example null
                     */
                    readonly display_template?: string | null;
                    /**
                     * @description Whether or not the collection is hidden from the navigation in the admin app.
                     * @example false
                     */
                    readonly hidden?: boolean;
                    /**
                     * @description Whether or not the collection is treated as a single object.
                     * @example false
                     */
                    readonly singleton?: boolean;
                    /**
                     * @description Key value pairs of how to show this collection's name in different languages in the admin app.
                     * @example null
                     */
                    readonly translation?: string | null;
                    /**
                     * @description Whether or not Content Versioning is enabled for this collection.
                     * @example false
                     */
                    readonly versioning?: boolean;
                    /**
                     * @description What field holds the archive value.
                     * @example null
                     */
                    readonly archive_field?: string | null;
                    /**
                     * @description What value to use for "archived" items.
                     * @example null
                     */
                    readonly archive_app_filter?: string | null;
                    /**
                     * @description What value to use to "unarchive" items.
                     * @example null
                     */
                    readonly archive_value?: string | null;
                    /**
                     * @description Whether or not to show the "archived" filter.
                     * @example null
                     */
                    readonly unarchive_value?: string | null;
                    /**
                     * @description The sort field in the collection.
                     * @example null
                     */
                    readonly sort_field?: string | null;
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Collections"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly getCollection: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier of the collection. */
                readonly id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Collections"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteCollection: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier of the collection. */
                readonly id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateCollection: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier of the collection. */
                readonly id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /** @description Metadata of the collection. */
                    readonly meta?: {
                        /**
                         * @description Name of a Google Material Design Icon that's assigned to this collection.
                         * @example people
                         */
                        readonly icon?: string | null;
                        /**
                         * @description Choose the color for the icon assigned to this collection.
                         * @example #6644ff
                         */
                        readonly color?: string | null;
                        /**
                         * @description A note describing the collection.
                         * @example null
                         */
                        readonly note?: string | null;
                        /**
                         * @description Text representation of how items from this collection are shown across the system.
                         * @example null
                         */
                        readonly display_template?: string | null;
                        /**
                         * @description Whether or not the collection is hidden from the navigation in the admin app.
                         * @example false
                         */
                        readonly hidden?: boolean;
                        /**
                         * @description Whether or not the collection is treated as a single object.
                         * @example false
                         */
                        readonly singleton?: boolean;
                        /**
                         * @description Key value pairs of how to show this collection's name in different languages in the admin app.
                         * @example null
                         */
                        readonly translation?: string | null;
                        /**
                         * @description Whether or not Content Versioning is enabled for this collection.
                         * @example false
                         */
                        readonly versioning?: boolean;
                        /**
                         * @description What field holds the archive value.
                         * @example null
                         */
                        readonly archive_field?: string | null;
                        /**
                         * @description What value to use for "archived" items.
                         * @example null
                         */
                        readonly archive_app_filter?: string | null;
                        /**
                         * @description What value to use to "unarchive" items.
                         * @example null
                         */
                        readonly archive_value?: string | null;
                        /**
                         * @description Whether or not to show the "archived" filter.
                         * @example null
                         */
                        readonly unarchive_value?: string | null;
                        /**
                         * @description The sort field in the collection.
                         * @example null
                         */
                        readonly sort_field?: string | null;
                    };
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Collections"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly getFolders: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Folders"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly createFolder: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description Name of the folder.
                     * @example Amsterdam
                     */
                    readonly name: string;
                    /** @description Unique identifier of the parent folder. This allows for nested folders. */
                    readonly parent?: number;
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Folders"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteFolders: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateFolders: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: {
                        /**
                         * @description Name of the folder.
                         * @example Amsterdam
                         */
                        readonly name: string;
                        /** @description Unique identifier of the parent folder. This allows for nested folders. */
                        readonly parent?: number;
                    };
                    readonly keys?: readonly string[];
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Folders"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly getFolder: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier for the object. */
                readonly id: components["parameters"]["UUId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Folders"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteFolder: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier for the object. */
                readonly id: components["parameters"]["UUId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateFolder: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier for the object. */
                readonly id: components["parameters"]["UUId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /** @description Name of the folder. Can't be null or empty. */
                    readonly name?: string;
                    /**
                     * @description Unique identifier of the parent folder. This allows for nested folders.
                     * @example 3
                     */
                    readonly parent?: number;
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Folders"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly getUsers: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Users"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly createUser: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["Users"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Users"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteUsers: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateUsers: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["Users"];
                    readonly keys?: readonly string[];
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Users"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly getUser: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier for the object. */
                readonly id: components["parameters"]["UUId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Users"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteUser: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier for the object. */
                readonly id: components["parameters"]["UUId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateUser: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier for the object. */
                readonly id: components["parameters"]["UUId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["Users"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: Record<string, never>;
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly invite: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /** @description Email address or array of email addresses of the to-be-invited user(s). */
                    readonly email?: string;
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Users"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly acceptInvite: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description Accept invite token.
                     * @example eyJh...KmUk
                     */
                    readonly token?: string;
                    /**
                     * Format: password
                     * @description Password of the user.
                     * @example d1r3ctu5
                     */
                    readonly password?: string;
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Users"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly getMe: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Users"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateMe: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Users"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateLastUsedPageMe: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /** @description Path of the page you used last. */
                    readonly last_page?: string;
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly meTfaEnable: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly meTfaDisable: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly getRoles: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
                /** @description Cursor for use in pagination. Often used in combination with limit. */
                readonly page?: components["parameters"]["Page"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Roles"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly createRole: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /** @description Description of the role. */
                    readonly description?: string;
                    /** @description Whether or not this role enforces the use of 2FA. */
                    readonly enforce_tfa?: boolean;
                    /** @description ID used with external services in SCIM. */
                    readonly external_id?: string;
                    /** @description Array of IP addresses that are allowed to connect to the API as a user of this role. */
                    readonly ip_access?: readonly string[];
                    /** @description Custom override for the admin app module bar navigation. */
                    readonly module_listing?: string;
                    /**
                     * @description Name of the role.
                     * @example Interns
                     */
                    readonly name?: string;
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Roles"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteRoles: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateRoles: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    readonly keys?: readonly string[];
                    readonly data?: {
                        /** @description Description of the role. */
                        readonly description?: string;
                        /** @description Whether or not this role enforces the use of 2FA. */
                        readonly enforce_tfa?: boolean;
                        /** @description ID used with external services in SCIM. */
                        readonly external_id?: string;
                        /** @description Array of IP addresses that are allowed to connect to the API as a user of this role. */
                        readonly ip_access?: readonly string[];
                        /** @description Custom override for the admin app module bar navigation. */
                        readonly module_listing?: string;
                        /**
                         * @description Name of the role.
                         * @example Interns
                         */
                        readonly name?: string;
                    };
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Roles"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly getRole: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier for the object. */
                readonly id: components["parameters"]["UUId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Roles"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteRole: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier for the object. */
                readonly id: components["parameters"]["UUId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateRole: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier for the object. */
                readonly id: components["parameters"]["UUId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /** @description Description of the role. */
                    readonly description?: string;
                    /** @description Whether or not this role enforces the use of 2FA. */
                    readonly enforce_tfa?: boolean;
                    /** @description ID used with external services in SCIM. */
                    readonly external_id?: string;
                    /** @description Array of IP addresses that are allowed to connect to the API as a user of this role. */
                    readonly ip_access?: readonly string[];
                    /** @description Custom override for the admin app module bar navigation. */
                    readonly module_listing?: string;
                    /** @description Name of the role. */
                    readonly name?: string;
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Roles"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly getPresets: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description Cursor for use in pagination. Often used in combination with limit. */
                readonly page?: components["parameters"]["Page"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Presets"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createPreset: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description What collection this collection preset is used for.
                     * @example articles
                     */
                    readonly collection: string;
                    /**
                     * @description Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.
                     * @example Highly rated articles
                     */
                    readonly title?: string;
                    /**
                     * @description The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role.
                     * @example null
                     */
                    readonly role?: string;
                    /** @description What the user searched for in search/filter in the header bar. */
                    readonly search?: string;
                    readonly filters?: readonly {
                        /** @example aHKLAakdVghzD */
                        readonly key?: string;
                        /** @example rating */
                        readonly field?: string;
                        /** @example gte */
                        readonly operator?: string;
                        /** @example 4.5 */
                        readonly value?: number;
                    }[];
                    /** @description Name of the view type that is used. */
                    readonly layout?: string;
                    /** @description Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters. */
                    readonly layout_query?: string;
                    /** @description Options of the views. The properties in here are controlled by the layout. */
                    readonly layout_options?: string;
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Presets"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deletePresets: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updatePresets: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    readonly keys?: readonly string[];
                    readonly data?: {
                        /**
                         * @description What collection this collection preset is used for.
                         * @example articles
                         */
                        readonly collection: string;
                        /**
                         * @description Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.
                         * @example Highly rated articles
                         */
                        readonly title?: string;
                        /**
                         * @description The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role.
                         * @example null
                         */
                        readonly role?: string;
                        /** @description What the user searched for in search/filter in the header bar. */
                        readonly search?: string;
                        readonly filters?: readonly {
                            /** @example aHKLAakdVghzD */
                            readonly key?: string;
                            /** @example rating */
                            readonly field?: string;
                            /** @example gte */
                            readonly operator?: string;
                            /** @example 4.5 */
                            readonly value?: number;
                        }[];
                        /** @description Name of the view type that is used. */
                        readonly layout?: string;
                        /** @description Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters. */
                        readonly layout_query?: string;
                        /** @description Options of the views. The properties in here are controlled by the layout. */
                        readonly layout_options?: string;
                    };
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Presets"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly getPreset: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index */
                readonly id: components["parameters"]["Id"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Presets"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deletePreset: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index */
                readonly id: components["parameters"]["Id"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updatePreset: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index */
                readonly id: components["parameters"]["Id"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description What collection this collection preset is used for.
                     * @example articles
                     */
                    readonly collection: string;
                    /**
                     * @description Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.
                     * @example Highly rated articles
                     */
                    readonly title?: string;
                    /** @description The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role. */
                    readonly role?: number;
                    /** @description What the user searched for in search/filter in the header bar. */
                    readonly search_query?: string;
                    readonly filters?: readonly {
                        /** @example rating */
                        readonly field?: string;
                        /** @example gte */
                        readonly operator?: string;
                        /** @example 4.5 */
                        readonly value?: number;
                    }[];
                    /** @description Name of the view type that is used. Defaults to tabular. */
                    readonly view_type?: string;
                    /** @description View query that's saved per view type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters. */
                    readonly view_query?: string;
                    /** @description Options of the views. The properties in here are controlled by the layout. */
                    readonly view_options?: string;
                    /** @description Key value pair of language-translation. Can be used to translate the bookmark title in multiple languages. */
                    readonly translation?: Record<string, never>;
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Presets"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly getRevisions: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
                /** @description Cursor for use in pagination. Often used in combination with limit. */
                readonly page?: components["parameters"]["Page"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Revisions"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly getRevision: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index */
                readonly id: components["parameters"]["Id"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Revisions"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly getRelations: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
                /** @description Cursor for use in pagination. Often used in combination with limit. */
                readonly page?: components["parameters"]["Page"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Relations"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly createRelation: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description Collection that has the field that holds the foreign key.
                     * @example articles
                     */
                    readonly collection_many?: string;
                    /**
                     * @description Collection on the _one_ side of the relationship.
                     * @example authors
                     */
                    readonly collection_one?: string;
                    /**
                     * @description Foreign key. Field that holds the primary key of the related collection.
                     * @example author
                     */
                    readonly field_many?: string;
                    /**
                     * @description Alias column that serves as the _one_ side of the relationship.
                     * @example books
                     */
                    readonly field_one?: string;
                    /** @description Field on the junction table that holds the primary key of the related collection. */
                    readonly junction_field?: string;
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Relations"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly getRelation: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index */
                readonly id: components["parameters"]["Id"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Relations"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteRelation: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index */
                readonly id: components["parameters"]["Id"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateRelation: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index */
                readonly id: components["parameters"]["Id"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /** @description Collection that has the field that holds the foreign key. */
                    readonly collection_many?: string;
                    /** @description Collection on the _one_ side of the relationship. */
                    readonly collection_one?: string;
                    /** @description Foreign key. Field that holds the primary key of the related collection. */
                    readonly field_many?: string;
                    /**
                     * @description Alias column that serves as the _one_ side of the relationship.
                     * @example books
                     */
                    readonly field_one?: string;
                    /** @description Field on the junction table that holds the primary key of the related collection. */
                    readonly junction_field?: string;
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Relations"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly getFlows: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Flows"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly createFlow: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["Flows"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Flows"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteFlows: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateFlows: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["Flows"];
                    readonly keys?: readonly string[];
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Flows"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly getFlow: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier for the object. */
                readonly id: components["parameters"]["UUId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Flows"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteFlow: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier for the object. */
                readonly id: components["parameters"]["UUId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateFlow: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier for the object. */
                readonly id: components["parameters"]["UUId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["Flows"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Flows"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly getOperations: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Operations"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly createOperation: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["Operations"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Operations"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteOperations: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateOperations: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["Operations"];
                    readonly keys?: readonly string[];
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Operations"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly getOperation: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier for the object. */
                readonly id: components["parameters"]["UUId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Operations"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteOperation: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier for the object. */
                readonly id: components["parameters"]["UUId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateOperation: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier for the object. */
                readonly id: components["parameters"]["UUId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["Operations"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Operations"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly getWebhooks: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Webhooks"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly createWebhook: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description The name of the webhook.
                     * @example create articles
                     */
                    readonly name?: string;
                    /**
                     * @description Method used in the webhook.
                     * @example POST
                     */
                    readonly method?: string;
                    /**
                     * @description The url of the webhook.
                     * @example null
                     */
                    readonly url?: string;
                    /**
                     * @description The status of the webhook.
                     * @example active
                     */
                    readonly status?: string;
                    /**
                     * @description If yes, send the content of what was done
                     * @example true
                     */
                    readonly data?: boolean;
                    /**
                     * @description The actions that triggers this webhook.
                     * @example null
                     */
                    readonly actions?: unknown;
                    /**
                     * @description The collections that triggers this webhook.
                     * @example null
                     */
                    readonly "system-collections"?: unknown;
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Roles"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteWebhooks: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateWebhooks: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: {
                        /**
                         * @description The name of the webhook.
                         * @example create articles
                         */
                        readonly name?: string;
                        /**
                         * @description Method used in the webhook.
                         * @example POST
                         */
                        readonly method?: string;
                        /**
                         * @description The url of the webhook.
                         * @example null
                         */
                        readonly url?: string;
                        /**
                         * @description The status of the webhook.
                         * @example active
                         */
                        readonly status?: string;
                        /**
                         * @description If yes, send the content of what was done
                         * @example true
                         */
                        readonly data?: boolean;
                        /**
                         * @description The actions that triggers this webhook.
                         * @example null
                         */
                        readonly actions?: unknown;
                        /**
                         * @description The collections that triggers this webhook.
                         * @example null
                         */
                        readonly "system-collections"?: unknown;
                    };
                    readonly keys?: readonly string[];
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Webhooks"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly getWebhook: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier for the object. */
                readonly id: components["parameters"]["UUId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Webhooks"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteWebhook: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier for the object. */
                readonly id: components["parameters"]["UUId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateWebhook: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier for the object. */
                readonly id: components["parameters"]["UUId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description The name of the webhook.
                     * @example create articles
                     */
                    readonly name?: string;
                    /**
                     * @description Method used in the webhook.
                     * @example POST
                     */
                    readonly method?: string;
                    /**
                     * @description The url of the webhook.
                     * @example null
                     */
                    readonly url?: string;
                    /**
                     * @description The status of the webhook.
                     * @example active
                     */
                    readonly status?: string;
                    /**
                     * @description If yes, send the content of what was done
                     * @example true
                     */
                    readonly data?: boolean;
                    /**
                     * @description The actions that triggers this webhook.
                     * @example null
                     */
                    readonly actions?: unknown;
                    /**
                     * @description The collections that triggers this webhook.
                     * @example null
                     */
                    readonly "system-collections"?: unknown;
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Roles"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly listExtensions: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Extensions"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateExtensions: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                readonly name: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /** @description Directus metadata for the extension. Where the configuration for the extension in the current project is stored. */
                    readonly meta?: {
                        /**
                         * @description Whether or not the extension is enabled.
                         * @example true
                         */
                        readonly enabled?: boolean;
                    };
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Extensions"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateExtensionBundle: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                readonly bundle: string;
                readonly name: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /** @description Directus metadata for the extension. Where the configuration for the extension in the current project is stored. */
                    readonly meta?: {
                        /**
                         * @description Whether or not the extension is enabled.
                         * @example true
                         */
                        readonly enabled?: boolean;
                    };
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Extensions"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly getSettings: {
        readonly parameters: {
            readonly query?: {
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Cursor for use in pagination. Often used in combination with limit. */
                readonly page?: components["parameters"]["Page"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Settings"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSetting: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": Record<string, never>;
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Settings"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly getContentVersions: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Versions"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly createContentVersion: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["Versions"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Versions"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteContentVersions: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateContentVersions: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["Versions"];
                    readonly keys?: readonly string[];
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Versions"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly getContentVersion: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier for the object. */
                readonly id: components["parameters"]["UUId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Versions"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteContentVersion: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier for the object. */
                readonly id: components["parameters"]["UUId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateContentVersion: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier for the object. */
                readonly id: components["parameters"]["UUId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["Versions"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Versions"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly saveContentVersion: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier for the object. */
                readonly id: components["parameters"]["UUId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": Record<string, never>;
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": Record<string, never>;
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly compareContentVersion: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier for the object. */
                readonly id: components["parameters"]["UUId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: Record<string, never>;
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly promoteContentVersion: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Unique identifier for the object. */
                readonly id: components["parameters"]["UUId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /** @description Hash of the main version of the item to be promoted. */
                    readonly mainHash?: string;
                    /** @description Optional array of field names of which the values are to be promoted. */
                    readonly fields?: string;
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": Record<string, never>;
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly getComments: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description Cursor for use in pagination. Often used in combination with limit. */
                readonly page?: components["parameters"]["Page"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Comments"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createComment: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description Which collection this collection comment is for.
                     * @example projects
                     */
                    readonly collection: string;
                    /** @example 81dfa7e0-56d2-471f-b96a-1cf8a62bdf28 */
                    readonly item: string;
                    /** @example A new comment */
                    readonly comment: string;
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Comments"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteComments: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateComments: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    readonly keys?: readonly string[];
                    readonly data?: {
                        /**
                         * @description Which collection this collection comment is for.
                         * @example projects
                         */
                        readonly collection: string;
                        /** @example 81dfa7e0-56d2-471f-b96a-1cf8a62bdf28 */
                        readonly item?: string;
                        /** @example A new comment */
                        readonly comment?: string;
                    };
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Comments"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly getComment: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Comments"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteComment: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateComment: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description Which collection this comment is for.
                     * @example projects
                     */
                    readonly collection: string;
                    /** @example 81dfa7e0-56d2-471f-b96a-1cf8a62bdf28 */
                    readonly item?: string;
                    /** @example An updated comment */
                    readonly comment?: string;
                };
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Comments"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsBlockButton: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockButton"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsBlockButton: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsBlockButton"][] | components["schemas"]["ItemsBlockButton"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockButton"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsBlockButton: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsBlockButton: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsBlockButton"][] | components["schemas"]["ItemsBlockButton"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockButton"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsBlockButton: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsBlockButton"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsBlockButton: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsBlockButton: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsBlockButton"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsBlockButton"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsBlockPosts: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockPosts"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsBlockPosts: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsBlockPosts"][] | components["schemas"]["ItemsBlockPosts"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockPosts"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsBlockPosts: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsBlockPosts: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsBlockPosts"][] | components["schemas"]["ItemsBlockPosts"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockPosts"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsBlockPosts: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsBlockPosts"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsBlockPosts: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsBlockPosts: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsBlockPosts"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsBlockPosts"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsBlockButtonGroup: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockButtonGroup"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsBlockButtonGroup: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsBlockButtonGroup"][] | components["schemas"]["ItemsBlockButtonGroup"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockButtonGroup"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsBlockButtonGroup: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsBlockButtonGroup: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsBlockButtonGroup"][] | components["schemas"]["ItemsBlockButtonGroup"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockButtonGroup"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsBlockButtonGroup: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsBlockButtonGroup"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsBlockButtonGroup: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsBlockButtonGroup: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsBlockButtonGroup"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsBlockButtonGroup"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsBlockHero: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockHero"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsBlockHero: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsBlockHero"][] | components["schemas"]["ItemsBlockHero"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockHero"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsBlockHero: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsBlockHero: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsBlockHero"][] | components["schemas"]["ItemsBlockHero"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockHero"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsBlockHero: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsBlockHero"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsBlockHero: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsBlockHero: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsBlockHero"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsBlockHero"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsBlockGalleryItems: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockGalleryItems"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsBlockGalleryItems: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsBlockGalleryItems"][] | components["schemas"]["ItemsBlockGalleryItems"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockGalleryItems"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsBlockGalleryItems: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsBlockGalleryItems: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsBlockGalleryItems"][] | components["schemas"]["ItemsBlockGalleryItems"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockGalleryItems"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsBlockGalleryItems: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsBlockGalleryItems"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsBlockGalleryItems: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsBlockGalleryItems: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsBlockGalleryItems"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsBlockGalleryItems"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsBlockGallery: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockGallery"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsBlockGallery: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsBlockGallery"][] | components["schemas"]["ItemsBlockGallery"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockGallery"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsBlockGallery: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsBlockGallery: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsBlockGallery"][] | components["schemas"]["ItemsBlockGallery"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockGallery"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsBlockGallery: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsBlockGallery"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsBlockGallery: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsBlockGallery: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsBlockGallery"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsBlockGallery"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsBlockForm: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockForm"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsBlockForm: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsBlockForm"][] | components["schemas"]["ItemsBlockForm"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockForm"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsBlockForm: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsBlockForm: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsBlockForm"][] | components["schemas"]["ItemsBlockForm"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockForm"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsBlockForm: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsBlockForm"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsBlockForm: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsBlockForm: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsBlockForm"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsBlockForm"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsGlobals: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsGlobals"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsGlobals: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsGlobals"][] | components["schemas"]["ItemsGlobals"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsGlobals"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsGlobals: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsGlobals: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsGlobals"][] | components["schemas"]["ItemsGlobals"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsGlobals"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsGlobals: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsGlobals"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsGlobals: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsGlobals: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsGlobals"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsGlobals"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsBlockPricing: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockPricing"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsBlockPricing: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsBlockPricing"][] | components["schemas"]["ItemsBlockPricing"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockPricing"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsBlockPricing: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsBlockPricing: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsBlockPricing"][] | components["schemas"]["ItemsBlockPricing"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockPricing"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsBlockPricing: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsBlockPricing"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsBlockPricing: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsBlockPricing: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsBlockPricing"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsBlockPricing"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsFormSubmissionValues: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsFormSubmissionValues"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsFormSubmissionValues: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsFormSubmissionValues"][] | components["schemas"]["ItemsFormSubmissionValues"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsFormSubmissionValues"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsFormSubmissionValues: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsFormSubmissionValues: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsFormSubmissionValues"][] | components["schemas"]["ItemsFormSubmissionValues"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsFormSubmissionValues"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsFormSubmissionValues: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsFormSubmissionValues"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsFormSubmissionValues: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsFormSubmissionValues: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsFormSubmissionValues"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsFormSubmissionValues"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsBlockPricingCards: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockPricingCards"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsBlockPricingCards: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsBlockPricingCards"][] | components["schemas"]["ItemsBlockPricingCards"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockPricingCards"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsBlockPricingCards: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsBlockPricingCards: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsBlockPricingCards"][] | components["schemas"]["ItemsBlockPricingCards"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockPricingCards"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsBlockPricingCards: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsBlockPricingCards"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsBlockPricingCards: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsBlockPricingCards: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsBlockPricingCards"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsBlockPricingCards"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsFormSubmissions: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsFormSubmissions"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsFormSubmissions: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsFormSubmissions"][] | components["schemas"]["ItemsFormSubmissions"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsFormSubmissions"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsFormSubmissions: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsFormSubmissions: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsFormSubmissions"][] | components["schemas"]["ItemsFormSubmissions"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsFormSubmissions"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsFormSubmissions: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsFormSubmissions"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsFormSubmissions: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsFormSubmissions: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsFormSubmissions"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsFormSubmissions"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsFormFields: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsFormFields"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsFormFields: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsFormFields"][] | components["schemas"]["ItemsFormFields"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsFormFields"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsFormFields: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsFormFields: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsFormFields"][] | components["schemas"]["ItemsFormFields"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsFormFields"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsFormFields: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsFormFields"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsFormFields: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsFormFields: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsFormFields"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsFormFields"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsNavigationItems: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsNavigationItems"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsNavigationItems: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsNavigationItems"][] | components["schemas"]["ItemsNavigationItems"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsNavigationItems"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsNavigationItems: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsNavigationItems: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsNavigationItems"][] | components["schemas"]["ItemsNavigationItems"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsNavigationItems"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsNavigationItems: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsNavigationItems"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsNavigationItems: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsNavigationItems: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsNavigationItems"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsNavigationItems"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsPageBlocks: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsPageBlocks"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsPageBlocks: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsPageBlocks"][] | components["schemas"]["ItemsPageBlocks"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsPageBlocks"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsPageBlocks: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsPageBlocks: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsPageBlocks"][] | components["schemas"]["ItemsPageBlocks"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsPageBlocks"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsPageBlocks: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsPageBlocks"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsPageBlocks: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsPageBlocks: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsPageBlocks"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsPageBlocks"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsBlockRichtext: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockRichtext"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsBlockRichtext: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsBlockRichtext"][] | components["schemas"]["ItemsBlockRichtext"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockRichtext"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsBlockRichtext: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsBlockRichtext: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsBlockRichtext"][] | components["schemas"]["ItemsBlockRichtext"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockRichtext"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsBlockRichtext: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsBlockRichtext"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsBlockRichtext: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsBlockRichtext: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsBlockRichtext"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsBlockRichtext"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsForms: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsForms"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsForms: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsForms"][] | components["schemas"]["ItemsForms"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsForms"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsForms: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsForms: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsForms"][] | components["schemas"]["ItemsForms"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsForms"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsForms: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsForms"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsForms: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsForms: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsForms"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsForms"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsNavigation: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsNavigation"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsNavigation: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsNavigation"][] | components["schemas"]["ItemsNavigation"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsNavigation"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsNavigation: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsNavigation: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsNavigation"][] | components["schemas"]["ItemsNavigation"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsNavigation"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsNavigation: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsNavigation"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsNavigation: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsNavigation: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsNavigation"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsNavigation"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsRedirects: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsRedirects"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsRedirects: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsRedirects"][] | components["schemas"]["ItemsRedirects"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsRedirects"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsRedirects: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsRedirects: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsRedirects"][] | components["schemas"]["ItemsRedirects"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsRedirects"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsRedirects: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsRedirects"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsRedirects: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsRedirects: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsRedirects"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsRedirects"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsPosts: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsPosts"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsPosts: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsPosts"][] | components["schemas"]["ItemsPosts"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsPosts"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsPosts: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsPosts: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsPosts"][] | components["schemas"]["ItemsPosts"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsPosts"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsPosts: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsPosts"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsPosts: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsPosts: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsPosts"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsPosts"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsPages: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsPages"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsPages: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsPages"][] | components["schemas"]["ItemsPages"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsPages"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsPages: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsPages: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsPages"][] | components["schemas"]["ItemsPages"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsPages"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsPages: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsPages"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsPages: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsPages: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsPages"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsPages"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsRoles: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsRoles"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsRoles: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsRoles"][] | components["schemas"]["ItemsRoles"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsRoles"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsRoles: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsRoles: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsRoles"][] | components["schemas"]["ItemsRoles"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsRoles"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsRoles: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsRoles"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsRoles: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsRoles: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsRoles"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsRoles"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsPeople: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsPeople"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsPeople: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsPeople"][] | components["schemas"]["ItemsPeople"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsPeople"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsPeople: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsPeople: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsPeople"][] | components["schemas"]["ItemsPeople"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsPeople"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsPeople: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsPeople"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsPeople: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsPeople: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsPeople"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsPeople"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsShows: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsShows"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsShows: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsShows"][] | components["schemas"]["ItemsShows"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsShows"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsShows: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsShows: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsShows"][] | components["schemas"]["ItemsShows"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsShows"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsShows: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsShows"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsShows: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsShows: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsShows"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsShows"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsPrograms: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsPrograms"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsPrograms: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsPrograms"][] | components["schemas"]["ItemsPrograms"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsPrograms"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsPrograms: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsPrograms: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsPrograms"][] | components["schemas"]["ItemsPrograms"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsPrograms"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsPrograms: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsPrograms"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsPrograms: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsPrograms: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsPrograms"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsPrograms"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsProductions: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsProductions"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsProductions: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsProductions"][] | components["schemas"]["ItemsProductions"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsProductions"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsProductions: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsProductions: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsProductions"][] | components["schemas"]["ItemsProductions"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsProductions"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsProductions: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsProductions"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsProductions: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsProductions: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsProductions"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsProductions"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsCities: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsCities"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsCities: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsCities"][] | components["schemas"]["ItemsCities"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsCities"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsCities: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsCities: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsCities"][] | components["schemas"]["ItemsCities"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsCities"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsCities: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsCities"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsCities: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsCities: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsCities"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsCities"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsOrganizations: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsOrganizations"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsOrganizations: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsOrganizations"][] | components["schemas"]["ItemsOrganizations"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsOrganizations"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsOrganizations: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsOrganizations: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsOrganizations"][] | components["schemas"]["ItemsOrganizations"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsOrganizations"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsOrganizations: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsOrganizations"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsOrganizations: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsOrganizations: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsOrganizations"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsOrganizations"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsPronouns: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsPronouns"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsPronouns: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsPronouns"][] | components["schemas"]["ItemsPronouns"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsPronouns"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsPronouns: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsPronouns: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsPronouns"][] | components["schemas"]["ItemsPronouns"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsPronouns"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsPronouns: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsPronouns"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsPronouns: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsPronouns: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsPronouns"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsPronouns"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsProductionsOrganizations: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsProductionsOrganizations"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsProductionsOrganizations: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsProductionsOrganizations"][] | components["schemas"]["ItemsProductionsOrganizations"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsProductionsOrganizations"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsProductionsOrganizations: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsProductionsOrganizations: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsProductionsOrganizations"][] | components["schemas"]["ItemsProductionsOrganizations"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsProductionsOrganizations"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsProductionsOrganizations: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsProductionsOrganizations"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsProductionsOrganizations: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsProductionsOrganizations: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsProductionsOrganizations"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsProductionsOrganizations"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsShowsPeople: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsShowsPeople"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsShowsPeople: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsShowsPeople"][] | components["schemas"]["ItemsShowsPeople"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsShowsPeople"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsShowsPeople: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsShowsPeople: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsShowsPeople"][] | components["schemas"]["ItemsShowsPeople"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsShowsPeople"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsShowsPeople: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsShowsPeople"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsShowsPeople: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsShowsPeople: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsShowsPeople"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsShowsPeople"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsProductionsShows: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsProductionsShows"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsProductionsShows: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsProductionsShows"][] | components["schemas"]["ItemsProductionsShows"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsProductionsShows"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsProductionsShows: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsProductionsShows: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsProductionsShows"][] | components["schemas"]["ItemsProductionsShows"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsProductionsShows"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsProductionsShows: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsProductionsShows"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsProductionsShows: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsProductionsShows: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsProductionsShows"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsProductionsShows"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsAddresses: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsAddresses"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsAddresses: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsAddresses"][] | components["schemas"]["ItemsAddresses"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsAddresses"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsAddresses: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsAddresses: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsAddresses"][] | components["schemas"]["ItemsAddresses"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsAddresses"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsAddresses: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsAddresses"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsAddresses: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsAddresses: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsAddresses"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsAddresses"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsSongs: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSongs"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsSongs: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsSongs"][] | components["schemas"]["ItemsSongs"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSongs"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsSongs: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsSongs: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsSongs"][] | components["schemas"]["ItemsSongs"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSongs"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsSongs: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsSongs"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsSongs: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsSongs: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsSongs"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsSongs"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsFestivals: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsFestivals"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsFestivals: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsFestivals"][] | components["schemas"]["ItemsFestivals"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsFestivals"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsFestivals: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsFestivals: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsFestivals"][] | components["schemas"]["ItemsFestivals"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsFestivals"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsFestivals: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsFestivals"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsFestivals: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsFestivals: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsFestivals"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsFestivals"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsEvents: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsEvents"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsEvents: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsEvents"][] | components["schemas"]["ItemsEvents"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsEvents"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsEvents: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsEvents: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsEvents"][] | components["schemas"]["ItemsEvents"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsEvents"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsEvents: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsEvents"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsEvents: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsEvents: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsEvents"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsEvents"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsFestivalsProductions: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsFestivalsProductions"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsFestivalsProductions: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsFestivalsProductions"][] | components["schemas"]["ItemsFestivalsProductions"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsFestivalsProductions"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsFestivalsProductions: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsFestivalsProductions: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsFestivalsProductions"][] | components["schemas"]["ItemsFestivalsProductions"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsFestivalsProductions"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsFestivalsProductions: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsFestivalsProductions"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsFestivalsProductions: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsFestivalsProductions: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsFestivalsProductions"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsFestivalsProductions"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsFestivalsOrganizations: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsFestivalsOrganizations"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsFestivalsOrganizations: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsFestivalsOrganizations"][] | components["schemas"]["ItemsFestivalsOrganizations"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsFestivalsOrganizations"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsFestivalsOrganizations: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsFestivalsOrganizations: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsFestivalsOrganizations"][] | components["schemas"]["ItemsFestivalsOrganizations"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsFestivalsOrganizations"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsFestivalsOrganizations: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsFestivalsOrganizations"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsFestivalsOrganizations: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsFestivalsOrganizations: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsFestivalsOrganizations"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsFestivalsOrganizations"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsSongsPeople: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSongsPeople"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsSongsPeople: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsSongsPeople"][] | components["schemas"]["ItemsSongsPeople"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSongsPeople"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsSongsPeople: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsSongsPeople: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsSongsPeople"][] | components["schemas"]["ItemsSongsPeople"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSongsPeople"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsSongsPeople: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsSongsPeople"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsSongsPeople: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsSongsPeople: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsSongsPeople"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsSongsPeople"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsShowsSongs: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsShowsSongs"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsShowsSongs: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsShowsSongs"][] | components["schemas"]["ItemsShowsSongs"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsShowsSongs"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsShowsSongs: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsShowsSongs: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsShowsSongs"][] | components["schemas"]["ItemsShowsSongs"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsShowsSongs"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsShowsSongs: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsShowsSongs"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsShowsSongs: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsShowsSongs: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsShowsSongs"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsShowsSongs"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsFestivalsPrograms: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsFestivalsPrograms"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsFestivalsPrograms: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsFestivalsPrograms"][] | components["schemas"]["ItemsFestivalsPrograms"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsFestivalsPrograms"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsFestivalsPrograms: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsFestivalsPrograms: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsFestivalsPrograms"][] | components["schemas"]["ItemsFestivalsPrograms"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsFestivalsPrograms"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsFestivalsPrograms: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsFestivalsPrograms"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsFestivalsPrograms: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsFestivalsPrograms: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsFestivalsPrograms"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsFestivalsPrograms"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsProgramsSongs: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsProgramsSongs"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsProgramsSongs: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsProgramsSongs"][] | components["schemas"]["ItemsProgramsSongs"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsProgramsSongs"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsProgramsSongs: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsProgramsSongs: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsProgramsSongs"][] | components["schemas"]["ItemsProgramsSongs"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsProgramsSongs"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsProgramsSongs: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsProgramsSongs"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsProgramsSongs: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsProgramsSongs: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsProgramsSongs"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsProgramsSongs"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsVenues: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsVenues"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsVenues: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsVenues"][] | components["schemas"]["ItemsVenues"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsVenues"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsVenues: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsVenues: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsVenues"][] | components["schemas"]["ItemsVenues"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsVenues"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsVenues: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsVenues"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsVenues: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsVenues: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsVenues"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsVenues"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsEventsVenues: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsEventsVenues"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsEventsVenues: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsEventsVenues"][] | components["schemas"]["ItemsEventsVenues"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsEventsVenues"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsEventsVenues: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsEventsVenues: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsEventsVenues"][] | components["schemas"]["ItemsEventsVenues"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsEventsVenues"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsEventsVenues: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsEventsVenues"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsEventsVenues: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsEventsVenues: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsEventsVenues"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsEventsVenues"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsProductionsPeople: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsProductionsPeople"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsProductionsPeople: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsProductionsPeople"][] | components["schemas"]["ItemsProductionsPeople"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsProductionsPeople"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsProductionsPeople: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsProductionsPeople: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsProductionsPeople"][] | components["schemas"]["ItemsProductionsPeople"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsProductionsPeople"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsProductionsPeople: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsProductionsPeople"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsProductionsPeople: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsProductionsPeople: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsProductionsPeople"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsProductionsPeople"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsProgramsEvents: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsProgramsEvents"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsProgramsEvents: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsProgramsEvents"][] | components["schemas"]["ItemsProgramsEvents"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsProgramsEvents"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsProgramsEvents: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsProgramsEvents: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsProgramsEvents"][] | components["schemas"]["ItemsProgramsEvents"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsProgramsEvents"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsProgramsEvents: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsProgramsEvents"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsProgramsEvents: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsProgramsEvents: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsProgramsEvents"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsProgramsEvents"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsProgramsPeople: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsProgramsPeople"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsProgramsPeople: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsProgramsPeople"][] | components["schemas"]["ItemsProgramsPeople"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsProgramsPeople"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsProgramsPeople: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsProgramsPeople: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsProgramsPeople"][] | components["schemas"]["ItemsProgramsPeople"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsProgramsPeople"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsProgramsPeople: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsProgramsPeople"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsProgramsPeople: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsProgramsPeople: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsProgramsPeople"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsProgramsPeople"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsTags: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsTags"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsTags: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsTags"][] | components["schemas"]["ItemsTags"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsTags"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsTags: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsTags: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsTags"][] | components["schemas"]["ItemsTags"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsTags"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsTags: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsTags"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsTags: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsTags: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsTags"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsTags"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsProgramsSections: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsProgramsSections"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsProgramsSections: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsProgramsSections"][] | components["schemas"]["ItemsProgramsSections"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsProgramsSections"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsProgramsSections: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsProgramsSections: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsProgramsSections"][] | components["schemas"]["ItemsProgramsSections"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsProgramsSections"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsProgramsSections: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsProgramsSections"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsProgramsSections: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsProgramsSections: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsProgramsSections"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsProgramsSections"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsOrganizationsTags: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsOrganizationsTags"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsOrganizationsTags: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsOrganizationsTags"][] | components["schemas"]["ItemsOrganizationsTags"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsOrganizationsTags"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsOrganizationsTags: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsOrganizationsTags: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsOrganizationsTags"][] | components["schemas"]["ItemsOrganizationsTags"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsOrganizationsTags"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsOrganizationsTags: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsOrganizationsTags"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsOrganizationsTags: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsOrganizationsTags: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsOrganizationsTags"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsOrganizationsTags"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsSectionNotes: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionNotes"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsSectionNotes: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsSectionNotes"][] | components["schemas"]["ItemsSectionNotes"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionNotes"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsSectionNotes: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsSectionNotes: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsSectionNotes"][] | components["schemas"]["ItemsSectionNotes"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionNotes"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsSectionNotes: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsSectionNotes"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsSectionNotes: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsSectionNotes: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsSectionNotes"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsSectionNotes"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsSectionCover: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionCover"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsSectionCover: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsSectionCover"][] | components["schemas"]["ItemsSectionCover"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionCover"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsSectionCover: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsSectionCover: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsSectionCover"][] | components["schemas"]["ItemsSectionCover"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionCover"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsSectionCover: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsSectionCover"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsSectionCover: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsSectionCover: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsSectionCover"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsSectionCover"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsProgramsSponsors: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsProgramsSponsors"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsProgramsSponsors: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsProgramsSponsors"][] | components["schemas"]["ItemsProgramsSponsors"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsProgramsSponsors"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsProgramsSponsors: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsProgramsSponsors: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsProgramsSponsors"][] | components["schemas"]["ItemsProgramsSponsors"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsProgramsSponsors"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsProgramsSponsors: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsProgramsSponsors"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsProgramsSponsors: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsProgramsSponsors: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsProgramsSponsors"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsProgramsSponsors"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsSectionBIOS: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionBIOS"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsSectionBIOS: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsSectionBIOS"][] | components["schemas"]["ItemsSectionBIOS"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionBIOS"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsSectionBIOS: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsSectionBIOS: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsSectionBIOS"][] | components["schemas"]["ItemsSectionBIOS"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionBIOS"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsSectionBIOS: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsSectionBIOS"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsSectionBIOS: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsSectionBIOS: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsSectionBIOS"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsSectionBIOS"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsSectionPhotos: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionPhotos"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsSectionPhotos: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsSectionPhotos"][] | components["schemas"]["ItemsSectionPhotos"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionPhotos"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsSectionPhotos: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsSectionPhotos: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsSectionPhotos"][] | components["schemas"]["ItemsSectionPhotos"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionPhotos"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsSectionPhotos: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsSectionPhotos"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsSectionPhotos: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsSectionPhotos: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsSectionPhotos"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsSectionPhotos"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsBlockAd: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockAd"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsBlockAd: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsBlockAd"][] | components["schemas"]["ItemsBlockAd"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockAd"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsBlockAd: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsBlockAd: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsBlockAd"][] | components["schemas"]["ItemsBlockAd"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockAd"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsBlockAd: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsBlockAd"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsBlockAd: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsBlockAd: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsBlockAd"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsBlockAd"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsSectionSponsors: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionSponsors"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsSectionSponsors: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsSectionSponsors"][] | components["schemas"]["ItemsSectionSponsors"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionSponsors"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsSectionSponsors: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsSectionSponsors: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsSectionSponsors"][] | components["schemas"]["ItemsSectionSponsors"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionSponsors"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsSectionSponsors: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsSectionSponsors"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsSectionSponsors: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsSectionSponsors: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsSectionSponsors"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsSectionSponsors"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsBlockAdBlocks: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockAdBlocks"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsBlockAdBlocks: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsBlockAdBlocks"][] | components["schemas"]["ItemsBlockAdBlocks"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockAdBlocks"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsBlockAdBlocks: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsBlockAdBlocks: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsBlockAdBlocks"][] | components["schemas"]["ItemsBlockAdBlocks"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsBlockAdBlocks"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsBlockAdBlocks: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsBlockAdBlocks"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsBlockAdBlocks: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsBlockAdBlocks: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsBlockAdBlocks"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsBlockAdBlocks"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsSectionStaff: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionStaff"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsSectionStaff: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsSectionStaff"][] | components["schemas"]["ItemsSectionStaff"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionStaff"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsSectionStaff: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsSectionStaff: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsSectionStaff"][] | components["schemas"]["ItemsSectionStaff"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionStaff"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsSectionStaff: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsSectionStaff"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsSectionStaff: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsSectionStaff: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsSectionStaff"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsSectionStaff"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsSectionSongs: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionSongs"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsSectionSongs: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsSectionSongs"][] | components["schemas"]["ItemsSectionSongs"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionSongs"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsSectionSongs: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsSectionSongs: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsSectionSongs"][] | components["schemas"]["ItemsSectionSongs"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionSongs"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsSectionSongs: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsSectionSongs"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsSectionSongs: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsSectionSongs: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsSectionSongs"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsSectionSongs"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsSectionNotesBlocks: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionNotesBlocks"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsSectionNotesBlocks: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsSectionNotesBlocks"][] | components["schemas"]["ItemsSectionNotesBlocks"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionNotesBlocks"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsSectionNotesBlocks: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsSectionNotesBlocks: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsSectionNotesBlocks"][] | components["schemas"]["ItemsSectionNotesBlocks"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionNotesBlocks"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsSectionNotesBlocks: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsSectionNotesBlocks"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsSectionNotesBlocks: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsSectionNotesBlocks: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsSectionNotesBlocks"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsSectionNotesBlocks"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsSectionCredits: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionCredits"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsSectionCredits: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsSectionCredits"][] | components["schemas"]["ItemsSectionCredits"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionCredits"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsSectionCredits: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsSectionCredits: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsSectionCredits"][] | components["schemas"]["ItemsSectionCredits"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionCredits"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsSectionCredits: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsSectionCredits"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsSectionCredits: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsSectionCredits: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsSectionCredits"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsSectionCredits"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsSectionSpecialThanks: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionSpecialThanks"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsSectionSpecialThanks: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsSectionSpecialThanks"][] | components["schemas"]["ItemsSectionSpecialThanks"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionSpecialThanks"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsSectionSpecialThanks: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsSectionSpecialThanks: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsSectionSpecialThanks"][] | components["schemas"]["ItemsSectionSpecialThanks"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionSpecialThanks"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsSectionSpecialThanks: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsSectionSpecialThanks"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsSectionSpecialThanks: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsSectionSpecialThanks: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsSectionSpecialThanks"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsSectionSpecialThanks"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly readItemsSectionAds: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionAds"][];
                        readonly meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly createItemsSectionAds: {
        readonly parameters: {
            readonly query?: {
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsSectionAds"][] | components["schemas"]["ItemsSectionAds"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionAds"][];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly deleteItemsSectionAds: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly updateItemsSectionAds: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description A limit on the number of objects that are returned. */
                readonly limit?: components["parameters"]["Limit"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description How many items to skip when fetching data. */
                readonly offset?: components["parameters"]["Offset"];
                /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
                 *      */
                readonly sort?: components["parameters"]["Sort"];
                /** @description Select items in collection by given conditions. */
                readonly filter?: components["parameters"]["Filter"];
                /** @description Filter by items that contain the given search query in one of their fields. */
                readonly search?: components["parameters"]["Search"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ItemsSectionAds"][] | components["schemas"]["ItemsSectionAds"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ItemsSectionAds"][];
                    };
                };
            };
        };
    };
    readonly readSingleItemsSectionAds: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
                /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
                 *      */
                readonly version?: components["parameters"]["Version"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsSectionAds"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteSingleItemsSectionAds: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateSingleItemsSectionAds: {
        readonly parameters: {
            readonly query?: {
                /** @description Control what fields are being returned in the object. */
                readonly fields?: components["parameters"]["Fields"];
                /** @description What metadata to return in the response. */
                readonly meta?: components["parameters"]["Meta"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Index of the item. */
                readonly id: number | string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ItemsSectionAds"];
            };
        };
        readonly responses: {
            /** @description Successful request */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ItemsSectionAds"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
}
